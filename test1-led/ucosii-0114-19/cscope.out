cscope 15 G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19"               0000631856
	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\arm_common_tables.h

24 #i‚de‡
_ARM_COMMON_TABLES_H


25 
	#_ARM_COMMON_TABLES_H


	)

27 
	~"¨m_m©h.h
"

29 
uöt16_t
 
¨mBôRevTabÀ
[256];

30 
q15_t
 
¨mRecùTabÀQ15
[64];

31 
q31_t
 
¨mRecùTabÀQ31
[64];

32 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

33 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\arm_math.h

251 #i‚de‡
_ARM_MATH_H


252 
	#_ARM_MATH_H


	)

254 
	#__CMSIS_GENERIC


	)

256 #i‡
deföed
 (
ARM_MATH_CM4
)

257 
	~"c‹e_cm4.h
"

258 #ñi‡
deföed
 (
ARM_MATH_CM3
)

259 
	~"c‹e_cm3.h
"

260 #ñi‡
deföed
 (
ARM_MATH_CM0
)

261 
	~"c‹e_cm0.h
"

263 
	~"ARMCM4.h
"

267 #unde‡
__CMSIS_GENERIC


268 
	~"°rög.h
"

269 
	~"m©h.h
"

270 #ifdef 
__˝lu•lus


280 
	#DELTA_Q31
 (0x100)

	)

281 
	#DELTA_Q15
 0x5

	)

282 
	#INDEX_MASK
 0x0000003F

	)

283 
	#PI
 3.14159265358979f

	)

289 
	#TABLE_SIZE
 256

	)

290 
	#TABLE_SPACING_Q31
 0x800000

	)

291 
	#TABLE_SPACING_Q15
 0x80

	)

298 
	#INPUT_SPACING
 0xB60B61

	)

307 
ARM_MATH_SUCCESS
 = 0,

308 
ARM_MATH_ARGUMENT_ERROR
 = -1,

309 
ARM_MATH_LENGTH_ERROR
 = -2,

310 
ARM_MATH_SIZE_MISMATCH
 = -3,

311 
ARM_MATH_NANINF
 = -4,

312 
ARM_MATH_SINGULAR
 = -5,

313 
ARM_MATH_TEST_FAILURE
 = -6

314 } 
	t¨m_°©us
;

319 
öt8_t
 
	tq7_t
;

324 
öt16_t
 
	tq15_t
;

329 
öt32_t
 
	tq31_t
;

334 
öt64_t
 
	tq63_t
;

339 
	tÊﬂt32_t
;

344 
	tÊﬂt64_t
;

349 
	#__SIMD32
(
addr
Ë(*(
öt32_t
 **Ë& (addr))

	)

351 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

355 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0x0000FFFF) | \

356 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
Ë& (öt32_t)0xFFFF0000Ë)

	)

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0) << 0) & (int32_t)0x000000FF) | \

367 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

368 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

369 (((
öt32_t
)(
v3
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

372 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3) << 0) & (int32_t)0x000000FF) | \

373 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

374 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

375 (((
öt32_t
)(
v0
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

383 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

384 
q63_t
 
x
)

386  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

387 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

393 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

394 
q63_t
 
x
)

396  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

397 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

403 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

404 
q31_t
 
x
)

406  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

407 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

413 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

414 
q31_t
 
x
)

416  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

417 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

424 
__INLINE
 
q63_t
 
mu…32x64
(

425 
q63_t
 
x
,

426 
q31_t
 
y
)

428  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

429 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

433 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__CC_ARM
 )

434 
	#__CLZ
 
__˛z


	)

437 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

439 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
);

442 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
)

444 
uöt32_t
 
cou¡
 = 0;

445 
uöt32_t
 
mask
 = 0x80000000;

447 (
d©a
 & 
mask
) == 0)

449 
cou¡
 += 1u;

450 
mask
 = mask >> 1u;

453 (
cou¡
);

463 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

464 
q31_t
 
ö
,

465 
q31_t
 * 
d°
,

466 
q31_t
 * 
pRecùTabÀ
)

469 
uöt32_t
 
out
, 
ãmpVÆ
;

470 
uöt32_t
 
ödex
, 
i
;

471 
uöt32_t
 
signBôs
;

473 if(
ö
 > 0)

475 
signBôs
 = 
__CLZ
(
ö
) - 1;

479 
signBôs
 = 
__CLZ
(-
ö
) - 1;

483 
ö
 = i¿<< 
signBôs
;

486 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

487 
ödex
 = (ödex & 
INDEX_MASK
);

490 
out
 = 
pRecùTabÀ
[
ödex
];

494 
i
 = 0u; i < 2u; i++)

496 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

497 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

500 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

504 *
d°
 = 
out
;

507  (
signBôs
 + 1u);

514 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

515 
q15_t
 
ö
,

516 
q15_t
 * 
d°
,

517 
q15_t
 * 
pRecùTabÀ
)

520 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

521 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

522 
uöt32_t
 
signBôs
 = 0;

524 if(
ö
 > 0)

526 
signBôs
 = 
__CLZ
(
ö
) - 17;

530 
signBôs
 = 
__CLZ
(-
ö
) - 17;

534 
ö
 = i¿<< 
signBôs
;

537 
ödex
 = 
ö
 >> 8;

538 
ödex
 = (ödex & 
INDEX_MASK
);

541 
out
 = 
pRecùTabÀ
[
ödex
];

545 
i
 = 0; i < 2; i++)

547 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

548 
ãmpVÆ
 = 0x7FFF -ÅempVal;

550 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

554 *
d°
 = 
out
;

557  (
signBôs
 + 1);

565 #i‡
deföed
(
ARM_MATH_CM0
)

567 
__INLINE
 
q31_t
 
__SSAT
(

568 
q31_t
 
x
,

569 
uöt32_t
 
y
)

571 
öt32_t
 
posMax
, 
√gMö
;

572 
uöt32_t
 
i
;

574 
posMax
 = 1;

575 
i
 = 0; i < (
y
 - 1); i++)

577 
posMax
 =ÖosMax * 2;

580 if(
x
 > 0)

582 
posMax
 = (posMax - 1);

584 if(
x
 > 
posMax
)

586 
x
 = 
posMax
;

591 
√gMö
 = -
posMax
;

593 if(
x
 < 
√gMö
)

595 
x
 = 
√gMö
;

598  (
x
);

610 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

615 
__INLINE
 
q31_t
 
__QADD8
(

616 
q31_t
 
x
,

617 
q31_t
 
y
)

620 
q31_t
 
sum
;

621 
q7_t
 
r
, 
s
, 
t
, 
u
;

623 
r
 = (Ë
x
;

624 
s
 = (Ë
y
;

626 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

627 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

628 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

629 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

631 
sum
 = (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

632 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

634  
sum
;

641 
__INLINE
 
q31_t
 
__QSUB8
(

642 
q31_t
 
x
,

643 
q31_t
 
y
)

646 
q31_t
 
sum
;

647 
q31_t
 
r
, 
s
, 
t
, 
u
;

649 
r
 = (Ë
x
;

650 
s
 = (Ë
y
;

652 
r
 = 
__SSAT
(‘ - 
s
), 8);

653 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

654 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

655 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

657 
sum
 =

658 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 & 0x000000FF);

660  
sum
;

670 
__INLINE
 
q31_t
 
__QADD16
(

671 
q31_t
 
x
,

672 
q31_t
 
y
)

675 
q31_t
 
sum
;

676 
q31_t
 
r
, 
s
;

678 
r
 = (Ë
x
;

679 
s
 = (Ë
y
;

681 
r
 = 
__SSAT
‘ + 
s
, 16);

682 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

684 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

686  
sum
;

693 
__INLINE
 
q31_t
 
__SHADD16
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q31_t
 
r
, 
s
;

701 
r
 = (Ë
x
;

702 
s
 = (Ë
y
;

704 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

705 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

707 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

709  
sum
;

716 
__INLINE
 
q31_t
 
__QSUB16
(

717 
q31_t
 
x
,

718 
q31_t
 
y
)

721 
q31_t
 
sum
;

722 
q31_t
 
r
, 
s
;

724 
r
 = (Ë
x
;

725 
s
 = (Ë
y
;

727 
r
 = 
__SSAT
‘ - 
s
, 16);

728 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

730 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

732  
sum
;

738 
__INLINE
 
q31_t
 
__SHSUB16
(

739 
q31_t
 
x
,

740 
q31_t
 
y
)

743 
q31_t
 
diff
;

744 
q31_t
 
r
, 
s
;

746 
r
 = (Ë
x
;

747 
s
 = (Ë
y
;

749 
r
 = (‘ >> 1Ë- (
s
 >> 1));

750 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

752 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

754  
diff
;

760 
__INLINE
 
q31_t
 
__QASX
(

761 
q31_t
 
x
,

762 
q31_t
 
y
)

765 
q31_t
 
sum
 = 0;

767 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

768 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

770  
sum
;

776 
__INLINE
 
q31_t
 
__SHASX
(

777 
q31_t
 
x
,

778 
q31_t
 
y
)

781 
q31_t
 
sum
;

782 
q31_t
 
r
, 
s
;

784 
r
 = (Ë
x
;

785 
s
 = (Ë
y
;

787 
r
 = (‘ >> 1Ë- (
y
 >> 17));

788 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

790 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

792  
sum
;

799 
__INLINE
 
q31_t
 
__QSAX
(

800 
q31_t
 
x
,

801 
q31_t
 
y
)

804 
q31_t
 
sum
 = 0;

806 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

807 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

809  
sum
;

815 
__INLINE
 
q31_t
 
__SHSAX
(

816 
q31_t
 
x
,

817 
q31_t
 
y
)

820 
q31_t
 
sum
;

821 
q31_t
 
r
, 
s
;

823 
r
 = (Ë
x
;

824 
s
 = (Ë
y
;

826 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

827 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

829 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

831  
sum
;

837 
__INLINE
 
q31_t
 
__SMUSDX
(

838 
q31_t
 
x
,

839 
q31_t
 
y
)

842  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) -

843 ((Ë(
x
 >> 16Ë* (Ë
y
)));

849 
__INLINE
 
q31_t
 
__SMUADX
(

850 
q31_t
 
x
,

851 
q31_t
 
y
)

854  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) +

855 ((Ë(
x
 >> 16Ë* (Ë
y
)));

861 
__INLINE
 
q31_t
 
__QADD
(

862 
q31_t
 
x
,

863 
q31_t
 
y
)

865  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

871 
__INLINE
 
q31_t
 
__QSUB
(

872 
q31_t
 
x
,

873 
q31_t
 
y
)

875  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

881 
__INLINE
 
q31_t
 
__SMLAD
(

882 
q31_t
 
x
,

883 
q31_t
 
y
,

884 
q31_t
 
sum
)

887  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

888 ((Ë
x
 * (Ë
y
));

894 
__INLINE
 
q31_t
 
__SMLADX
(

895 
q31_t
 
x
,

896 
q31_t
 
y
,

897 
q31_t
 
sum
)

900  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

901 ((Ë
x
 * (Ë(
y
 >> 16)));

907 
__INLINE
 
q31_t
 
__SMLSDX
(

908 
q31_t
 
x
,

909 
q31_t
 
y
,

910 
q31_t
 
sum
)

913  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

914 ((Ë
x
 * (Ë(
y
 >> 16)));

920 
__INLINE
 
q63_t
 
__SMLALD
(

921 
q31_t
 
x
,

922 
q31_t
 
y
,

923 
q63_t
 
sum
)

926  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

927 ((Ë
x
 * (Ë
y
));

933 
__INLINE
 
q63_t
 
__SMLALDX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
,

936 
q63_t
 
sum
)

939  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

940 ((Ë
x
 * (Ë(
y
 >> 16));

946 
__INLINE
 
q31_t
 
__SMUAD
(

947 
q31_t
 
x
,

948 
q31_t
 
y
)

951  (((
x
 >> 16Ë* (
y
 >> 16)) +

952 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

958 
__INLINE
 
q31_t
 
__SMUSD
(

959 
q31_t
 
x
,

960 
q31_t
 
y
)

963  (-((
x
 >> 16Ë* (
y
 >> 16)) +

964 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

978 
uöt16_t
 
numT≠s
;

979 
q7_t
 *
pSèã
;

980 
q7_t
 *
pC€ffs
;

981 } 
	t¨m_fú_ö°™˚_q7
;

988 
uöt16_t
 
numT≠s
;

989 
q15_t
 *
pSèã
;

990 
q15_t
 *
pC€ffs
;

991 } 
	t¨m_fú_ö°™˚_q15
;

998 
uöt16_t
 
numT≠s
;

999 
q31_t
 *
pSèã
;

1000 
q31_t
 *
pC€ffs
;

1001 } 
	t¨m_fú_ö°™˚_q31
;

1008 
uöt16_t
 
numT≠s
;

1009 
Êﬂt32_t
 *
pSèã
;

1010 
Êﬂt32_t
 *
pC€ffs
;

1011 } 
	t¨m_fú_ö°™˚_f32
;

1022 
¨m_fú_q7
(

1023 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1024 
q7_t
 * 
pSrc
,

1025 
q7_t
 * 
pD°
,

1026 
uöt32_t
 
blockSize
);

1038 
¨m_fú_öô_q7
(

1039 
¨m_fú_ö°™˚_q7
 * 
S
,

1040 
uöt16_t
 
numT≠s
,

1041 
q7_t
 * 
pC€ffs
,

1042 
q7_t
 * 
pSèã
,

1043 
uöt32_t
 
blockSize
);

1054 
¨m_fú_q15
(

1055 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1056 
q15_t
 * 
pSrc
,

1057 
q15_t
 * 
pD°
,

1058 
uöt32_t
 
blockSize
);

1068 
¨m_fú_Á°_q15
(

1069 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1070 
q15_t
 * 
pSrc
,

1071 
q15_t
 * 
pD°
,

1072 
uöt32_t
 
blockSize
);

1085 
¨m_°©us
 
¨m_fú_öô_q15
(

1086 
¨m_fú_ö°™˚_q15
 * 
S
,

1087 
uöt16_t
 
numT≠s
,

1088 
q15_t
 * 
pC€ffs
,

1089 
q15_t
 * 
pSèã
,

1090 
uöt32_t
 
blockSize
);

1100 
¨m_fú_q31
(

1101 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1102 
q31_t
 * 
pSrc
,

1103 
q31_t
 * 
pD°
,

1104 
uöt32_t
 
blockSize
);

1114 
¨m_fú_Á°_q31
(

1115 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1116 
q31_t
 * 
pSrc
,

1117 
q31_t
 * 
pD°
,

1118 
uöt32_t
 
blockSize
);

1129 
¨m_fú_öô_q31
(

1130 
¨m_fú_ö°™˚_q31
 * 
S
,

1131 
uöt16_t
 
numT≠s
,

1132 
q31_t
 * 
pC€ffs
,

1133 
q31_t
 * 
pSèã
,

1134 
uöt32_t
 
blockSize
);

1144 
¨m_fú_f32
(

1145 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1146 
Êﬂt32_t
 * 
pSrc
,

1147 
Êﬂt32_t
 * 
pD°
,

1148 
uöt32_t
 
blockSize
);

1159 
¨m_fú_öô_f32
(

1160 
¨m_fú_ö°™˚_f32
 * 
S
,

1161 
uöt16_t
 
numT≠s
,

1162 
Êﬂt32_t
 * 
pC€ffs
,

1163 
Êﬂt32_t
 * 
pSèã
,

1164 
uöt32_t
 
blockSize
);

1172 
öt8_t
 
numSèges
;

1173 
q15_t
 *
pSèã
;

1174 
q15_t
 *
pC€ffs
;

1175 
öt8_t
 
po°Shi·
;

1177 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1185 
uöt32_t
 
numSèges
;

1186 
q31_t
 *
pSèã
;

1187 
q31_t
 *
pC€ffs
;

1188 
uöt8_t
 
po°Shi·
;

1190 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1197 
uöt32_t
 
numSèges
;

1198 
Êﬂt32_t
 *
pSèã
;

1199 
Êﬂt32_t
 *
pC€ffs
;

1202 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1215 
¨m_biquad_ˇsˇde_df1_q15
(

1216 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1217 
q15_t
 * 
pSrc
,

1218 
q15_t
 * 
pD°
,

1219 
uöt32_t
 
blockSize
);

1231 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1232 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1233 
uöt8_t
 
numSèges
,

1234 
q15_t
 * 
pC€ffs
,

1235 
q15_t
 * 
pSèã
,

1236 
öt8_t
 
po°Shi·
);

1248 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1249 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1250 
q15_t
 * 
pSrc
,

1251 
q15_t
 * 
pD°
,

1252 
uöt32_t
 
blockSize
);

1264 
¨m_biquad_ˇsˇde_df1_q31
(

1265 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1266 
q31_t
 * 
pSrc
,

1267 
q31_t
 * 
pD°
,

1268 
uöt32_t
 
blockSize
);

1279 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1280 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1281 
q31_t
 * 
pSrc
,

1282 
q31_t
 * 
pD°
,

1283 
uöt32_t
 
blockSize
);

1295 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1296 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1297 
uöt8_t
 
numSèges
,

1298 
q31_t
 * 
pC€ffs
,

1299 
q31_t
 * 
pSèã
,

1300 
öt8_t
 
po°Shi·
);

1311 
¨m_biquad_ˇsˇde_df1_f32
(

1312 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1313 
Êﬂt32_t
 * 
pSrc
,

1314 
Êﬂt32_t
 * 
pD°
,

1315 
uöt32_t
 
blockSize
);

1326 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1327 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1328 
uöt8_t
 
numSèges
,

1329 
Êﬂt32_t
 * 
pC€ffs
,

1330 
Êﬂt32_t
 * 
pSèã
);

1339 
uöt16_t
 
numRows
;

1340 
uöt16_t
 
numCﬁs
;

1341 
Êﬂt32_t
 *
pD©a
;

1342 } 
	t¨m_m©rix_ö°™˚_f32
;

1350 
uöt16_t
 
numRows
;

1351 
uöt16_t
 
numCﬁs
;

1352 
q15_t
 *
pD©a
;

1354 } 
	t¨m_m©rix_ö°™˚_q15
;

1362 
uöt16_t
 
numRows
;

1363 
uöt16_t
 
numCﬁs
;

1364 
q31_t
 *
pD©a
;

1366 } 
	t¨m_m©rix_ö°™˚_q31
;

1379 
¨m_°©us
 
¨m_m©_add_f32
(

1380 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1381 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1382 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1393 
¨m_°©us
 
¨m_m©_add_q15
(

1394 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1395 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1396 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1407 
¨m_°©us
 
¨m_m©_add_q31
(

1408 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1409 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1410 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1421 
¨m_°©us
 
¨m_m©_å™s_f32
(

1422 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1423 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1434 
¨m_°©us
 
¨m_m©_å™s_q15
(

1435 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1436 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1446 
¨m_°©us
 
¨m_m©_å™s_q31
(

1447 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1448 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1460 
¨m_°©us
 
¨m_m©_mu…_f32
(

1461 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1462 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1463 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1474 
¨m_°©us
 
¨m_m©_mu…_q15
(

1475 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1476 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1477 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1478 
q15_t
 * 
pSèã
);

1490 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1491 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1492 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1493 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1494 
q15_t
 * 
pSèã
);

1505 
¨m_°©us
 
¨m_m©_mu…_q31
(

1506 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1507 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1508 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1519 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1520 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1521 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1522 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1534 
¨m_°©us
 
¨m_m©_sub_f32
(

1535 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1536 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1537 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1548 
¨m_°©us
 
¨m_m©_sub_q15
(

1549 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1550 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1551 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1562 
¨m_°©us
 
¨m_m©_sub_q31
(

1563 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1564 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1565 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1576 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1577 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1578 
Êﬂt32_t
 
sˇÀ
,

1579 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1591 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1592 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1593 
q15_t
 
sˇÀFø˘
,

1594 
öt32_t
 
shi·
,

1595 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1607 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1608 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1609 
q31_t
 
sˇÀFø˘
,

1610 
öt32_t
 
shi·
,

1611 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1623 
¨m_m©_öô_q31
(

1624 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1625 
uöt16_t
 
nRows
,

1626 
uöt16_t
 
nCﬁumns
,

1627 
q31_t
 *
pD©a
);

1638 
¨m_m©_öô_q15
(

1639 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1640 
uöt16_t
 
nRows
,

1641 
uöt16_t
 
nCﬁumns
,

1642 
q15_t
 *
pD©a
);

1653 
¨m_m©_öô_f32
(

1654 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1655 
uöt16_t
 
nRows
,

1656 
uöt16_t
 
nCﬁumns
,

1657 
Êﬂt32_t
 *
pD©a
);

1666 
q15_t
 
A0
;

1667 #ifde‡
ARM_MATH_CM0


1668 
q15_t
 
A1
;

1669 
q15_t
 
A2
;

1671 
q31_t
 
A1
;

1673 
q15_t
 
°©e
[3];

1674 
q15_t
 
Kp
;

1675 
q15_t
 
Ki
;

1676 
q15_t
 
Kd
;

1677 } 
	t¨m_pid_ö°™˚_q15
;

1684 
q31_t
 
A0
;

1685 
q31_t
 
A1
;

1686 
q31_t
 
A2
;

1687 
q31_t
 
°©e
[3];

1688 
q31_t
 
Kp
;

1689 
q31_t
 
Ki
;

1690 
q31_t
 
Kd
;

1692 } 
	t¨m_pid_ö°™˚_q31
;

1699 
Êﬂt32_t
 
A0
;

1700 
Êﬂt32_t
 
A1
;

1701 
Êﬂt32_t
 
A2
;

1702 
Êﬂt32_t
 
°©e
[3];

1703 
Êﬂt32_t
 
Kp
;

1704 
Êﬂt32_t
 
Ki
;

1705 
Êﬂt32_t
 
Kd
;

1706 } 
	t¨m_pid_ö°™˚_f32
;

1716 
¨m_pid_öô_f32
(

1717 
¨m_pid_ö°™˚_f32
 * 
S
,

1718 
öt32_t
 
ª£tSèãFœg
);

1725 
¨m_pid_ª£t_f32
(

1726 
¨m_pid_ö°™˚_f32
 * 
S
);

1735 
¨m_pid_öô_q31
(

1736 
¨m_pid_ö°™˚_q31
 * 
S
,

1737 
öt32_t
 
ª£tSèãFœg
);

1746 
¨m_pid_ª£t_q31
(

1747 
¨m_pid_ö°™˚_q31
 * 
S
);

1755 
¨m_pid_öô_q15
(

1756 
¨m_pid_ö°™˚_q15
 * 
S
,

1757 
öt32_t
 
ª£tSèãFœg
);

1764 
¨m_pid_ª£t_q15
(

1765 
¨m_pid_ö°™˚_q15
 * 
S
);

1773 
uöt32_t
 
nVÆues
;

1774 
Êﬂt32_t
 
x1
;

1775 
Êﬂt32_t
 
xS∑cög
;

1776 
Êﬂt32_t
 *
pYD©a
;

1777 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1785 
uöt16_t
 
numRows
;

1786 
uöt16_t
 
numCﬁs
;

1787 
Êﬂt32_t
 *
pD©a
;

1788 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1796 
uöt16_t
 
numRows
;

1797 
uöt16_t
 
numCﬁs
;

1798 
q31_t
 *
pD©a
;

1799 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1807 
uöt16_t
 
numRows
;

1808 
uöt16_t
 
numCﬁs
;

1809 
q15_t
 *
pD©a
;

1810 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1818 
uöt16_t
 
numRows
;

1819 
uöt16_t
 
numCﬁs
;

1820 
q7_t
 *
pD©a
;

1821 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1833 
¨m_mu…_q7
(

1834 
q7_t
 * 
pSrcA
,

1835 
q7_t
 * 
pSrcB
,

1836 
q7_t
 * 
pD°
,

1837 
uöt32_t
 
blockSize
);

1848 
¨m_mu…_q15
(

1849 
q15_t
 * 
pSrcA
,

1850 
q15_t
 * 
pSrcB
,

1851 
q15_t
 * 
pD°
,

1852 
uöt32_t
 
blockSize
);

1863 
¨m_mu…_q31
(

1864 
q31_t
 * 
pSrcA
,

1865 
q31_t
 * 
pSrcB
,

1866 
q31_t
 * 
pD°
,

1867 
uöt32_t
 
blockSize
);

1878 
¨m_mu…_f32
(

1879 
Êﬂt32_t
 * 
pSrcA
,

1880 
Êﬂt32_t
 * 
pSrcB
,

1881 
Êﬂt32_t
 * 
pD°
,

1882 
uöt32_t
 
blockSize
);

1891 
uöt16_t
 
f·Lí
;

1892 
uöt8_t
 
if·Fœg
;

1893 
uöt8_t
 
bôRevî£Fœg
;

1894 
q15_t
 *
pTwiddÀ
;

1895 
uöt16_t
 *
pBôRevTabÀ
;

1896 
uöt16_t
 
twidC€fModifõr
;

1897 
uöt16_t
 
bôRevFa˘‹
;

1898 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1906 
uöt16_t
 
f·Lí
;

1907 
uöt8_t
 
if·Fœg
;

1908 
uöt8_t
 
bôRevî£Fœg
;

1909 
q31_t
 *
pTwiddÀ
;

1910 
uöt16_t
 *
pBôRevTabÀ
;

1911 
uöt16_t
 
twidC€fModifõr
;

1912 
uöt16_t
 
bôRevFa˘‹
;

1913 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

1921 
uöt16_t
 
f·Lí
;

1922 
uöt8_t
 
if·Fœg
;

1923 
uöt8_t
 
bôRevî£Fœg
;

1924 
Êﬂt32_t
 *
pTwiddÀ
;

1925 
uöt16_t
 *
pBôRevTabÀ
;

1926 
uöt16_t
 
twidC€fModifõr
;

1927 
uöt16_t
 
bôRevFa˘‹
;

1928 
Êﬂt32_t
 
⁄ebyf·Lí
;

1929 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

1938 
¨m_cf·_ødix4_q15
(

1939 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1940 
q15_t
 * 
pSrc
);

1951 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1952 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1953 
uöt16_t
 
f·Lí
,

1954 
uöt8_t
 
if·Fœg
,

1955 
uöt8_t
 
bôRevî£Fœg
);

1964 
¨m_cf·_ødix4_q31
(

1965 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1966 
q31_t
 * 
pSrc
);

1977 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

1978 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1979 
uöt16_t
 
f·Lí
,

1980 
uöt8_t
 
if·Fœg
,

1981 
uöt8_t
 
bôRevî£Fœg
);

1990 
¨m_cf·_ødix4_f32
(

1991 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1992 
Êﬂt32_t
 * 
pSrc
);

2003 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2004 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2005 
uöt16_t
 
f·Lí
,

2006 
uöt8_t
 
if·Fœg
,

2007 
uöt8_t
 
bôRevî£Fœg
);

2024 
¨m_ødix4_buâîÊy_f32
(

2025 
Êﬂt32_t
 * 
pSrc
,

2026 
uöt16_t
 
f·Lí
,

2027 
Êﬂt32_t
 * 
pC€f
,

2028 
uöt16_t
 
twidC€fModifõr
);

2040 
¨m_ødix4_buâîÊy_övî£_f32
(

2041 
Êﬂt32_t
 * 
pSrc
,

2042 
uöt16_t
 
f·Lí
,

2043 
Êﬂt32_t
 * 
pC€f
,

2044 
uöt16_t
 
twidC€fModifõr
,

2045 
Êﬂt32_t
 
⁄ebyf·Lí
);

2056 
¨m_bôªvîßl_f32
(

2057 
Êﬂt32_t
 *
pSrc
,

2058 
uöt16_t
 
f·Size
,

2059 
uöt16_t
 
bôRevFa˘‹
,

2060 
uöt16_t
 *
pBôRevTab
);

2071 
¨m_ødix4_buâîÊy_q31
(

2072 
q31_t
 *
pSrc
,

2073 
uöt32_t
 
f·Lí
,

2074 
q31_t
 *
pC€f
,

2075 
uöt32_t
 
twidC€fModifõr
);

2086 
¨m_ødix4_buâîÊy_övî£_q31
(

2087 
q31_t
 * 
pSrc
,

2088 
uöt32_t
 
f·Lí
,

2089 
q31_t
 * 
pC€f
,

2090 
uöt32_t
 
twidC€fModifõr
);

2101 
¨m_bôªvîßl_q31
(

2102 
q31_t
 * 
pSrc
,

2103 
uöt32_t
 
f·Lí
,

2104 
uöt16_t
 
bôRevFa˘‹
,

2105 
uöt16_t
 *
pBôRevTab
);

2116 
¨m_ødix4_buâîÊy_q15
(

2117 
q15_t
 *
pSrc16
,

2118 
uöt32_t
 
f·Lí
,

2119 
q15_t
 *
pC€f16
,

2120 
uöt32_t
 
twidC€fModifõr
);

2131 
¨m_ødix4_buâîÊy_övî£_q15
(

2132 
q15_t
 *
pSrc16
,

2133 
uöt32_t
 
f·Lí
,

2134 
q15_t
 *
pC€f16
,

2135 
uöt32_t
 
twidC€fModifõr
);

2146 
¨m_bôªvîßl_q15
(

2147 
q15_t
 * 
pSrc
,

2148 
uöt32_t
 
f·Lí
,

2149 
uöt16_t
 
bôRevFa˘‹
,

2150 
uöt16_t
 *
pBôRevTab
);

2158 
uöt32_t
 
f·LíRól
;

2159 
uöt32_t
 
f·LíBy2
;

2160 
uöt8_t
 
if·FœgR
;

2161 
uöt8_t
 
bôRevî£FœgR
;

2162 
uöt32_t
 
twidC€fRModifõr
;

2163 
q15_t
 *
pTwiddÀARól
;

2164 
q15_t
 *
pTwiddÀBRól
;

2165 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2166 } 
	t¨m_rf·_ö°™˚_q15
;

2174 
uöt32_t
 
f·LíRól
;

2175 
uöt32_t
 
f·LíBy2
;

2176 
uöt8_t
 
if·FœgR
;

2177 
uöt8_t
 
bôRevî£FœgR
;

2178 
uöt32_t
 
twidC€fRModifõr
;

2179 
q31_t
 *
pTwiddÀARól
;

2180 
q31_t
 *
pTwiddÀBRól
;

2181 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2182 } 
	t¨m_rf·_ö°™˚_q31
;

2190 
uöt32_t
 
f·LíRól
;

2191 
uöt16_t
 
f·LíBy2
;

2192 
uöt8_t
 
if·FœgR
;

2193 
uöt8_t
 
bôRevî£FœgR
;

2194 
uöt32_t
 
twidC€fRModifõr
;

2195 
Êﬂt32_t
 *
pTwiddÀARól
;

2196 
Êﬂt32_t
 *
pTwiddÀBRól
;

2197 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2198 } 
	t¨m_rf·_ö°™˚_f32
;

2208 
¨m_rf·_q15
(

2209 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2210 
q15_t
 * 
pSrc
,

2211 
q15_t
 * 
pD°
);

2223 
¨m_°©us
 
¨m_rf·_öô_q15
(

2224 
¨m_rf·_ö°™˚_q15
 * 
S
,

2225 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2226 
uöt32_t
 
f·LíRól
,

2227 
uöt32_t
 
if·FœgR
,

2228 
uöt32_t
 
bôRevî£Fœg
);

2238 
¨m_rf·_q31
(

2239 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2240 
q31_t
 * 
pSrc
,

2241 
q31_t
 * 
pD°
);

2253 
¨m_°©us
 
¨m_rf·_öô_q31
(

2254 
¨m_rf·_ö°™˚_q31
 * 
S
,

2255 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2256 
uöt32_t
 
f·LíRól
,

2257 
uöt32_t
 
if·FœgR
,

2258 
uöt32_t
 
bôRevî£Fœg
);

2270 
¨m_°©us
 
¨m_rf·_öô_f32
(

2271 
¨m_rf·_ö°™˚_f32
 * 
S
,

2272 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2273 
uöt32_t
 
f·LíRól
,

2274 
uöt32_t
 
if·FœgR
,

2275 
uöt32_t
 
bôRevî£Fœg
);

2285 
¨m_rf·_f32
(

2286 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2287 
Êﬂt32_t
 * 
pSrc
,

2288 
Êﬂt32_t
 * 
pD°
);

2296 
uöt16_t
 
N
;

2297 
uöt16_t
 
Nby2
;

2298 
Êﬂt32_t
 
n‹mÆize
;

2299 
Êﬂt32_t
 *
pTwiddÀ
;

2300 
Êﬂt32_t
 *
pCosFa˘‹
;

2301 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2302 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2303 } 
	t¨m_d˘4_ö°™˚_f32
;

2316 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2317 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2318 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2319 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2320 
uöt16_t
 
N
,

2321 
uöt16_t
 
Nby2
,

2322 
Êﬂt32_t
 
n‹mÆize
);

2332 
¨m_d˘4_f32
(

2333 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2334 
Êﬂt32_t
 * 
pSèã
,

2335 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2343 
uöt16_t
 
N
;

2344 
uöt16_t
 
Nby2
;

2345 
q31_t
 
n‹mÆize
;

2346 
q31_t
 *
pTwiddÀ
;

2347 
q31_t
 *
pCosFa˘‹
;

2348 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2349 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2350 } 
	t¨m_d˘4_ö°™˚_q31
;

2363 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2364 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2365 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2366 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2367 
uöt16_t
 
N
,

2368 
uöt16_t
 
Nby2
,

2369 
q31_t
 
n‹mÆize
);

2379 
¨m_d˘4_q31
(

2380 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2381 
q31_t
 * 
pSèã
,

2382 
q31_t
 * 
pI∆öeBuf„r
);

2390 
uöt16_t
 
N
;

2391 
uöt16_t
 
Nby2
;

2392 
q15_t
 
n‹mÆize
;

2393 
q15_t
 *
pTwiddÀ
;

2394 
q15_t
 *
pCosFa˘‹
;

2395 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2396 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2397 } 
	t¨m_d˘4_ö°™˚_q15
;

2410 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2411 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2412 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2413 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2414 
uöt16_t
 
N
,

2415 
uöt16_t
 
Nby2
,

2416 
q15_t
 
n‹mÆize
);

2426 
¨m_d˘4_q15
(

2427 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2428 
q15_t
 * 
pSèã
,

2429 
q15_t
 * 
pI∆öeBuf„r
);

2440 
¨m_add_f32
(

2441 
Êﬂt32_t
 * 
pSrcA
,

2442 
Êﬂt32_t
 * 
pSrcB
,

2443 
Êﬂt32_t
 * 
pD°
,

2444 
uöt32_t
 
blockSize
);

2455 
¨m_add_q7
(

2456 
q7_t
 * 
pSrcA
,

2457 
q7_t
 * 
pSrcB
,

2458 
q7_t
 * 
pD°
,

2459 
uöt32_t
 
blockSize
);

2470 
¨m_add_q15
(

2471 
q15_t
 * 
pSrcA
,

2472 
q15_t
 * 
pSrcB
,

2473 
q15_t
 * 
pD°
,

2474 
uöt32_t
 
blockSize
);

2485 
¨m_add_q31
(

2486 
q31_t
 * 
pSrcA
,

2487 
q31_t
 * 
pSrcB
,

2488 
q31_t
 * 
pD°
,

2489 
uöt32_t
 
blockSize
);

2500 
¨m_sub_f32
(

2501 
Êﬂt32_t
 * 
pSrcA
,

2502 
Êﬂt32_t
 * 
pSrcB
,

2503 
Êﬂt32_t
 * 
pD°
,

2504 
uöt32_t
 
blockSize
);

2515 
¨m_sub_q7
(

2516 
q7_t
 * 
pSrcA
,

2517 
q7_t
 * 
pSrcB
,

2518 
q7_t
 * 
pD°
,

2519 
uöt32_t
 
blockSize
);

2530 
¨m_sub_q15
(

2531 
q15_t
 * 
pSrcA
,

2532 
q15_t
 * 
pSrcB
,

2533 
q15_t
 * 
pD°
,

2534 
uöt32_t
 
blockSize
);

2545 
¨m_sub_q31
(

2546 
q31_t
 * 
pSrcA
,

2547 
q31_t
 * 
pSrcB
,

2548 
q31_t
 * 
pD°
,

2549 
uöt32_t
 
blockSize
);

2560 
¨m_sˇÀ_f32
(

2561 
Êﬂt32_t
 * 
pSrc
,

2562 
Êﬂt32_t
 
sˇÀ
,

2563 
Êﬂt32_t
 * 
pD°
,

2564 
uöt32_t
 
blockSize
);

2576 
¨m_sˇÀ_q7
(

2577 
q7_t
 * 
pSrc
,

2578 
q7_t
 
sˇÀFø˘
,

2579 
öt8_t
 
shi·
,

2580 
q7_t
 * 
pD°
,

2581 
uöt32_t
 
blockSize
);

2593 
¨m_sˇÀ_q15
(

2594 
q15_t
 * 
pSrc
,

2595 
q15_t
 
sˇÀFø˘
,

2596 
öt8_t
 
shi·
,

2597 
q15_t
 * 
pD°
,

2598 
uöt32_t
 
blockSize
);

2610 
¨m_sˇÀ_q31
(

2611 
q31_t
 * 
pSrc
,

2612 
q31_t
 
sˇÀFø˘
,

2613 
öt8_t
 
shi·
,

2614 
q31_t
 * 
pD°
,

2615 
uöt32_t
 
blockSize
);

2625 
¨m_abs_q7
(

2626 
q7_t
 * 
pSrc
,

2627 
q7_t
 * 
pD°
,

2628 
uöt32_t
 
blockSize
);

2638 
¨m_abs_f32
(

2639 
Êﬂt32_t
 * 
pSrc
,

2640 
Êﬂt32_t
 * 
pD°
,

2641 
uöt32_t
 
blockSize
);

2651 
¨m_abs_q15
(

2652 
q15_t
 * 
pSrc
,

2653 
q15_t
 * 
pD°
,

2654 
uöt32_t
 
blockSize
);

2664 
¨m_abs_q31
(

2665 
q31_t
 * 
pSrc
,

2666 
q31_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2678 
¨m_dŸ_¥od_f32
(

2679 
Êﬂt32_t
 * 
pSrcA
,

2680 
Êﬂt32_t
 * 
pSrcB
,

2681 
uöt32_t
 
blockSize
,

2682 
Êﬂt32_t
 * 
ªsu…
);

2693 
¨m_dŸ_¥od_q7
(

2694 
q7_t
 * 
pSrcA
,

2695 
q7_t
 * 
pSrcB
,

2696 
uöt32_t
 
blockSize
,

2697 
q31_t
 * 
ªsu…
);

2708 
¨m_dŸ_¥od_q15
(

2709 
q15_t
 * 
pSrcA
,

2710 
q15_t
 * 
pSrcB
,

2711 
uöt32_t
 
blockSize
,

2712 
q63_t
 * 
ªsu…
);

2723 
¨m_dŸ_¥od_q31
(

2724 
q31_t
 * 
pSrcA
,

2725 
q31_t
 * 
pSrcB
,

2726 
uöt32_t
 
blockSize
,

2727 
q63_t
 * 
ªsu…
);

2738 
¨m_shi·_q7
(

2739 
q7_t
 * 
pSrc
,

2740 
öt8_t
 
shi·Bôs
,

2741 
q7_t
 * 
pD°
,

2742 
uöt32_t
 
blockSize
);

2753 
¨m_shi·_q15
(

2754 
q15_t
 * 
pSrc
,

2755 
öt8_t
 
shi·Bôs
,

2756 
q15_t
 * 
pD°
,

2757 
uöt32_t
 
blockSize
);

2768 
¨m_shi·_q31
(

2769 
q31_t
 * 
pSrc
,

2770 
öt8_t
 
shi·Bôs
,

2771 
q31_t
 * 
pD°
,

2772 
uöt32_t
 
blockSize
);

2783 
¨m_off£t_f32
(

2784 
Êﬂt32_t
 * 
pSrc
,

2785 
Êﬂt32_t
 
off£t
,

2786 
Êﬂt32_t
 * 
pD°
,

2787 
uöt32_t
 
blockSize
);

2798 
¨m_off£t_q7
(

2799 
q7_t
 * 
pSrc
,

2800 
q7_t
 
off£t
,

2801 
q7_t
 * 
pD°
,

2802 
uöt32_t
 
blockSize
);

2813 
¨m_off£t_q15
(

2814 
q15_t
 * 
pSrc
,

2815 
q15_t
 
off£t
,

2816 
q15_t
 * 
pD°
,

2817 
uöt32_t
 
blockSize
);

2828 
¨m_off£t_q31
(

2829 
q31_t
 * 
pSrc
,

2830 
q31_t
 
off£t
,

2831 
q31_t
 * 
pD°
,

2832 
uöt32_t
 
blockSize
);

2842 
¨m_√g©e_f32
(

2843 
Êﬂt32_t
 * 
pSrc
,

2844 
Êﬂt32_t
 * 
pD°
,

2845 
uöt32_t
 
blockSize
);

2855 
¨m_√g©e_q7
(

2856 
q7_t
 * 
pSrc
,

2857 
q7_t
 * 
pD°
,

2858 
uöt32_t
 
blockSize
);

2868 
¨m_√g©e_q15
(

2869 
q15_t
 * 
pSrc
,

2870 
q15_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2881 
¨m_√g©e_q31
(

2882 
q31_t
 * 
pSrc
,

2883 
q31_t
 * 
pD°
,

2884 
uöt32_t
 
blockSize
);

2892 
¨m_c›y_f32
(

2893 
Êﬂt32_t
 * 
pSrc
,

2894 
Êﬂt32_t
 * 
pD°
,

2895 
uöt32_t
 
blockSize
);

2904 
¨m_c›y_q7
(

2905 
q7_t
 * 
pSrc
,

2906 
q7_t
 * 
pD°
,

2907 
uöt32_t
 
blockSize
);

2916 
¨m_c›y_q15
(

2917 
q15_t
 * 
pSrc
,

2918 
q15_t
 * 
pD°
,

2919 
uöt32_t
 
blockSize
);

2928 
¨m_c›y_q31
(

2929 
q31_t
 * 
pSrc
,

2930 
q31_t
 * 
pD°
,

2931 
uöt32_t
 
blockSize
);

2939 
¨m_fûl_f32
(

2940 
Êﬂt32_t
 
vÆue
,

2941 
Êﬂt32_t
 * 
pD°
,

2942 
uöt32_t
 
blockSize
);

2951 
¨m_fûl_q7
(

2952 
q7_t
 
vÆue
,

2953 
q7_t
 * 
pD°
,

2954 
uöt32_t
 
blockSize
);

2963 
¨m_fûl_q15
(

2964 
q15_t
 
vÆue
,

2965 
q15_t
 * 
pD°
,

2966 
uöt32_t
 
blockSize
);

2975 
¨m_fûl_q31
(

2976 
q31_t
 
vÆue
,

2977 
q31_t
 * 
pD°
,

2978 
uöt32_t
 
blockSize
);

2990 
¨m_c⁄v_f32
(

2991 
Êﬂt32_t
 * 
pSrcA
,

2992 
uöt32_t
 
§cALí
,

2993 
Êﬂt32_t
 * 
pSrcB
,

2994 
uöt32_t
 
§cBLí
,

2995 
Êﬂt32_t
 * 
pD°
);

3007 
¨m_c⁄v_q15
(

3008 
q15_t
 * 
pSrcA
,

3009 
uöt32_t
 
§cALí
,

3010 
q15_t
 * 
pSrcB
,

3011 
uöt32_t
 
§cBLí
,

3012 
q15_t
 * 
pD°
);

3024 
¨m_c⁄v_Á°_q15
(

3025 
q15_t
 * 
pSrcA
,

3026 
uöt32_t
 
§cALí
,

3027 
q15_t
 * 
pSrcB
,

3028 
uöt32_t
 
§cBLí
,

3029 
q15_t
 * 
pD°
);

3041 
¨m_c⁄v_q31
(

3042 
q31_t
 * 
pSrcA
,

3043 
uöt32_t
 
§cALí
,

3044 
q31_t
 * 
pSrcB
,

3045 
uöt32_t
 
§cBLí
,

3046 
q31_t
 * 
pD°
);

3058 
¨m_c⁄v_Á°_q31
(

3059 
q31_t
 * 
pSrcA
,

3060 
uöt32_t
 
§cALí
,

3061 
q31_t
 * 
pSrcB
,

3062 
uöt32_t
 
§cBLí
,

3063 
q31_t
 * 
pD°
);

3075 
¨m_c⁄v_q7
(

3076 
q7_t
 * 
pSrcA
,

3077 
uöt32_t
 
§cALí
,

3078 
q7_t
 * 
pSrcB
,

3079 
uöt32_t
 
§cBLí
,

3080 
q7_t
 * 
pD°
);

3094 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3095 
Êﬂt32_t
 * 
pSrcA
,

3096 
uöt32_t
 
§cALí
,

3097 
Êﬂt32_t
 * 
pSrcB
,

3098 
uöt32_t
 
§cBLí
,

3099 
Êﬂt32_t
 * 
pD°
,

3100 
uöt32_t
 
fú°Index
,

3101 
uöt32_t
 
numPoöts
);

3115 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3116 
q15_t
 * 
pSrcA
,

3117 
uöt32_t
 
§cALí
,

3118 
q15_t
 * 
pSrcB
,

3119 
uöt32_t
 
§cBLí
,

3120 
q15_t
 * 
pD°
,

3121 
uöt32_t
 
fú°Index
,

3122 
uöt32_t
 
numPoöts
);

3136 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
uöt32_t
 
fú°Index
,

3143 
uöt32_t
 
numPoöts
);

3157 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
,

3163 
uöt32_t
 
fú°Index
,

3164 
uöt32_t
 
numPoöts
);

3179 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3180 
q31_t
 * 
pSrcA
,

3181 
uöt32_t
 
§cALí
,

3182 
q31_t
 * 
pSrcB
,

3183 
uöt32_t
 
§cBLí
,

3184 
q31_t
 * 
pD°
,

3185 
uöt32_t
 
fú°Index
,

3186 
uöt32_t
 
numPoöts
);

3200 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3201 
q7_t
 * 
pSrcA
,

3202 
uöt32_t
 
§cALí
,

3203 
q7_t
 * 
pSrcB
,

3204 
uöt32_t
 
§cBLí
,

3205 
q7_t
 * 
pD°
,

3206 
uöt32_t
 
fú°Index
,

3207 
uöt32_t
 
numPoöts
);

3216 
uöt8_t
 
M
;

3217 
uöt16_t
 
numT≠s
;

3218 
q15_t
 *
pC€ffs
;

3219 
q15_t
 *
pSèã
;

3220 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3228 
uöt8_t
 
M
;

3229 
uöt16_t
 
numT≠s
;

3230 
q31_t
 *
pC€ffs
;

3231 
q31_t
 *
pSèã
;

3233 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3241 
uöt8_t
 
M
;

3242 
uöt16_t
 
numT≠s
;

3243 
Êﬂt32_t
 *
pC€ffs
;

3244 
Êﬂt32_t
 *
pSèã
;

3246 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3259 
¨m_fú_decim©e_f32
(

3260 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3261 
Êﬂt32_t
 * 
pSrc
,

3262 
Êﬂt32_t
 * 
pD°
,

3263 
uöt32_t
 
blockSize
);

3278 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3279 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3280 
uöt16_t
 
numT≠s
,

3281 
uöt8_t
 
M
,

3282 
Êﬂt32_t
 * 
pC€ffs
,

3283 
Êﬂt32_t
 * 
pSèã
,

3284 
uöt32_t
 
blockSize
);

3295 
¨m_fú_decim©e_q15
(

3296 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3297 
q15_t
 * 
pSrc
,

3298 
q15_t
 * 
pD°
,

3299 
uöt32_t
 
blockSize
);

3310 
¨m_fú_decim©e_Á°_q15
(

3311 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3312 
q15_t
 * 
pSrc
,

3313 
q15_t
 * 
pD°
,

3314 
uöt32_t
 
blockSize
);

3330 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3331 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3332 
uöt16_t
 
numT≠s
,

3333 
uöt8_t
 
M
,

3334 
q15_t
 * 
pC€ffs
,

3335 
q15_t
 * 
pSèã
,

3336 
uöt32_t
 
blockSize
);

3347 
¨m_fú_decim©e_q31
(

3348 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3349 
q31_t
 * 
pSrc
,

3350 
q31_t
 * 
pD°
,

3351 
uöt32_t
 
blockSize
);

3362 
¨m_fú_decim©e_Á°_q31
(

3363 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3364 
q31_t
 * 
pSrc
,

3365 
q31_t
 * 
pD°
,

3366 
uöt32_t
 
blockSize
);

3381 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3382 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3383 
uöt16_t
 
numT≠s
,

3384 
uöt8_t
 
M
,

3385 
q31_t
 * 
pC€ffs
,

3386 
q31_t
 * 
pSèã
,

3387 
uöt32_t
 
blockSize
);

3397 
uöt8_t
 
L
;

3398 
uöt16_t
 
pha£Lígth
;

3399 
q15_t
 *
pC€ffs
;

3400 
q15_t
 *
pSèã
;

3401 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3409 
uöt8_t
 
L
;

3410 
uöt16_t
 
pha£Lígth
;

3411 
q31_t
 *
pC€ffs
;

3412 
q31_t
 *
pSèã
;

3413 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3421 
uöt8_t
 
L
;

3422 
uöt16_t
 
pha£Lígth
;

3423 
Êﬂt32_t
 *
pC€ffs
;

3424 
Êﬂt32_t
 *
pSèã
;

3425 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3437 
¨m_fú_öãΩﬁ©e_q15
(

3438 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3439 
q15_t
 * 
pSrc
,

3440 
q15_t
 * 
pD°
,

3441 
uöt32_t
 
blockSize
);

3456 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3457 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3458 
uöt8_t
 
L
,

3459 
uöt16_t
 
numT≠s
,

3460 
q15_t
 * 
pC€ffs
,

3461 
q15_t
 * 
pSèã
,

3462 
uöt32_t
 
blockSize
);

3473 
¨m_fú_öãΩﬁ©e_q31
(

3474 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3475 
q31_t
 * 
pSrc
,

3476 
q31_t
 * 
pD°
,

3477 
uöt32_t
 
blockSize
);

3491 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3492 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3493 
uöt8_t
 
L
,

3494 
uöt16_t
 
numT≠s
,

3495 
q31_t
 * 
pC€ffs
,

3496 
q31_t
 * 
pSèã
,

3497 
uöt32_t
 
blockSize
);

3509 
¨m_fú_öãΩﬁ©e_f32
(

3510 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3511 
Êﬂt32_t
 * 
pSrc
,

3512 
Êﬂt32_t
 * 
pD°
,

3513 
uöt32_t
 
blockSize
);

3527 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3528 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3529 
uöt8_t
 
L
,

3530 
uöt16_t
 
numT≠s
,

3531 
Êﬂt32_t
 * 
pC€ffs
,

3532 
Êﬂt32_t
 * 
pSèã
,

3533 
uöt32_t
 
blockSize
);

3541 
uöt8_t
 
numSèges
;

3542 
q63_t
 *
pSèã
;

3543 
q31_t
 *
pC€ffs
;

3544 
uöt8_t
 
po°Shi·
;

3546 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3557 
¨m_biquad_ˇs_df1_32x64_q31
(

3558 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3559 
q31_t
 * 
pSrc
,

3560 
q31_t
 * 
pD°
,

3561 
uöt32_t
 
blockSize
);

3573 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3574 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3575 
uöt8_t
 
numSèges
,

3576 
q31_t
 * 
pC€ffs
,

3577 
q63_t
 * 
pSèã
,

3578 
uöt8_t
 
po°Shi·
);

3588 
uöt8_t
 
numSèges
;

3589 
Êﬂt32_t
 *
pSèã
;

3590 
Êﬂt32_t
 *
pC€ffs
;

3591 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3603 
¨m_biquad_ˇsˇde_df2T_f32
(

3604 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3605 
Êﬂt32_t
 * 
pSrc
,

3606 
Êﬂt32_t
 * 
pD°
,

3607 
uöt32_t
 
blockSize
);

3619 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3620 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3621 
uöt8_t
 
numSèges
,

3622 
Êﬂt32_t
 * 
pC€ffs
,

3623 
Êﬂt32_t
 * 
pSèã
);

3633 
uöt16_t
 
numSèges
;

3634 
q15_t
 *
pSèã
;

3635 
q15_t
 *
pC€ffs
;

3636 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3644 
uöt16_t
 
numSèges
;

3645 
q31_t
 *
pSèã
;

3646 
q31_t
 *
pC€ffs
;

3647 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3655 
uöt16_t
 
numSèges
;

3656 
Êﬂt32_t
 *
pSèã
;

3657 
Êﬂt32_t
 *
pC€ffs
;

3658 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3669 
¨m_fú_œâi˚_öô_q15
(

3670 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3671 
uöt16_t
 
numSèges
,

3672 
q15_t
 * 
pC€ffs
,

3673 
q15_t
 * 
pSèã
);

3684 
¨m_fú_œâi˚_q15
(

3685 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3686 
q15_t
 * 
pSrc
,

3687 
q15_t
 * 
pD°
,

3688 
uöt32_t
 
blockSize
);

3699 
¨m_fú_œâi˚_öô_q31
(

3700 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3701 
uöt16_t
 
numSèges
,

3702 
q31_t
 * 
pC€ffs
,

3703 
q31_t
 * 
pSèã
);

3715 
¨m_fú_œâi˚_q31
(

3716 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3717 
q31_t
 * 
pSrc
,

3718 
q31_t
 * 
pD°
,

3719 
uöt32_t
 
blockSize
);

3730 
¨m_fú_œâi˚_öô_f32
(

3731 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3732 
uöt16_t
 
numSèges
,

3733 
Êﬂt32_t
 * 
pC€ffs
,

3734 
Êﬂt32_t
 * 
pSèã
);

3745 
¨m_fú_œâi˚_f32
(

3746 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3747 
Êﬂt32_t
 * 
pSrc
,

3748 
Êﬂt32_t
 * 
pD°
,

3749 
uöt32_t
 
blockSize
);

3756 
uöt16_t
 
numSèges
;

3757 
q15_t
 *
pSèã
;

3758 
q15_t
 *
pkC€ffs
;

3759 
q15_t
 *
pvC€ffs
;

3760 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3767 
uöt16_t
 
numSèges
;

3768 
q31_t
 *
pSèã
;

3769 
q31_t
 *
pkC€ffs
;

3770 
q31_t
 *
pvC€ffs
;

3771 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3778 
uöt16_t
 
numSèges
;

3779 
Êﬂt32_t
 *
pSèã
;

3780 
Êﬂt32_t
 *
pkC€ffs
;

3781 
Êﬂt32_t
 *
pvC€ffs
;

3782 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3793 
¨m_iú_œâi˚_f32
(

3794 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3795 
Êﬂt32_t
 * 
pSrc
,

3796 
Êﬂt32_t
 * 
pD°
,

3797 
uöt32_t
 
blockSize
);

3810 
¨m_iú_œâi˚_öô_f32
(

3811 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3812 
uöt16_t
 
numSèges
,

3813 
Êﬂt32_t
 *
pkC€ffs
,

3814 
Êﬂt32_t
 *
pvC€ffs
,

3815 
Êﬂt32_t
 *
pSèã
,

3816 
uöt32_t
 
blockSize
);

3828 
¨m_iú_œâi˚_q31
(

3829 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3830 
q31_t
 * 
pSrc
,

3831 
q31_t
 * 
pD°
,

3832 
uöt32_t
 
blockSize
);

3846 
¨m_iú_œâi˚_öô_q31
(

3847 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3848 
uöt16_t
 
numSèges
,

3849 
q31_t
 *
pkC€ffs
,

3850 
q31_t
 *
pvC€ffs
,

3851 
q31_t
 *
pSèã
,

3852 
uöt32_t
 
blockSize
);

3864 
¨m_iú_œâi˚_q15
(

3865 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3866 
q15_t
 * 
pSrc
,

3867 
q15_t
 * 
pD°
,

3868 
uöt32_t
 
blockSize
);

3882 
¨m_iú_œâi˚_öô_q15
(

3883 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3884 
uöt16_t
 
numSèges
,

3885 
q15_t
 *
pkC€ffs
,

3886 
q15_t
 *
pvC€ffs
,

3887 
q15_t
 *
pSèã
,

3888 
uöt32_t
 
blockSize
);

3896 
uöt16_t
 
numT≠s
;

3897 
Êﬂt32_t
 *
pSèã
;

3898 
Êﬂt32_t
 *
pC€ffs
;

3899 
Êﬂt32_t
 
mu
;

3900 } 
	t¨m_lms_ö°™˚_f32
;

3913 
¨m_lms_f32
(

3914 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3915 
Êﬂt32_t
 * 
pSrc
,

3916 
Êﬂt32_t
 * 
pRef
,

3917 
Êﬂt32_t
 * 
pOut
,

3918 
Êﬂt32_t
 * 
pEº
,

3919 
uöt32_t
 
blockSize
);

3932 
¨m_lms_öô_f32
(

3933 
¨m_lms_ö°™˚_f32
 * 
S
,

3934 
uöt16_t
 
numT≠s
,

3935 
Êﬂt32_t
 * 
pC€ffs
,

3936 
Êﬂt32_t
 * 
pSèã
,

3937 
Êﬂt32_t
 
mu
,

3938 
uöt32_t
 
blockSize
);

3946 
uöt16_t
 
numT≠s
;

3947 
q15_t
 *
pSèã
;

3948 
q15_t
 *
pC€ffs
;

3949 
q15_t
 
mu
;

3950 
uöt32_t
 
po°Shi·
;

3951 } 
	t¨m_lms_ö°™˚_q15
;

3966 
¨m_lms_öô_q15
(

3967 
¨m_lms_ö°™˚_q15
 * 
S
,

3968 
uöt16_t
 
numT≠s
,

3969 
q15_t
 * 
pC€ffs
,

3970 
q15_t
 * 
pSèã
,

3971 
q15_t
 
mu
,

3972 
uöt32_t
 
blockSize
,

3973 
uöt32_t
 
po°Shi·
);

3986 
¨m_lms_q15
(

3987 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

3988 
q15_t
 * 
pSrc
,

3989 
q15_t
 * 
pRef
,

3990 
q15_t
 * 
pOut
,

3991 
q15_t
 * 
pEº
,

3992 
uöt32_t
 
blockSize
);

4001 
uöt16_t
 
numT≠s
;

4002 
q31_t
 *
pSèã
;

4003 
q31_t
 *
pC€ffs
;

4004 
q31_t
 
mu
;

4005 
uöt32_t
 
po°Shi·
;

4007 } 
	t¨m_lms_ö°™˚_q31
;

4020 
¨m_lms_q31
(

4021 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4022 
q31_t
 * 
pSrc
,

4023 
q31_t
 * 
pRef
,

4024 
q31_t
 * 
pOut
,

4025 
q31_t
 * 
pEº
,

4026 
uöt32_t
 
blockSize
);

4040 
¨m_lms_öô_q31
(

4041 
¨m_lms_ö°™˚_q31
 * 
S
,

4042 
uöt16_t
 
numT≠s
,

4043 
q31_t
 *
pC€ffs
,

4044 
q31_t
 *
pSèã
,

4045 
q31_t
 
mu
,

4046 
uöt32_t
 
blockSize
,

4047 
uöt32_t
 
po°Shi·
);

4055 
uöt16_t
 
numT≠s
;

4056 
Êﬂt32_t
 *
pSèã
;

4057 
Êﬂt32_t
 *
pC€ffs
;

4058 
Êﬂt32_t
 
mu
;

4059 
Êﬂt32_t
 
íîgy
;

4060 
Êﬂt32_t
 
x0
;

4061 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4074 
¨m_lms_n‹m_f32
(

4075 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4076 
Êﬂt32_t
 * 
pSrc
,

4077 
Êﬂt32_t
 * 
pRef
,

4078 
Êﬂt32_t
 * 
pOut
,

4079 
Êﬂt32_t
 * 
pEº
,

4080 
uöt32_t
 
blockSize
);

4093 
¨m_lms_n‹m_öô_f32
(

4094 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4095 
uöt16_t
 
numT≠s
,

4096 
Êﬂt32_t
 * 
pC€ffs
,

4097 
Êﬂt32_t
 * 
pSèã
,

4098 
Êﬂt32_t
 
mu
,

4099 
uöt32_t
 
blockSize
);

4107 
uöt16_t
 
numT≠s
;

4108 
q31_t
 *
pSèã
;

4109 
q31_t
 *
pC€ffs
;

4110 
q31_t
 
mu
;

4111 
uöt8_t
 
po°Shi·
;

4112 
q31_t
 *
ªcùTabÀ
;

4113 
q31_t
 
íîgy
;

4114 
q31_t
 
x0
;

4115 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4128 
¨m_lms_n‹m_q31
(

4129 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4130 
q31_t
 * 
pSrc
,

4131 
q31_t
 * 
pRef
,

4132 
q31_t
 * 
pOut
,

4133 
q31_t
 * 
pEº
,

4134 
uöt32_t
 
blockSize
);

4148 
¨m_lms_n‹m_öô_q31
(

4149 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4150 
uöt16_t
 
numT≠s
,

4151 
q31_t
 * 
pC€ffs
,

4152 
q31_t
 * 
pSèã
,

4153 
q31_t
 
mu
,

4154 
uöt32_t
 
blockSize
,

4155 
uöt8_t
 
po°Shi·
);

4163 
uöt16_t
 
numT≠s
;

4164 
q15_t
 *
pSèã
;

4165 
q15_t
 *
pC€ffs
;

4166 
q15_t
 
mu
;

4167 
uöt8_t
 
po°Shi·
;

4168 
q15_t
 *
ªcùTabÀ
;

4169 
q15_t
 
íîgy
;

4170 
q15_t
 
x0
;

4171 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4184 
¨m_lms_n‹m_q15
(

4185 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4186 
q15_t
 * 
pSrc
,

4187 
q15_t
 * 
pRef
,

4188 
q15_t
 * 
pOut
,

4189 
q15_t
 * 
pEº
,

4190 
uöt32_t
 
blockSize
);

4205 
¨m_lms_n‹m_öô_q15
(

4206 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4207 
uöt16_t
 
numT≠s
,

4208 
q15_t
 * 
pC€ffs
,

4209 
q15_t
 * 
pSèã
,

4210 
q15_t
 
mu
,

4211 
uöt32_t
 
blockSize
,

4212 
uöt8_t
 
po°Shi·
);

4224 
¨m_c‹ªœã_f32
(

4225 
Êﬂt32_t
 * 
pSrcA
,

4226 
uöt32_t
 
§cALí
,

4227 
Êﬂt32_t
 * 
pSrcB
,

4228 
uöt32_t
 
§cBLí
,

4229 
Êﬂt32_t
 * 
pD°
);

4241 
¨m_c‹ªœã_q15
(

4242 
q15_t
 * 
pSrcA
,

4243 
uöt32_t
 
§cALí
,

4244 
q15_t
 * 
pSrcB
,

4245 
uöt32_t
 
§cBLí
,

4246 
q15_t
 * 
pD°
);

4258 
¨m_c‹ªœã_Á°_q15
(

4259 
q15_t
 * 
pSrcA
,

4260 
uöt32_t
 
§cALí
,

4261 
q15_t
 * 
pSrcB
,

4262 
uöt32_t
 
§cBLí
,

4263 
q15_t
 * 
pD°
);

4275 
¨m_c‹ªœã_q31
(

4276 
q31_t
 * 
pSrcA
,

4277 
uöt32_t
 
§cALí
,

4278 
q31_t
 * 
pSrcB
,

4279 
uöt32_t
 
§cBLí
,

4280 
q31_t
 * 
pD°
);

4292 
¨m_c‹ªœã_Á°_q31
(

4293 
q31_t
 * 
pSrcA
,

4294 
uöt32_t
 
§cALí
,

4295 
q31_t
 * 
pSrcB
,

4296 
uöt32_t
 
§cBLí
,

4297 
q31_t
 * 
pD°
);

4309 
¨m_c‹ªœã_q7
(

4310 
q7_t
 * 
pSrcA
,

4311 
uöt32_t
 
§cALí
,

4312 
q7_t
 * 
pSrcB
,

4313 
uöt32_t
 
§cBLí
,

4314 
q7_t
 * 
pD°
);

4321 
uöt16_t
 
numT≠s
;

4322 
uöt16_t
 
°©eIndex
;

4323 
Êﬂt32_t
 *
pSèã
;

4324 
Êﬂt32_t
 *
pC€ffs
;

4325 
uöt16_t
 
maxDñay
;

4326 
öt32_t
 *
pT≠Dñay
;

4327 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4335 
uöt16_t
 
numT≠s
;

4336 
uöt16_t
 
°©eIndex
;

4337 
q31_t
 *
pSèã
;

4338 
q31_t
 *
pC€ffs
;

4339 
uöt16_t
 
maxDñay
;

4340 
öt32_t
 *
pT≠Dñay
;

4341 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4349 
uöt16_t
 
numT≠s
;

4350 
uöt16_t
 
°©eIndex
;

4351 
q15_t
 *
pSèã
;

4352 
q15_t
 *
pC€ffs
;

4353 
uöt16_t
 
maxDñay
;

4354 
öt32_t
 *
pT≠Dñay
;

4355 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4363 
uöt16_t
 
numT≠s
;

4364 
uöt16_t
 
°©eIndex
;

4365 
q7_t
 *
pSèã
;

4366 
q7_t
 *
pC€ffs
;

4367 
uöt16_t
 
maxDñay
;

4368 
öt32_t
 *
pT≠Dñay
;

4369 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4381 
¨m_fú_•¨£_f32
(

4382 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4383 
Êﬂt32_t
 * 
pSrc
,

4384 
Êﬂt32_t
 * 
pD°
,

4385 
Êﬂt32_t
 * 
pS¸©chIn
,

4386 
uöt32_t
 
blockSize
);

4400 
¨m_fú_•¨£_öô_f32
(

4401 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4402 
uöt16_t
 
numT≠s
,

4403 
Êﬂt32_t
 * 
pC€ffs
,

4404 
Êﬂt32_t
 * 
pSèã
,

4405 
öt32_t
 * 
pT≠Dñay
,

4406 
uöt16_t
 
maxDñay
,

4407 
uöt32_t
 
blockSize
);

4419 
¨m_fú_•¨£_q31
(

4420 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4421 
q31_t
 * 
pSrc
,

4422 
q31_t
 * 
pD°
,

4423 
q31_t
 * 
pS¸©chIn
,

4424 
uöt32_t
 
blockSize
);

4438 
¨m_fú_•¨£_öô_q31
(

4439 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4440 
uöt16_t
 
numT≠s
,

4441 
q31_t
 * 
pC€ffs
,

4442 
q31_t
 * 
pSèã
,

4443 
öt32_t
 * 
pT≠Dñay
,

4444 
uöt16_t
 
maxDñay
,

4445 
uöt32_t
 
blockSize
);

4458 
¨m_fú_•¨£_q15
(

4459 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4460 
q15_t
 * 
pSrc
,

4461 
q15_t
 * 
pD°
,

4462 
q15_t
 * 
pS¸©chIn
,

4463 
q31_t
 * 
pS¸©chOut
,

4464 
uöt32_t
 
blockSize
);

4479 
¨m_fú_•¨£_öô_q15
(

4480 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4481 
uöt16_t
 
numT≠s
,

4482 
q15_t
 * 
pC€ffs
,

4483 
q15_t
 * 
pSèã
,

4484 
öt32_t
 * 
pT≠Dñay
,

4485 
uöt16_t
 
maxDñay
,

4486 
uöt32_t
 
blockSize
);

4499 
¨m_fú_•¨£_q7
(

4500 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4501 
q7_t
 * 
pSrc
,

4502 
q7_t
 * 
pD°
,

4503 
q7_t
 * 
pS¸©chIn
,

4504 
q31_t
 * 
pS¸©chOut
,

4505 
uöt32_t
 
blockSize
);

4519 
¨m_fú_•¨£_öô_q7
(

4520 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4521 
uöt16_t
 
numT≠s
,

4522 
q7_t
 * 
pC€ffs
,

4523 
q7_t
 * 
pSèã
,

4524 
öt32_t
 *
pT≠Dñay
,

4525 
uöt16_t
 
maxDñay
,

4526 
uöt32_t
 
blockSize
);

4537 
¨m_sö_cos_f32
(

4538 
Êﬂt32_t
 
thëa
,

4539 
Êﬂt32_t
 *
pSöVÆ
,

4540 
Êﬂt32_t
 *
pCcosVÆ
);

4550 
¨m_sö_cos_q31
(

4551 
q31_t
 
thëa
,

4552 
q31_t
 *
pSöVÆ
,

4553 
q31_t
 *
pCosVÆ
);

4564 
¨m_cm∂x_c⁄j_f32
(

4565 
Êﬂt32_t
 * 
pSrc
,

4566 
Êﬂt32_t
 * 
pD°
,

4567 
uöt32_t
 
numSam∂es
);

4577 
¨m_cm∂x_c⁄j_q31
(

4578 
q31_t
 * 
pSrc
,

4579 
q31_t
 * 
pD°
,

4580 
uöt32_t
 
numSam∂es
);

4590 
¨m_cm∂x_c⁄j_q15
(

4591 
q15_t
 * 
pSrc
,

4592 
q15_t
 * 
pD°
,

4593 
uöt32_t
 
numSam∂es
);

4605 
¨m_cm∂x_mag_squ¨ed_f32
(

4606 
Êﬂt32_t
 * 
pSrc
,

4607 
Êﬂt32_t
 * 
pD°
,

4608 
uöt32_t
 
numSam∂es
);

4618 
¨m_cm∂x_mag_squ¨ed_q31
(

4619 
q31_t
 * 
pSrc
,

4620 
q31_t
 * 
pD°
,

4621 
uöt32_t
 
numSam∂es
);

4631 
¨m_cm∂x_mag_squ¨ed_q15
(

4632 
q15_t
 * 
pSrc
,

4633 
q15_t
 * 
pD°
,

4634 
uöt32_t
 
numSam∂es
);

4711 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4712 
¨m_pid_ö°™˚_f32
 * 
S
,

4713 
Êﬂt32_t
 
ö
)

4715 
Êﬂt32_t
 
out
;

4718 
out
 = (
S
->
A0
 * 
ö
) +

4719 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4722 
S
->
°©e
[1] = S->state[0];

4723 
S
->
°©e
[0] = 
ö
;

4724 
S
->
°©e
[2] = 
out
;

4727  (
out
);

4746 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4747 
¨m_pid_ö°™˚_q31
 * 
S
,

4748 
q31_t
 
ö
)

4750 
q63_t
 
acc
;

4751 
q31_t
 
out
;

4754 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4757 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4760 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4763 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4766 
out
 +
S
->
°©e
[2];

4769 
S
->
°©e
[1] = S->state[0];

4770 
S
->
°©e
[0] = 
ö
;

4771 
S
->
°©e
[2] = 
out
;

4774  (
out
);

4794 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4795 
¨m_pid_ö°™˚_q15
 * 
S
,

4796 
q15_t
 
ö
)

4798 
q63_t
 
acc
;

4799 
q15_t
 
out
;

4803 #ifde‡
ARM_MATH_CM0


4806 
acc
 = ((
q31_t
Ë
S
->
A0
 )* 
ö
 ;

4811 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4815 #ifde‡
ARM_MATH_CM0


4818 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0] ;

4819 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1] ;

4824 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
)
__SIMD32
(S->
°©e
),ácc);

4829 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4832 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4835 
S
->
°©e
[1] = S->state[0];

4836 
S
->
°©e
[0] = 
ö
;

4837 
S
->
°©e
[2] = 
out
;

4840  (
out
);

4857 
¨m_°©us
 
¨m_m©_övî£_f32
(

4858 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4859 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4905 
__INLINE
 
¨m_˛¨ke_f32
(

4906 
Êﬂt32_t
 
Ia
,

4907 
Êﬂt32_t
 
Ib
,

4908 
Êﬂt32_t
 * 
pIÆpha
,

4909 
Êﬂt32_t
 * 
pIbëa
)

4912 *
pIÆpha
 = 
Ia
;

4915 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

4934 
__INLINE
 
¨m_˛¨ke_q31
(

4935 
q31_t
 
Ia
,

4936 
q31_t
 
Ib
,

4937 
q31_t
 * 
pIÆpha
,

4938 
q31_t
 * 
pIbëa
)

4940 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

4943 *
pIÆpha
 = 
Ia
;

4946 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

4949 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

4952 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

4966 
¨m_q7_to_q31
(

4967 
q7_t
 * 
pSrc
,

4968 
q31_t
 * 
pD°
,

4969 
uöt32_t
 
blockSize
);

5009 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5010 
Êﬂt32_t
 
IÆpha
,

5011 
Êﬂt32_t
 
Ibëa
,

5012 
Êﬂt32_t
 * 
pIa
,

5013 
Êﬂt32_t
 * 
pIb
)

5016 *
pIa
 = 
IÆpha
;

5019 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5038 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5039 
q31_t
 
IÆpha
,

5040 
q31_t
 
Ibëa
,

5041 
q31_t
 * 
pIa
,

5042 
q31_t
 * 
pIb
)

5044 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5047 *
pIa
 = 
IÆpha
;

5050 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5053 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5056 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5071 
¨m_q7_to_q15
(

5072 
q7_t
 * 
pSrc
,

5073 
q15_t
 * 
pD°
,

5074 
uöt32_t
 
blockSize
);

5125 
__INLINE
 
¨m_∑rk_f32
(

5126 
Êﬂt32_t
 
IÆpha
,

5127 
Êﬂt32_t
 
Ibëa
,

5128 
Êﬂt32_t
 * 
pId
,

5129 
Êﬂt32_t
 * 
pIq
,

5130 
Êﬂt32_t
 
söVÆ
,

5131 
Êﬂt32_t
 
cosVÆ
)

5134 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5137 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5159 
__INLINE
 
¨m_∑rk_q31
(

5160 
q31_t
 
IÆpha
,

5161 
q31_t
 
Ibëa
,

5162 
q31_t
 * 
pId
,

5163 
q31_t
 * 
pIq
,

5164 
q31_t
 
söVÆ
,

5165 
q31_t
 
cosVÆ
)

5167 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5168 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5171 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5174 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5178 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5181 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5184 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5187 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5201 
¨m_q7_to_Êﬂt
(

5202 
q7_t
 * 
pSrc
,

5203 
Êﬂt32_t
 * 
pD°
,

5204 
uöt32_t
 
blockSize
);

5244 
__INLINE
 
¨m_öv_∑rk_f32
(

5245 
Êﬂt32_t
 
Id
,

5246 
Êﬂt32_t
 
Iq
,

5247 
Êﬂt32_t
 * 
pIÆpha
,

5248 
Êﬂt32_t
 * 
pIbëa
,

5249 
Êﬂt32_t
 
söVÆ
,

5250 
Êﬂt32_t
 
cosVÆ
)

5253 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5256 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5279 
__INLINE
 
¨m_öv_∑rk_q31
(

5280 
q31_t
 
Id
,

5281 
q31_t
 
Iq
,

5282 
q31_t
 * 
pIÆpha
,

5283 
q31_t
 * 
pIbëa
,

5284 
q31_t
 
söVÆ
,

5285 
q31_t
 
cosVÆ
)

5287 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5288 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5291 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5294 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5298 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5301 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5304 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5307 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5323 
¨m_q31_to_Êﬂt
(

5324 
q31_t
 * 
pSrc
,

5325 
Êﬂt32_t
 * 
pD°
,

5326 
uöt32_t
 
blockSize
);

5377 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5378 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5379 
Êﬂt32_t
 
x
)

5382 
Êﬂt32_t
 
y
;

5383 
Êﬂt32_t
 
x0
, 
x1
;

5384 
Êﬂt32_t
 
y0
, 
y1
;

5385 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5386 
öt32_t
 
i
;

5387 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5390 
i
 = (
x
 - 
S
->
x1
Ë/ 
xS∑cög
;

5392 if(
i
 < 0)

5395 
y
 = 
pYD©a
[0];

5397 if(
i
 >
S
->
nVÆues
)

5400 
y
 = 
pYD©a
[
S
->
nVÆues
-1];

5405 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5406 
x1
 = 
S
->x1 + (
i
 +1Ë* 
xS∑cög
;

5409 
y0
 = 
pYD©a
[
i
];

5410 
y1
 = 
pYD©a
[
i
 + 1];

5413 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0)/(
x1
-x0));

5418  (
y
);

5436 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(q31_à*
pYD©a
,

5437 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5439 
q31_t
 
y
;

5440 
q31_t
 
y0
, 
y1
;

5441 
q31_t
 
‰a˘
;

5442 
öt32_t
 
ödex
;

5447 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5449 if(
ödex
 >(
nVÆues
 - 1))

5451 (
pYD©a
[
nVÆues
 - 1]);

5453 if(
ödex
 < 0)

5455 (
pYD©a
[0]);

5462 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5465 
y0
 = 
pYD©a
[
ödex
];

5466 
y1
 = 
pYD©a
[
ödex
 + 1u];

5469 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5472 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5475  (
y
 << 1u);

5496 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(q15_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5498 
q63_t
 
y
;

5499 
q15_t
 
y0
, 
y1
;

5500 
q31_t
 
‰a˘
;

5501 
öt32_t
 
ödex
;

5506 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5508 if(
ödex
 >(
nVÆues
 - 1))

5510 (
pYD©a
[
nVÆues
 - 1]);

5512 if(
ödex
 < 0)

5514 (
pYD©a
[0]);

5520 
‰a˘
 = (
x
 & 0x000FFFFF);

5523 
y0
 = 
pYD©a
[
ödex
];

5524 
y1
 = 
pYD©a
[
ödex
 + 1u];

5527 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5530 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5533  (
y
 >> 20);

5553 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(q7_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5555 
q31_t
 
y
;

5556 
q7_t
 
y0
, 
y1
;

5557 
q31_t
 
‰a˘
;

5558 
öt32_t
 
ödex
;

5563 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5566 if(
ödex
 >(
nVÆues
 - 1))

5568 (
pYD©a
[
nVÆues
 - 1]);

5570 if(
ödex
 < 0)

5572 (
pYD©a
[0]);

5579 
‰a˘
 = (
x
 & 0x000FFFFF);

5582 
y0
 = 
pYD©a
[
ödex
];

5583 
y1
 = 
pYD©a
[
ödex
 + 1u];

5586 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5589 
y
 +(
y1
 * 
‰a˘
);

5592  (
y
 >> 20u);

5607 
Êﬂt32_t
 
¨m_sö_f32
(

5608 
Êﬂt32_t
 
x
);

5616 
q31_t
 
¨m_sö_q31
(

5617 
q31_t
 
x
);

5625 
q15_t
 
¨m_sö_q15
(

5626 
q15_t
 
x
);

5634 
Êﬂt32_t
 
¨m_cos_f32
(

5635 
Êﬂt32_t
 
x
);

5643 
q31_t
 
¨m_cos_q31
(

5644 
q31_t
 
x
);

5652 
q15_t
 
¨m_cos_q15
(

5653 
q15_t
 
x
);

5695 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5696 
Êﬂt32_t
 
ö
, flﬂt32_à*
pOut
)

5698 if(
ö
 > 0)

5702 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5703 *
pOut
 = 
__sqπf
(
ö
);

5705 *
pOut
 = 
sqπf
(
ö
);

5708  (
ARM_MATH_SUCCESS
);

5712 *
pOut
 = 0.0f;

5713  (
ARM_MATH_ARGUMENT_ERROR
);

5726 
¨m_°©us
 
¨m_sqπ_q31
(

5727 
q31_t
 
ö
, q31_à*
pOut
);

5736 
¨m_°©us
 
¨m_sqπ_q15
(

5737 
q15_t
 
ö
, q15_à*
pOut
);

5752 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5753 
öt32_t
 * 
cúcBuf„r
,

5754 
öt32_t
 
L
,

5755 
uöt16_t
 * 
wrôeOff£t
,

5756 
öt32_t
 
buf„rInc
,

5757 c⁄° 
öt32_t
 * 
§c
,

5758 
öt32_t
 
§cInc
,

5759 
uöt32_t
 
blockSize
)

5761 
uöt32_t
 
i
 = 0u;

5762 
öt32_t
 
wOff£t
;

5766 
wOff£t
 = *
wrôeOff£t
;

5769 
i
 = 
blockSize
;

5771 
i
 > 0u)

5774 
cúcBuf„r
[
wOff£t
] = *
§c
;

5777 
§c
 +
§cInc
;

5780 
wOff£t
 +
buf„rInc
;

5781 if(
wOff£t
 >
L
)

5782 
wOff£t
 -
L
;

5785 
i
--;

5789 *
wrôeOff£t
 = 
wOff£t
;

5797 
__INLINE
 
¨m_cúcuœrRód_f32
(

5798 
öt32_t
 * 
cúcBuf„r
,

5799 
öt32_t
 
L
,

5800 
öt32_t
 * 
ªadOff£t
,

5801 
öt32_t
 
buf„rInc
,

5802 
öt32_t
 * 
d°
,

5803 
öt32_t
 * 
d°_ba£
,

5804 
öt32_t
 
d°_Àngth
,

5805 
öt32_t
 
d°Inc
,

5806 
uöt32_t
 
blockSize
)

5808 
uöt32_t
 
i
 = 0u;

5809 
öt32_t
 
rOff£t
, 
d°_íd
;

5813 
rOff£t
 = *
ªadOff£t
;

5814 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5817 
i
 = 
blockSize
;

5819 
i
 > 0u)

5822 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5825 
d°
 +
d°Inc
;

5827 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5829 
d°
 = 
d°_ba£
;

5833 
rOff£t
 +
buf„rInc
;

5835 if(
rOff£t
 >
L
)

5837 
rOff£t
 -
L
;

5841 
i
--;

5845 *
ªadOff£t
 = 
rOff£t
;

5852 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

5853 
q15_t
 * 
cúcBuf„r
,

5854 
öt32_t
 
L
,

5855 
uöt16_t
 * 
wrôeOff£t
,

5856 
öt32_t
 
buf„rInc
,

5857 c⁄° 
q15_t
 * 
§c
,

5858 
öt32_t
 
§cInc
,

5859 
uöt32_t
 
blockSize
)

5861 
uöt32_t
 
i
 = 0u;

5862 
öt32_t
 
wOff£t
;

5866 
wOff£t
 = *
wrôeOff£t
;

5869 
i
 = 
blockSize
;

5871 
i
 > 0u)

5874 
cúcBuf„r
[
wOff£t
] = *
§c
;

5877 
§c
 +
§cInc
;

5880 
wOff£t
 +
buf„rInc
;

5881 if(
wOff£t
 >
L
)

5882 
wOff£t
 -
L
;

5885 
i
--;

5889 *
wrôeOff£t
 = 
wOff£t
;

5897 
__INLINE
 
¨m_cúcuœrRód_q15
(

5898 
q15_t
 * 
cúcBuf„r
,

5899 
öt32_t
 
L
,

5900 
öt32_t
 * 
ªadOff£t
,

5901 
öt32_t
 
buf„rInc
,

5902 
q15_t
 * 
d°
,

5903 
q15_t
 * 
d°_ba£
,

5904 
öt32_t
 
d°_Àngth
,

5905 
öt32_t
 
d°Inc
,

5906 
uöt32_t
 
blockSize
)

5908 
uöt32_t
 
i
 = 0;

5909 
öt32_t
 
rOff£t
, 
d°_íd
;

5913 
rOff£t
 = *
ªadOff£t
;

5915 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5918 
i
 = 
blockSize
;

5920 
i
 > 0u)

5923 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5926 
d°
 +
d°Inc
;

5928 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5930 
d°
 = 
d°_ba£
;

5934 
rOff£t
 +
buf„rInc
;

5936 if(
rOff£t
 >
L
)

5938 
rOff£t
 -
L
;

5942 
i
--;

5946 *
ªadOff£t
 = 
rOff£t
;

5954 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

5955 
q7_t
 * 
cúcBuf„r
,

5956 
öt32_t
 
L
,

5957 
uöt16_t
 * 
wrôeOff£t
,

5958 
öt32_t
 
buf„rInc
,

5959 c⁄° 
q7_t
 * 
§c
,

5960 
öt32_t
 
§cInc
,

5961 
uöt32_t
 
blockSize
)

5963 
uöt32_t
 
i
 = 0u;

5964 
öt32_t
 
wOff£t
;

5968 
wOff£t
 = *
wrôeOff£t
;

5971 
i
 = 
blockSize
;

5973 
i
 > 0u)

5976 
cúcBuf„r
[
wOff£t
] = *
§c
;

5979 
§c
 +
§cInc
;

5982 
wOff£t
 +
buf„rInc
;

5983 if(
wOff£t
 >
L
)

5984 
wOff£t
 -
L
;

5987 
i
--;

5991 *
wrôeOff£t
 = 
wOff£t
;

5999 
__INLINE
 
¨m_cúcuœrRód_q7
(

6000 
q7_t
 * 
cúcBuf„r
,

6001 
öt32_t
 
L
,

6002 
öt32_t
 * 
ªadOff£t
,

6003 
öt32_t
 
buf„rInc
,

6004 
q7_t
 * 
d°
,

6005 
q7_t
 * 
d°_ba£
,

6006 
öt32_t
 
d°_Àngth
,

6007 
öt32_t
 
d°Inc
,

6008 
uöt32_t
 
blockSize
)

6010 
uöt32_t
 
i
 = 0;

6011 
öt32_t
 
rOff£t
, 
d°_íd
;

6015 
rOff£t
 = *
ªadOff£t
;

6017 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6020 
i
 = 
blockSize
;

6022 
i
 > 0u)

6025 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6028 
d°
 +
d°Inc
;

6030 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6032 
d°
 = 
d°_ba£
;

6036 
rOff£t
 +
buf„rInc
;

6038 if(
rOff£t
 >
L
)

6040 
rOff£t
 -
L
;

6044 
i
--;

6048 *
ªadOff£t
 = 
rOff£t
;

6060 
¨m_powî_q31
(

6061 
q31_t
 * 
pSrc
,

6062 
uöt32_t
 
blockSize
,

6063 
q63_t
 * 
pResu…
);

6073 
¨m_powî_f32
(

6074 
Êﬂt32_t
 * 
pSrc
,

6075 
uöt32_t
 
blockSize
,

6076 
Êﬂt32_t
 * 
pResu…
);

6086 
¨m_powî_q15
(

6087 
q15_t
 * 
pSrc
,

6088 
uöt32_t
 
blockSize
,

6089 
q63_t
 * 
pResu…
);

6099 
¨m_powî_q7
(

6100 
q7_t
 * 
pSrc
,

6101 
uöt32_t
 
blockSize
,

6102 
q31_t
 * 
pResu…
);

6112 
¨m_món_q7
(

6113 
q7_t
 * 
pSrc
,

6114 
uöt32_t
 
blockSize
,

6115 
q7_t
 * 
pResu…
);

6124 
¨m_món_q15
(

6125 
q15_t
 * 
pSrc
,

6126 
uöt32_t
 
blockSize
,

6127 
q15_t
 * 
pResu…
);

6136 
¨m_món_q31
(

6137 
q31_t
 * 
pSrc
,

6138 
uöt32_t
 
blockSize
,

6139 
q31_t
 * 
pResu…
);

6148 
¨m_món_f32
(

6149 
Êﬂt32_t
 * 
pSrc
,

6150 
uöt32_t
 
blockSize
,

6151 
Êﬂt32_t
 * 
pResu…
);

6161 
¨m_v¨_f32
(

6162 
Êﬂt32_t
 * 
pSrc
,

6163 
uöt32_t
 
blockSize
,

6164 
Êﬂt32_t
 * 
pResu…
);

6174 
¨m_v¨_q31
(

6175 
q31_t
 * 
pSrc
,

6176 
uöt32_t
 
blockSize
,

6177 
q63_t
 * 
pResu…
);

6187 
¨m_v¨_q15
(

6188 
q15_t
 * 
pSrc
,

6189 
uöt32_t
 
blockSize
,

6190 
q31_t
 * 
pResu…
);

6200 
¨m_rms_f32
(

6201 
Êﬂt32_t
 * 
pSrc
,

6202 
uöt32_t
 
blockSize
,

6203 
Êﬂt32_t
 * 
pResu…
);

6213 
¨m_rms_q31
(

6214 
q31_t
 * 
pSrc
,

6215 
uöt32_t
 
blockSize
,

6216 
q31_t
 * 
pResu…
);

6226 
¨m_rms_q15
(

6227 
q15_t
 * 
pSrc
,

6228 
uöt32_t
 
blockSize
,

6229 
q15_t
 * 
pResu…
);

6239 
¨m_°d_f32
(

6240 
Êﬂt32_t
 * 
pSrc
,

6241 
uöt32_t
 
blockSize
,

6242 
Êﬂt32_t
 * 
pResu…
);

6252 
¨m_°d_q31
(

6253 
q31_t
 * 
pSrc
,

6254 
uöt32_t
 
blockSize
,

6255 
q31_t
 * 
pResu…
);

6265 
¨m_°d_q15
(

6266 
q15_t
 * 
pSrc
,

6267 
uöt32_t
 
blockSize
,

6268 
q15_t
 * 
pResu…
);

6278 
¨m_cm∂x_mag_f32
(

6279 
Êﬂt32_t
 * 
pSrc
,

6280 
Êﬂt32_t
 * 
pD°
,

6281 
uöt32_t
 
numSam∂es
);

6291 
¨m_cm∂x_mag_q31
(

6292 
q31_t
 * 
pSrc
,

6293 
q31_t
 * 
pD°
,

6294 
uöt32_t
 
numSam∂es
);

6304 
¨m_cm∂x_mag_q15
(

6305 
q15_t
 * 
pSrc
,

6306 
q15_t
 * 
pD°
,

6307 
uöt32_t
 
numSam∂es
);

6319 
¨m_cm∂x_dŸ_¥od_q15
(

6320 
q15_t
 * 
pSrcA
,

6321 
q15_t
 * 
pSrcB
,

6322 
uöt32_t
 
numSam∂es
,

6323 
q31_t
 * 
ªÆResu…
,

6324 
q31_t
 * 
imagResu…
);

6336 
¨m_cm∂x_dŸ_¥od_q31
(

6337 
q31_t
 * 
pSrcA
,

6338 
q31_t
 * 
pSrcB
,

6339 
uöt32_t
 
numSam∂es
,

6340 
q63_t
 * 
ªÆResu…
,

6341 
q63_t
 * 
imagResu…
);

6353 
¨m_cm∂x_dŸ_¥od_f32
(

6354 
Êﬂt32_t
 * 
pSrcA
,

6355 
Êﬂt32_t
 * 
pSrcB
,

6356 
uöt32_t
 
numSam∂es
,

6357 
Êﬂt32_t
 * 
ªÆResu…
,

6358 
Êﬂt32_t
 * 
imagResu…
);

6369 
¨m_cm∂x_mu…_ªÆ_q15
(

6370 
q15_t
 * 
pSrcCm∂x
,

6371 
q15_t
 * 
pSrcRól
,

6372 
q15_t
 * 
pCm∂xD°
,

6373 
uöt32_t
 
numSam∂es
);

6384 
¨m_cm∂x_mu…_ªÆ_q31
(

6385 
q31_t
 * 
pSrcCm∂x
,

6386 
q31_t
 * 
pSrcRól
,

6387 
q31_t
 * 
pCm∂xD°
,

6388 
uöt32_t
 
numSam∂es
);

6399 
¨m_cm∂x_mu…_ªÆ_f32
(

6400 
Êﬂt32_t
 * 
pSrcCm∂x
,

6401 
Êﬂt32_t
 * 
pSrcRól
,

6402 
Êﬂt32_t
 * 
pCm∂xD°
,

6403 
uöt32_t
 
numSam∂es
);

6414 
¨m_mö_q7
(

6415 
q7_t
 * 
pSrc
,

6416 
uöt32_t
 
blockSize
,

6417 
q7_t
 * 
ªsu…
,

6418 
uöt32_t
 * 
ödex
);

6429 
¨m_mö_q15
(

6430 
q15_t
 * 
pSrc
,

6431 
uöt32_t
 
blockSize
,

6432 
q15_t
 * 
pResu…
,

6433 
uöt32_t
 * 
pIndex
);

6443 
¨m_mö_q31
(

6444 
q31_t
 * 
pSrc
,

6445 
uöt32_t
 
blockSize
,

6446 
q31_t
 * 
pResu…
,

6447 
uöt32_t
 * 
pIndex
);

6458 
¨m_mö_f32
(

6459 
Êﬂt32_t
 * 
pSrc
,

6460 
uöt32_t
 
blockSize
,

6461 
Êﬂt32_t
 * 
pResu…
,

6462 
uöt32_t
 * 
pIndex
);

6473 
¨m_max_q7
(

6474 
q7_t
 * 
pSrc
,

6475 
uöt32_t
 
blockSize
,

6476 
q7_t
 * 
pResu…
,

6477 
uöt32_t
 * 
pIndex
);

6488 
¨m_max_q15
(

6489 
q15_t
 * 
pSrc
,

6490 
uöt32_t
 
blockSize
,

6491 
q15_t
 * 
pResu…
,

6492 
uöt32_t
 * 
pIndex
);

6503 
¨m_max_q31
(

6504 
q31_t
 * 
pSrc
,

6505 
uöt32_t
 
blockSize
,

6506 
q31_t
 * 
pResu…
,

6507 
uöt32_t
 * 
pIndex
);

6518 
¨m_max_f32
(

6519 
Êﬂt32_t
 * 
pSrc
,

6520 
uöt32_t
 
blockSize
,

6521 
Êﬂt32_t
 * 
pResu…
,

6522 
uöt32_t
 * 
pIndex
);

6533 
¨m_cm∂x_mu…_cm∂x_q15
(

6534 
q15_t
 * 
pSrcA
,

6535 
q15_t
 * 
pSrcB
,

6536 
q15_t
 * 
pD°
,

6537 
uöt32_t
 
numSam∂es
);

6548 
¨m_cm∂x_mu…_cm∂x_q31
(

6549 
q31_t
 * 
pSrcA
,

6550 
q31_t
 * 
pSrcB
,

6551 
q31_t
 * 
pD°
,

6552 
uöt32_t
 
numSam∂es
);

6563 
¨m_cm∂x_mu…_cm∂x_f32
(

6564 
Êﬂt32_t
 * 
pSrcA
,

6565 
Êﬂt32_t
 * 
pSrcB
,

6566 
Êﬂt32_t
 * 
pD°
,

6567 
uöt32_t
 
numSam∂es
);

6576 
¨m_Êﬂt_to_q31
(

6577 
Êﬂt32_t
 * 
pSrc
,

6578 
q31_t
 * 
pD°
,

6579 
uöt32_t
 
blockSize
);

6588 
¨m_Êﬂt_to_q15
(

6589 
Êﬂt32_t
 * 
pSrc
,

6590 
q15_t
 * 
pD°
,

6591 
uöt32_t
 
blockSize
);

6600 
¨m_Êﬂt_to_q7
(

6601 
Êﬂt32_t
 * 
pSrc
,

6602 
q7_t
 * 
pD°
,

6603 
uöt32_t
 
blockSize
);

6613 
¨m_q31_to_q15
(

6614 
q31_t
 * 
pSrc
,

6615 
q15_t
 * 
pD°
,

6616 
uöt32_t
 
blockSize
);

6625 
¨m_q31_to_q7
(

6626 
q31_t
 * 
pSrc
,

6627 
q7_t
 * 
pD°
,

6628 
uöt32_t
 
blockSize
);

6637 
¨m_q15_to_Êﬂt
(

6638 
q15_t
 * 
pSrc
,

6639 
Êﬂt32_t
 * 
pD°
,

6640 
uöt32_t
 
blockSize
);

6650 
¨m_q15_to_q31
(

6651 
q15_t
 * 
pSrc
,

6652 
q31_t
 * 
pD°
,

6653 
uöt32_t
 
blockSize
);

6663 
¨m_q15_to_q7
(

6664 
q15_t
 * 
pSrc
,

6665 
q7_t
 * 
pD°
,

6666 
uöt32_t
 
blockSize
);

6740 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6741 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6742 
Êﬂt32_t
 
X
,

6743 
Êﬂt32_t
 
Y
)

6745 
Êﬂt32_t
 
out
;

6746 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6747 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6748 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6749 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6750 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6752 
xIndex
 = (
öt32_t
Ë
X
;

6753 
yIndex
 = (
öt32_t
Ë
Y
;

6757 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
-1Ë|| 
yIndex
 < 0 || yIndex > ( S->
numCﬁs
-1))

6763 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
-1Ë* 
S
->
numCﬁs
 ;

6767 
f00
 = 
pD©a
[
ödex
];

6768 
f01
 = 
pD©a
[
ödex
 + 1];

6771 
ödex
 = (
xIndex
-1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6775 
f10
 = 
pD©a
[
ödex
];

6776 
f11
 = 
pD©a
[
ödex
 + 1];

6779 
b1
 = 
f00
;

6780 
b2
 = 
f01
 - 
f00
;

6781 
b3
 = 
f10
 - 
f00
;

6782 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6785 
xdiff
 = 
X
 - 
xIndex
;

6788 
ydiff
 = 
Y
 - 
yIndex
;

6791 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6794  (
out
);

6807 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6808 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6809 
q31_t
 
X
,

6810 
q31_t
 
Y
)

6812 
q31_t
 
out
;

6813 
q31_t
 
acc
 = 0;

6814 
q31_t
 
x‰a˘
, 
y‰a˘
;

6815 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6816 
öt32_t
 
rI
, 
cI
;

6817 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6818 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6824 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

6829 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

6833 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6840 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6843 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6844 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6848 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6851 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6852 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6855 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6856 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6859 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6860 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6863 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6864 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6867 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6868 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6871  (
acc
 << 2u);

6883 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6884 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6885 
q31_t
 
X
,

6886 
q31_t
 
Y
)

6888 
q63_t
 
acc
 = 0;

6889 
q31_t
 
out
;

6890 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6891 
q31_t
 
x‰a˘
, 
y‰a˘
;

6892 
öt32_t
 
rI
, 
cI
;

6893 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6894 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6899 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6904 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6908 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6915 
x‰a˘
 = (
X
 & 0x000FFFFF);

6918 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6919 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6924 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6927 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6928 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6934 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6935 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6938 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6939 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6942 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6943 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6946 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6947 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6951  (
acc
 >> 36);

6963 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6964 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6965 
q31_t
 
X
,

6966 
q31_t
 
Y
)

6968 
q63_t
 
acc
 = 0;

6969 
q31_t
 
out
;

6970 
q31_t
 
x‰a˘
, 
y‰a˘
;

6971 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6972 
öt32_t
 
rI
, 
cI
;

6973 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6974 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6979 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6984 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6988 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6995 
x‰a˘
 = (
X
 & 0x000FFFFF);

6998 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6999 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7004 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7007 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7008 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7011 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7012 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7015 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7016 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7019 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7020 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7023 
out
 = ((
y2
 * (
y‰a˘
)));

7024 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7027  (
acc
 >> 40);

7040 #ifdef 
__˝lu•lus


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cm4.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

76 
	#__CM4_CMSIS_VERSION_MAIN
 (0x02Ë

	)

77 
	#__CM4_CMSIS_VERSION_SUB
 (0x10Ë

	)

78 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM4_CMSIS_VERSION_SUB
Ë

	)

80 
	#__CORTEX_M
 (0x04Ë

	)

83 #i‡ 
deföed
 ( 
__CC_ARM
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
__ölöe


	)

87 #ñi‡
deföed
 ( 
__ICCARM__
 )

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
ölöe


	)

91 #ñi‡
deföed
 ( 
__GNUC__
 )

92 
	#__ASM
 
__asm


	)

93 
	#__INLINE
 
ölöe


	)

95 #ñi‡
deföed
 ( 
__TASKING__
 )

96 
	#__ASM
 
__asm


	)

97 
	#__INLINE
 
ölöe


	)

102 #i‡
deföed
 ( 
__CC_ARM
 )

103 #i‡
deföed
 
__TARGET_FPU_VFP


104 #i‡(
__FPU_PRESENT
 == 1)

105 
	#__FPU_USED
 1

	)

108 
	#__FPU_USED
 0

	)

111 
	#__FPU_USED
 0

	)

114 #ñi‡
deföed
 ( 
__ICCARM__
 )

115 #i‡
deföed
 
__ARMVFP__


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__TASKING__
 )

140 
	#__FPU_USED
 0

	)

143 
	~<°döt.h
>

144 
	~<c‹e_cmIn°r.h
>

145 
	~<c‹e_cmFunc.h
>

146 
	~<c‹e_cm4_simd.h
>

150 #i‚de‡
__CMSIS_GENERIC


152 #i‚de‡
__CORE_CM4_H_DEPENDANT


153 
	#__CORE_CM4_H_DEPENDANT


	)

156 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


157 #i‚de‡
__CM4_REV


158 
	#__CM4_REV
 0x0000

	)

162 #i‚de‡
__FPU_PRESENT


163 
	#__FPU_PRESENT
 0

	)

167 #i‚de‡
__MPU_PRESENT


168 
	#__MPU_PRESENT
 0

	)

172 #i‚de‡
__NVIC_PRIO_BITS


173 
	#__NVIC_PRIO_BITS
 4

	)

177 #i‚de‡
__Víd‹_SysTickC⁄fig


178 
	#__Víd‹_SysTickC⁄fig
 0

	)

184 #ifde‡
__˝lu•lus


185 
	#__I
 vﬁ©ûê

	)

187 
	#__I
 vﬁ©ûêc⁄°

	)

189 
	#__O
 vﬁ©ûê

	)

190 
	#__IO
 vﬁ©ûê

	)

222 #i‡(
__CORTEX_M
 != 0x04)

223 
uöt32_t
 
_ª£rved0
:27;

225 
uöt32_t
 
_ª£rved0
:16;

226 
uöt32_t
 
GE
:4;

227 
uöt32_t
 
_ª£rved1
:7;

229 
uöt32_t
 
Q
:1;

230 
uöt32_t
 
V
:1;

231 
uöt32_t
 
C
:1;

232 
uöt32_t
 
Z
:1;

233 
uöt32_t
 
N
:1;

234 } 
b
;

235 
uöt32_t
 
w
;

236 } 
	tAPSR_Ty≥
;

245 
uöt32_t
 
ISR
:9;

246 
uöt32_t
 
_ª£rved0
:23;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tIPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 #i‡(
__CORTEX_M
 != 0x04)

260 
uöt32_t
 
_ª£rved0
:15;

262 
uöt32_t
 
_ª£rved0
:7;

263 
uöt32_t
 
GE
:4;

264 
uöt32_t
 
_ª£rved1
:4;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
IT
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

284 
uöt32_t
 
nPRIV
:1;

285 
uöt32_t
 
SPSEL
:1;

286 
uöt32_t
 
FPCA
:1;

287 
uöt32_t
 
_ª£rved0
:29;

288 } 
b
;

289 
uöt32_t
 
w
;

290 } 
	tCONTROL_Ty≥
;

305 
__IO
 
uöt32_t
 
ISER
[8];

306 
uöt32_t
 
RESERVED0
[24];

307 
__IO
 
uöt32_t
 
ICER
[8];

308 
uöt32_t
 
RSERVED1
[24];

309 
__IO
 
uöt32_t
 
ISPR
[8];

310 
uöt32_t
 
RESERVED2
[24];

311 
__IO
 
uöt32_t
 
ICPR
[8];

312 
uöt32_t
 
RESERVED3
[24];

313 
__IO
 
uöt32_t
 
IABR
[8];

314 
uöt32_t
 
RESERVED4
[56];

315 
__IO
 
uöt8_t
 
IP
[240];

316 
uöt32_t
 
RESERVED5
[644];

317 
__O
 
uöt32_t
 
STIR
;

318 } 
	tNVIC_Ty≥
;

321 
	#NVIC_STIR_INTID_Pos
 0

	)

322 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

337 
__I
 
uöt32_t
 
CPUID
;

338 
__IO
 
uöt32_t
 
ICSR
;

339 
__IO
 
uöt32_t
 
VTOR
;

340 
__IO
 
uöt32_t
 
AIRCR
;

341 
__IO
 
uöt32_t
 
SCR
;

342 
__IO
 
uöt32_t
 
CCR
;

343 
__IO
 
uöt8_t
 
SHP
[12];

344 
__IO
 
uöt32_t
 
SHCSR
;

345 
__IO
 
uöt32_t
 
CFSR
;

346 
__IO
 
uöt32_t
 
HFSR
;

347 
__IO
 
uöt32_t
 
DFSR
;

348 
__IO
 
uöt32_t
 
MMFAR
;

349 
__IO
 
uöt32_t
 
BFAR
;

350 
__IO
 
uöt32_t
 
AFSR
;

351 
__I
 
uöt32_t
 
PFR
[2];

352 
__I
 
uöt32_t
 
DFR
;

353 
__I
 
uöt32_t
 
ADR
;

354 
__I
 
uöt32_t
 
MMFR
[4];

355 
__I
 
uöt32_t
 
ISAR
[5];

356 
uöt32_t
 
RESERVED0
[5];

357 
__IO
 
uöt32_t
 
CPACR
;

358 } 
	tSCB_Ty≥
;

361 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

362 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

364 
	#SCB_CPUID_VARIANT_Pos
 20

	)

365 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

367 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

368 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

370 
	#SCB_CPUID_PARTNO_Pos
 4

	)

371 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

373 
	#SCB_CPUID_REVISION_Pos
 0

	)

374 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

377 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

378 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

381 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

384 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

386 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

387 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

389 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

390 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

392 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

393 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

395 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

396 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

398 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

399 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

401 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

402 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

404 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

405 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

408 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

412 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

413 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

418 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

419 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

421 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

422 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

424 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

425 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

427 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

428 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

430 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

431 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

434 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

435 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

437 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

438 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

440 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

441 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

444 
	#SCB_CCR_STKALIGN_Pos
 9

	)

445 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

447 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

448 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

450 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

451 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

453 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

454 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

457 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

459 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

460 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

463 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

464 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

466 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

467 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

469 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

470 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

472 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

473 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

475 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

476 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

478 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

479 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

481 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

482 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

484 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

485 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

487 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

488 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

490 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

491 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

494 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

497 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

500 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

503 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

506 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

507 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

509 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

510 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

512 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

513 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

516 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

517 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

519 
	#SCB_HFSR_FORCED_Pos
 30

	)

520 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

522 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

523 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

526 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

527 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

529 
	#SCB_DFSR_VCATCH_Pos
 3

	)

530 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

532 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

533 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

535 
	#SCB_DFSR_BKPT_Pos
 1

	)

536 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

538 
	#SCB_DFSR_HALTED_Pos
 0

	)

539 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

554 
uöt32_t
 
RESERVED0
[1];

555 
__I
 
uöt32_t
 
ICTR
;

556 
__IO
 
uöt32_t
 
ACTLR
;

557 } 
	tSCnSCB_Ty≥
;

560 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

561 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

564 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

565 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

567 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

568 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

570 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

571 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

573 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

574 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

576 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

577 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
CTRL
;

593 
__IO
 
uöt32_t
 
LOAD
;

594 
__IO
 
uöt32_t
 
VAL
;

595 
__I
 
uöt32_t
 
CALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
u8
;

645 
__O
 
uöt16_t
 
u16
;

646 
__O
 
uöt32_t
 
u32
;

647 } 
PORT
 [32];

648 
uöt32_t
 
RESERVED0
[864];

649 
__IO
 
uöt32_t
 
TER
;

650 
uöt32_t
 
RESERVED1
[15];

651 
__IO
 
uöt32_t
 
TPR
;

652 
uöt32_t
 
RESERVED2
[15];

653 
__IO
 
uöt32_t
 
TCR
;

654 } 
	tITM_Ty≥
;

657 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

658 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

661 
	#ITM_TCR_BUSY_Pos
 23

	)

662 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

664 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

665 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

667 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

668 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

670 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

671 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

673 
	#ITM_TCR_SWOENA_Pos
 4

	)

674 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

676 
	#ITM_TCR_TXENA_Pos
 3

	)

677 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

679 
	#ITM_TCR_SYNCENA_Pos
 2

	)

680 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

682 
	#ITM_TCR_TSENA_Pos
 1

	)

683 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

685 
	#ITM_TCR_ITMENA_Pos
 0

	)

686 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

691 #i‡(
__MPU_PRESENT
 == 1)

702 
__I
 
uöt32_t
 
TYPE
;

703 
__IO
 
uöt32_t
 
CTRL
;

704 
__IO
 
uöt32_t
 
RNR
;

705 
__IO
 
uöt32_t
 
RBAR
;

706 
__IO
 
uöt32_t
 
RASR
;

707 
__IO
 
uöt32_t
 
RBAR_A1
;

708 
__IO
 
uöt32_t
 
RASR_A1
;

709 
__IO
 
uöt32_t
 
RBAR_A2
;

710 
__IO
 
uöt32_t
 
RASR_A2
;

711 
__IO
 
uöt32_t
 
RBAR_A3
;

712 
__IO
 
uöt32_t
 
RASR_A3
;

713 } 
	tMPU_Ty≥
;

716 
	#MPU_TYPE_IREGION_Pos
 16

	)

717 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

719 
	#MPU_TYPE_DREGION_Pos
 8

	)

720 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

722 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

723 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

726 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

727 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

729 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

730 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

732 
	#MPU_CTRL_ENABLE_Pos
 0

	)

733 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

736 
	#MPU_RNR_REGION_Pos
 0

	)

737 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

740 
	#MPU_RBAR_ADDR_Pos
 5

	)

741 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

743 
	#MPU_RBAR_VALID_Pos
 4

	)

744 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

746 
	#MPU_RBAR_REGION_Pos
 0

	)

747 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

750 
	#MPU_RASR_ATTRS_Pos
 16

	)

751 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

753 
	#MPU_RASR_SRD_Pos
 8

	)

754 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

756 
	#MPU_RASR_SIZE_Pos
 1

	)

757 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

759 
	#MPU_RASR_ENABLE_Pos
 0

	)

760 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

766 #i‡(
__FPU_PRESENT
 == 1)

777 
uöt32_t
 
RESERVED0
[1];

778 
__IO
 
uöt32_t
 
FPCCR
;

779 
__IO
 
uöt32_t
 
FPCAR
;

780 
__IO
 
uöt32_t
 
FPDSCR
;

781 
__I
 
uöt32_t
 
MVFR0
;

782 
__I
 
uöt32_t
 
MVFR1
;

783 } 
	tFPU_Ty≥
;

786 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

787 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

789 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

790 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

792 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

793 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

795 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

796 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

798 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

799 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

801 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

802 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

804 
	#FPU_FPCCR_THREAD_Pos
 3

	)

805 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

807 
	#FPU_FPCCR_USER_Pos
 1

	)

808 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

810 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

811 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

814 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

815 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

818 
	#FPU_FPDSCR_AHP_Pos
 26

	)

819 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

821 
	#FPU_FPDSCR_DN_Pos
 25

	)

822 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

824 
	#FPU_FPDSCR_FZ_Pos
 24

	)

825 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

827 
	#FPU_FPDSCR_RMode_Pos
 22

	)

828 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

831 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

832 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

834 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

835 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

837 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

838 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

840 
	#FPU_MVFR0_Divide_Pos
 16

	)

841 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

843 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

844 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

846 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

847 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

849 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

850 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

852 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

853 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

856 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

857 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

859 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

860 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

862 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

863 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

865 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

866 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

882 
__IO
 
uöt32_t
 
DHCSR
;

883 
__O
 
uöt32_t
 
DCRSR
;

884 
__IO
 
uöt32_t
 
DCRDR
;

885 
__IO
 
uöt32_t
 
DEMCR
;

886 } 
	tC‹eDebug_Ty≥
;

889 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

890 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

892 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

893 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

895 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

896 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

898 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

899 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

901 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

902 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

904 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

905 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

907 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

908 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

910 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

911 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

913 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

914 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

916 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

917 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

919 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

920 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

922 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

923 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

926 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

927 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

929 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

930 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

933 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

934 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

936 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

937 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

939 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

940 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

942 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

943 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

945 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

946 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

948 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

949 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

951 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

952 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

954 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

955 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

957 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

958 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

960 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

961 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

963 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

964 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

966 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

967 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

969 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

970 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

980 
	#SCS_BASE
 (0xE000E000ULË

	)

981 
	#ITM_BASE
 (0xE0000000ULË

	)

982 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

983 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

984 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

985 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

987 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

988 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

989 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

990 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

991 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

992 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

994 #i‡(
__MPU_PRESENT
 == 1)

995 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

996 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

999 #i‡(
__FPU_PRESENT
 == 1)

1000 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1001 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1037 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1039 
uöt32_t
 
ªg_vÆue
;

1040 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1042 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1043 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1044 
ªg_vÆue
 = (reg_value |

1045 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1046 (
Pri‹ôyGroupTmp
 << 8));

1047 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1058 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1060  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1071 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1074 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1085 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1087 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1100 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1102 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1113 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1115 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1126 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1128 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1139 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1141 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1156 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1158 if(
IRQn
 < 0) {

1159 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1161 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1177 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1180 if(
IRQn
 < 0) {

1181 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1183 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1201 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1203 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1204 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1205 
uöt32_t
 
SubPri‹ôyBôs
;

1207 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1208 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1211 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1212 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1231 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1233 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1234 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1235 
uöt32_t
 
SubPri‹ôyBôs
;

1237 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1238 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1240 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1241 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1249 
__INLINE
 
NVIC_Sy°emRe£t
()

1251 
__DSB
();

1253 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1254 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1255 
SCB_AIRCR_SYSRESETREQ_Msk
);

1256 
__DSB
();

1270 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1281 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1283 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1285 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1286 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1287 
SysTick
->
VAL
 = 0;

1288 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1289 
SysTick_CTRL_TICKINT_Msk
 |

1290 
SysTick_CTRL_ENABLE_Msk
;

1306 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1307 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1319 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1321 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1322 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1323 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1325 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1326 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1328  (
	gch
);

1341 
__INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1342 
öt32_t
 
	gch
 = -1;

1344 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1345 
ch
 = 
ITM_RxBuf„r
;

1346 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1349  (
	gch
);

1361 
__INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1363 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1376 #ifde‡
__˝lu•lus


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cm4_simd.h

24 #ifde‡
__˝lu•lus


28 #i‚de‡
__CORE_CM4_SIMD_H


29 
	#__CORE_CM4_SIMD_H


	)

43 #i‡ 
deföed
 ( 
__CC_ARM
 )

47 
	#__SADD8
 
__ßdd8


	)

48 
	#__QADD8
 
__qadd8


	)

49 
	#__SHADD8
 
__shadd8


	)

50 
	#__UADD8
 
__uadd8


	)

51 
	#__UQADD8
 
__uqadd8


	)

52 
	#__UHADD8
 
__uhadd8


	)

53 
	#__SSUB8
 
__ssub8


	)

54 
	#__QSUB8
 
__qsub8


	)

55 
	#__SHSUB8
 
__shsub8


	)

56 
	#__USUB8
 
__usub8


	)

57 
	#__UQSUB8
 
__uqsub8


	)

58 
	#__UHSUB8
 
__uhsub8


	)

59 
	#__SADD16
 
__ßdd16


	)

60 
	#__QADD16
 
__qadd16


	)

61 
	#__SHADD16
 
__shadd16


	)

62 
	#__UADD16
 
__uadd16


	)

63 
	#__UQADD16
 
__uqadd16


	)

64 
	#__UHADD16
 
__uhadd16


	)

65 
	#__SSUB16
 
__ssub16


	)

66 
	#__QSUB16
 
__qsub16


	)

67 
	#__SHSUB16
 
__shsub16


	)

68 
	#__USUB16
 
__usub16


	)

69 
	#__UQSUB16
 
__uqsub16


	)

70 
	#__UHSUB16
 
__uhsub16


	)

71 
	#__SASX
 
__ßsx


	)

72 
	#__QASX
 
__qasx


	)

73 
	#__SHASX
 
__shasx


	)

74 
	#__UASX
 
__uasx


	)

75 
	#__UQASX
 
__uqasx


	)

76 
	#__UHASX
 
__uhasx


	)

77 
	#__SSAX
 
__sßx


	)

78 
	#__QSAX
 
__qßx


	)

79 
	#__SHSAX
 
__shßx


	)

80 
	#__USAX
 
__ußx


	)

81 
	#__UQSAX
 
__uqßx


	)

82 
	#__UHSAX
 
__uhßx


	)

83 
	#__USAD8
 
__ußd8


	)

84 
	#__USADA8
 
__ußda8


	)

85 
	#__SSAT16
 
__sßt16


	)

86 
	#__USAT16
 
__ußt16


	)

87 
	#__UXTB16
 
__uxtb16


	)

88 
	#__UXTAB16
 
__uxèb16


	)

89 
	#__SXTB16
 
__sxtb16


	)

90 
	#__SXTAB16
 
__sxèb16


	)

91 
	#__SMUAD
 
__smuad


	)

92 
	#__SMUADX
 
__smuadx


	)

93 
	#__SMLAD
 
__smœd


	)

94 
	#__SMLADX
 
__smœdx


	)

95 
	#__SMLALD
 
__smœld


	)

96 
	#__SMLALDX
 
__smœldx


	)

97 
	#__SMUSD
 
__smusd


	)

98 
	#__SMUSDX
 
__smusdx


	)

99 
	#__SMLSD
 
__smlsd


	)

100 
	#__SMLSDX
 
__smlsdx


	)

101 
	#__SMLSLD
 
__sml¶d


	)

102 
	#__SMLSLDX
 
__sml¶dx


	)

103 
	#__SEL
 
__£l


	)

104 
	#__QADD
 
__qadd


	)

105 
	#__QSUB
 
__qsub


	)

107 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

108 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

110 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

111 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

118 #ñi‡
deföed
 ( 
__ICCARM__
 )

121 
	~<cmsis_ür.h
>

190 #ñi‡
deföed
 ( 
__GNUC__
 )

194 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

196 
uöt32_t
 
ªsu…
;

198 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

199 (
ªsu…
);

200 
	}
}

202 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

204 
uöt32_t
 
ªsu…
;

206 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

207 (
ªsu…
);

208 
	}
}

210 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

215 (
ªsu…
);

216 
	}
}

218 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

220 
uöt32_t
 
ªsu…
;

222 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

223 (
ªsu…
);

224 
	}
}

226 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

228 
uöt32_t
 
ªsu…
;

230 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

231 (
ªsu…
);

232 
	}
}

234 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

236 
uöt32_t
 
ªsu…
;

238 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

239 (
ªsu…
);

240 
	}
}

243 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

245 
uöt32_t
 
ªsu…
;

247 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

248 (
ªsu…
);

249 
	}
}

251 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

253 
uöt32_t
 
ªsu…
;

255 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

256 (
ªsu…
);

257 
	}
}

259 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

261 
uöt32_t
 
ªsu…
;

263 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

264 (
ªsu…
);

265 
	}
}

267 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

269 
uöt32_t
 
ªsu…
;

271 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

272 (
ªsu…
);

273 
	}
}

275 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

277 
uöt32_t
 
ªsu…
;

279 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

280 (
ªsu…
);

281 
	}
}

283 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

285 
uöt32_t
 
ªsu…
;

287 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

288 (
ªsu…
);

289 
	}
}

292 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

297 (
ªsu…
);

298 
	}
}

300 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

302 
uöt32_t
 
ªsu…
;

304 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

305 (
ªsu…
);

306 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

310 
uöt32_t
 
ªsu…
;

312 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

313 (
ªsu…
);

314 
	}
}

316 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

321 (
ªsu…
);

322 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

326 
uöt32_t
 
ªsu…
;

328 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

329 (
ªsu…
);

330 
	}
}

332 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

334 
uöt32_t
 
ªsu…
;

336 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

337 (
ªsu…
);

338 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

345 (
ªsu…
);

346 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

353 (
ªsu…
);

354 
	}
}

356 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

361 (
ªsu…
);

362 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

369 (
ªsu…
);

370 
	}
}

372 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

374 
uöt32_t
 
ªsu…
;

376 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

377 (
ªsu…
);

378 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

385 (
ªsu…
);

386 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

393 (
ªsu…
);

394 
	}
}

396 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

398 
uöt32_t
 
ªsu…
;

400 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

401 (
ªsu…
);

402 
	}
}

404 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

406 
uöt32_t
 
ªsu…
;

408 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

409 (
ªsu…
);

410 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

417 (
ªsu…
);

418 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

422 
uöt32_t
 
ªsu…
;

424 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

425 (
ªsu…
);

426 
	}
}

428 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

430 
uöt32_t
 
ªsu…
;

432 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

433 (
ªsu…
);

434 
	}
}

436 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

438 
uöt32_t
 
ªsu…
;

440 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

441 (
ªsu…
);

442 
	}
}

444 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

446 
uöt32_t
 
ªsu…
;

448 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

449 (
ªsu…
);

450 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

454 
uöt32_t
 
ªsu…
;

456 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

457 (
ªsu…
);

458 
	}
}

460 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

462 
uöt32_t
 
ªsu…
;

464 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

465 (
ªsu…
);

466 
	}
}

468 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

470 
uöt32_t
 
ªsu…
;

472 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

473 (
ªsu…
);

474 
	}
}

476 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

481 (
ªsu…
);

482 
	}
}

484 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

486 
uöt32_t
 
ªsu…
;

488 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

489 (
ªsu…
);

490 
	}
}

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

494 
uöt32_t
 
ªsu…
;

496 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

497 (
ªsu…
);

498 
	}
}

500 
	#__SSAT16
(
ARG1
,
ARG2
) \

502 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

503 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

504 
__RES
; \

505 })

	)

507 
	#__USAT16
(
ARG1
,
ARG2
) \

509 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

510 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

511 
__RES
; \

512 })

	)

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

516 
uöt32_t
 
ªsu…
;

518 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

519 (
ªsu…
);

520 
	}
}

522 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

524 
uöt32_t
 
ªsu…
;

526 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

527 (
ªsu…
);

528 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

532 
uöt32_t
 
ªsu…
;

534 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

535 (
ªsu…
);

536 
	}
}

538 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

540 
uöt32_t
 
ªsu…
;

542 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

543 (
ªsu…
);

544 
	}
}

546 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

548 
uöt32_t
 
ªsu…
;

550 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

551 (
ªsu…
);

552 
	}
}

554 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

556 
uöt32_t
 
ªsu…
;

558 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

559 (
ªsu…
);

560 
	}
}

562 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

564 
uöt32_t
 
ªsu…
;

566 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

567 (
ªsu…
);

568 
	}
}

570 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

572 
uöt32_t
 
ªsu…
;

574 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

575 (
ªsu…
);

576 
	}
}

578 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
) \

580 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

581 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

582 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

583 })

	)

585 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
) \

587 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

588 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

589 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

590 })

	)

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

594 
uöt32_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

597 (
ªsu…
);

598 
	}
}

600 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

602 
uöt32_t
 
ªsu…
;

604 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

605 (
ªsu…
);

606 
	}
}

608 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

610 
uöt32_t
 
ªsu…
;

612 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

613 (
ªsu…
);

614 
	}
}

616 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

618 
uöt32_t
 
ªsu…
;

620 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

621 (
ªsu…
);

622 
	}
}

624 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
) \

626 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

627 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

628 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

629 })

	)

631 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
) \

633 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

634 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

635 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

636 })

	)

638 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

640 
uöt32_t
 
ªsu…
;

642 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

643 (
ªsu…
);

644 
	}
}

646 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

648 
uöt32_t
 
ªsu…
;

650 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

651 (
ªsu…
);

652 
	}
}

654 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

656 
uöt32_t
 
ªsu…
;

658 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

659 (
ªsu…
);

660 
	}
}

662 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

664 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

665 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

666 
__RES
; \

667 })

	)

669 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

671 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

672 i‡(
ARG3
 == 0) \

673 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

675 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

676 
__RES
; \

677 })

	)

683 #ñi‡
deföed
 ( 
__TASKING__
 )

699 #ifde‡
__˝lu•lus


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

300 #ñi‡
deföed
 ( 
__GNUC__
 )

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_úq
()

310 
__ASM
 volatile ("cpsie i");

311 
	}
}

319 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_úq
()

321 
__ASM
 volatile ("cpsid i");

322 
	}
}

331 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

333 
uöt32_t
 
ªsu…
;

335 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

336 (
ªsu…
);

337 
	}
}

346 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

348 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

349 
	}
}

358 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

360 
uöt32_t
 
ªsu…
;

362 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

363 (
ªsu…
);

364 
	}
}

373 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

405 
uöt32_t
 
ªsu…
;

407 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

408 (
ªsu…
);

409 
	}
}

418 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

420 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

421 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

432 
uöt32_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

435 (
ªsu…
);

436 
	}
}

445 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

447 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

448 
	}
}

457 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

459 
uöt32_t
 
ªsu…
;

461 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

462 (
ªsu…
);

463 
	}
}

472 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

474 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

475 
	}
}

478 #i‡ (
__CORTEX_M
 >= 0x03)

485 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_Áu…_úq
()

487 
__ASM
 volatile ("cpsie f");

488 
	}
}

496 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_Áu…_úq
()

498 
__ASM
 volatile ("cpsid f");

499 
	}
}

508 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

510 
uöt32_t
 
ªsu…
;

512 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

513 (
ªsu…
);

514 
	}
}

523 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

525 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

526 
	}
}

535 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

537 
uöt32_t
 
ªsu…
;

539 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

540 (
ªsu…
);

541 
	}
}

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

552 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

553 
	}
}

558 #i‡ (
__CORTEX_M
 == 0x04)

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

568 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

569 
uöt32_t
 
ªsu…
;

571 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

572 (
ªsu…
);

576 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

587 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

588 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

590 
	}
}

595 #ñi‡
deföed
 ( 
__TASKING__
 )

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡ (
__CORTEX_M
 >= 0x03)

144 
	#__RBIT
 
__rbô


	)

154 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

164 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

174 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

186 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

198 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

210 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

218 
	#__CLREX
 
__˛ªx


	)

229 
	#__SSAT
 
__sßt


	)

240 
	#__USAT
 
__ußt


	)

250 
	#__CLZ
 
__˛z


	)

256 #ñi‡
deföed
 ( 
__ICCARM__
 )

259 
	~<cmsis_ür.h
>

262 #ñi‡
deföed
 ( 
__GNUC__
 )

269 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__NOP
()

271 
__ASM
 volatile ("nop");

272 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFI
()

282 
__ASM
 volatile ("wfi");

283 
	}
}

291 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFE
()

293 
__ASM
 volatile ("wfe");

294 
	}
}

301 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__SEV
()

303 
__ASM
 volatile ("sev");

304 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__ISB
()

315 
__ASM
 volatile ("isb");

316 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DSB
()

326 
__ASM
 volatile ("dsb");

327 
	}
}

335 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DMB
()

337 
__ASM
 volatile ("dmb");

338 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

353 (
ªsu…
);

354 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

369 (
ªsu…
);

370 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

385 (
ªsu…
);

386 
	}
}

389 #i‡ (
__CORTEX_M
 >= 0x03)

398 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

400 
uöt32_t
 
ªsu…
;

402 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

403 (
ªsu…
);

404 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

416 
uöt8_t
 
ªsu…
;

418 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

419 (
ªsu…
);

420 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

432 
uöt16_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

435 (
ªsu…
);

436 
	}
}

446 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

451 (
ªsu…
);

452 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

469 (
ªsu…
);

470 
	}
}

482 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

484 
uöt32_t
 
ªsu…
;

486 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

487 (
ªsu…
);

488 
	}
}

500 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

502 
uöt32_t
 
ªsu…
;

504 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

505 (
ªsu…
);

506 
	}
}

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__CLREX
()

516 
__ASM
 volatile ("clrex");

517 
	}
}

528 
	#__SSAT
(
ARG1
,
ARG2
) \

530 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

531 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

532 
__RES
; \

533 })

	)

544 
	#__USAT
(
ARG1
,
ARG2
) \

546 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

547 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

548 
__RES
; \

549 })

	)

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

561 
uöt8_t
 
ªsu…
;

563 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

564 (
ªsu…
);

565 
	}
}

572 #ñi‡
deföed
 ( 
__TASKING__
 )

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\inc\stm32f4xx.h

47 #i‚de‡
__STM32F4xx_H


48 
	#__STM32F4xx_H


	)

50 #ifde‡
__˝lu•lus


62 #i‡!
deföed
 (
STM32F4XX
)

63 
	#STM32F4XX


	)

70 #i‡!
deföed
 (
STM32F4XX
)

74 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

91 #i‡!
deföed
 (
HSE_VALUE
)

92 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

99 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

100 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0600Ë

	)

103 #i‡!
deföed
 (
HSI_VALUE
)

104 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

110 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

111 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x00Ë

	)

112 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

113 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

114 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

115 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

116 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

117 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

	)

130 
	#__CM4_REV
 0x0001

	)

131 
	#__MPU_PRESENT
 1

	)

132 
	#__NVIC_PRIO_BITS
 4

	)

133 
	#__Víd‹_SysTickC⁄fig
 0

	)

134 
	#__FPU_PRESENT
 1

	)

140 
	eIRQn


143 
N⁄MaskabÀI¡_IRQn
 = -14,

144 
Mem‹yM™agemít_IRQn
 = -12,

145 
BusFau…_IRQn
 = -11,

146 
UßgeFau…_IRQn
 = -10,

147 
SVCÆl_IRQn
 = -5,

148 
DebugM⁄ô‹_IRQn
 = -4,

149 
PídSV_IRQn
 = -2,

150 
SysTick_IRQn
 = -1,

152 
WWDG_IRQn
 = 0,

153 
PVD_IRQn
 = 1,

154 
TAMP_STAMP_IRQn
 = 2,

155 
RTC_WKUP_IRQn
 = 3,

156 
FLASH_IRQn
 = 4,

157 
RCC_IRQn
 = 5,

158 
EXTI0_IRQn
 = 6,

159 
EXTI1_IRQn
 = 7,

160 
EXTI2_IRQn
 = 8,

161 
EXTI3_IRQn
 = 9,

162 
EXTI4_IRQn
 = 10,

163 
DMA1_Såóm0_IRQn
 = 11,

164 
DMA1_Såóm1_IRQn
 = 12,

165 
DMA1_Såóm2_IRQn
 = 13,

166 
DMA1_Såóm3_IRQn
 = 14,

167 
DMA1_Såóm4_IRQn
 = 15,

168 
DMA1_Såóm5_IRQn
 = 16,

169 
DMA1_Såóm6_IRQn
 = 17,

170 
ADC_IRQn
 = 18,

171 
CAN1_TX_IRQn
 = 19,

172 
CAN1_RX0_IRQn
 = 20,

173 
CAN1_RX1_IRQn
 = 21,

174 
CAN1_SCE_IRQn
 = 22,

175 
EXTI9_5_IRQn
 = 23,

176 
TIM1_BRK_TIM9_IRQn
 = 24,

177 
TIM1_UP_TIM10_IRQn
 = 25,

178 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

179 
TIM1_CC_IRQn
 = 27,

180 
TIM2_IRQn
 = 28,

181 
TIM3_IRQn
 = 29,

182 
TIM4_IRQn
 = 30,

183 
I2C1_EV_IRQn
 = 31,

184 
I2C1_ER_IRQn
 = 32,

185 
I2C2_EV_IRQn
 = 33,

186 
I2C2_ER_IRQn
 = 34,

187 
SPI1_IRQn
 = 35,

188 
SPI2_IRQn
 = 36,

189 
USART1_IRQn
 = 37,

190 
USART2_IRQn
 = 38,

191 
USART3_IRQn
 = 39,

192 
EXTI15_10_IRQn
 = 40,

193 
RTC_Aœrm_IRQn
 = 41,

194 
OTG_FS_WKUP_IRQn
 = 42,

195 
TIM8_BRK_TIM12_IRQn
 = 43,

196 
TIM8_UP_TIM13_IRQn
 = 44,

197 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

198 
TIM8_CC_IRQn
 = 46,

199 
DMA1_Såóm7_IRQn
 = 47,

200 
FSMC_IRQn
 = 48,

201 
SDIO_IRQn
 = 49,

202 
TIM5_IRQn
 = 50,

203 
SPI3_IRQn
 = 51,

204 
UART4_IRQn
 = 52,

205 
UART5_IRQn
 = 53,

206 
TIM6_DAC_IRQn
 = 54,

207 
TIM7_IRQn
 = 55,

208 
DMA2_Såóm0_IRQn
 = 56,

209 
DMA2_Såóm1_IRQn
 = 57,

210 
DMA2_Såóm2_IRQn
 = 58,

211 
DMA2_Såóm3_IRQn
 = 59,

212 
DMA2_Såóm4_IRQn
 = 60,

213 
ETH_IRQn
 = 61,

214 
ETH_WKUP_IRQn
 = 62,

215 
CAN2_TX_IRQn
 = 63,

216 
CAN2_RX0_IRQn
 = 64,

217 
CAN2_RX1_IRQn
 = 65,

218 
CAN2_SCE_IRQn
 = 66,

219 
OTG_FS_IRQn
 = 67,

220 
DMA2_Såóm5_IRQn
 = 68,

221 
DMA2_Såóm6_IRQn
 = 69,

222 
DMA2_Såóm7_IRQn
 = 70,

223 
USART6_IRQn
 = 71,

224 
I2C3_EV_IRQn
 = 72,

225 
I2C3_ER_IRQn
 = 73,

226 
OTG_HS_EP1_OUT_IRQn
 = 74,

227 
OTG_HS_EP1_IN_IRQn
 = 75,

228 
OTG_HS_WKUP_IRQn
 = 76,

229 
OTG_HS_IRQn
 = 77,

230 
DCMI_IRQn
 = 78,

231 
CRYP_IRQn
 = 79,

232 
HASH_RNG_IRQn
 = 80,

233 
FPU_IRQn
 = 81

234 } 
	tIRQn_Ty≥
;

240 
	~"c‹e_cm4.h
"

241 
	~"sy°em_°m32f4xx.h
"

242 
	~<°döt.h
>

248 
öt32_t
 
	ts32
;

249 
öt16_t
 
	ts16
;

250 
öt8_t
 
	ts8
;

252 c⁄° 
	töt32_t
 
	tsc32
;

253 c⁄° 
	töt16_t
 
	tsc16
;

254 c⁄° 
	töt8_t
 
	tsc8
;

256 
__IO
 
	töt32_t
 
	tvs32
;

257 
__IO
 
	töt16_t
 
	tvs16
;

258 
__IO
 
	töt8_t
 
	tvs8
;

260 
__I
 
	töt32_t
 
	tvsc32
;

261 
__I
 
	töt16_t
 
	tvsc16
;

262 
__I
 
	töt8_t
 
	tvsc8
;

264 
uöt32_t
 
	tu32
;

265 
uöt16_t
 
	tu16
;

266 
uöt8_t
 
	tu8
;

268 c⁄° 
	tuöt32_t
 
	tuc32
;

269 c⁄° 
	tuöt16_t
 
	tuc16
;

270 c⁄° 
	tuöt8_t
 
	tuc8
;

272 
__IO
 
	tuöt32_t
 
	tvu32
;

273 
__IO
 
	tuöt16_t
 
	tvu16
;

274 
__IO
 
	tuöt8_t
 
	tvu8
;

276 
__I
 
	tuöt32_t
 
	tvuc32
;

277 
__I
 
	tuöt16_t
 
	tvuc16
;

278 
__I
 
	tuöt8_t
 
	tvuc8
;

280 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

282 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

283 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

285 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

301 
__IO
 
uöt32_t
 
SR
;

302 
__IO
 
uöt32_t
 
CR1
;

303 
__IO
 
uöt32_t
 
CR2
;

304 
__IO
 
uöt32_t
 
SMPR1
;

305 
__IO
 
uöt32_t
 
SMPR2
;

306 
__IO
 
uöt32_t
 
JOFR1
;

307 
__IO
 
uöt32_t
 
JOFR2
;

308 
__IO
 
uöt32_t
 
JOFR3
;

309 
__IO
 
uöt32_t
 
JOFR4
;

310 
__IO
 
uöt32_t
 
HTR
;

311 
__IO
 
uöt32_t
 
LTR
;

312 
__IO
 
uöt32_t
 
SQR1
;

313 
__IO
 
uöt32_t
 
SQR2
;

314 
__IO
 
uöt32_t
 
SQR3
;

315 
__IO
 
uöt32_t
 
JSQR
;

316 
__IO
 
uöt32_t
 
JDR1
;

317 
__IO
 
uöt32_t
 
JDR2
;

318 
__IO
 
uöt32_t
 
JDR3
;

319 
__IO
 
uöt32_t
 
JDR4
;

320 
__IO
 
uöt32_t
 
DR
;

321 } 
	tADC_Ty≥Def
;

325 
__IO
 
uöt32_t
 
CSR
;

326 
__IO
 
uöt32_t
 
CCR
;

327 
__IO
 
uöt32_t
 
CDR
;

329 } 
	tADC_Comm⁄_Ty≥Def
;

338 
__IO
 
uöt32_t
 
TIR
;

339 
__IO
 
uöt32_t
 
TDTR
;

340 
__IO
 
uöt32_t
 
TDLR
;

341 
__IO
 
uöt32_t
 
TDHR
;

342 } 
	tCAN_TxMaûBox_Ty≥Def
;

350 
__IO
 
uöt32_t
 
RIR
;

351 
__IO
 
uöt32_t
 
RDTR
;

352 
__IO
 
uöt32_t
 
RDLR
;

353 
__IO
 
uöt32_t
 
RDHR
;

354 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

362 
__IO
 
uöt32_t
 
FR1
;

363 
__IO
 
uöt32_t
 
FR2
;

364 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

372 
__IO
 
uöt32_t
 
MCR
;

373 
__IO
 
uöt32_t
 
MSR
;

374 
__IO
 
uöt32_t
 
TSR
;

375 
__IO
 
uöt32_t
 
RF0R
;

376 
__IO
 
uöt32_t
 
RF1R
;

377 
__IO
 
uöt32_t
 
IER
;

378 
__IO
 
uöt32_t
 
ESR
;

379 
__IO
 
uöt32_t
 
BTR
;

380 
uöt32_t
 
RESERVED0
[88];

381 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

382 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

383 
uöt32_t
 
RESERVED1
[12];

384 
__IO
 
uöt32_t
 
FMR
;

385 
__IO
 
uöt32_t
 
FM1R
;

386 
uöt32_t
 
RESERVED2
;

387 
__IO
 
uöt32_t
 
FS1R
;

388 
uöt32_t
 
RESERVED3
;

389 
__IO
 
uöt32_t
 
FFA1R
;

390 
uöt32_t
 
RESERVED4
;

391 
__IO
 
uöt32_t
 
FA1R
;

392 
uöt32_t
 
RESERVED5
[8];

393 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

394 } 
	tCAN_Ty≥Def
;

402 
__IO
 
uöt32_t
 
DR
;

403 
__IO
 
uöt8_t
 
IDR
;

404 
uöt8_t
 
RESERVED0
;

405 
uöt16_t
 
RESERVED1
;

406 
__IO
 
uöt32_t
 
CR
;

407 } 
	tCRC_Ty≥Def
;

415 
__IO
 
uöt32_t
 
CR
;

416 
__IO
 
uöt32_t
 
SWTRIGR
;

417 
__IO
 
uöt32_t
 
DHR12R1
;

418 
__IO
 
uöt32_t
 
DHR12L1
;

419 
__IO
 
uöt32_t
 
DHR8R1
;

420 
__IO
 
uöt32_t
 
DHR12R2
;

421 
__IO
 
uöt32_t
 
DHR12L2
;

422 
__IO
 
uöt32_t
 
DHR8R2
;

423 
__IO
 
uöt32_t
 
DHR12RD
;

424 
__IO
 
uöt32_t
 
DHR12LD
;

425 
__IO
 
uöt32_t
 
DHR8RD
;

426 
__IO
 
uöt32_t
 
DOR1
;

427 
__IO
 
uöt32_t
 
DOR2
;

428 
__IO
 
uöt32_t
 
SR
;

429 } 
	tDAC_Ty≥Def
;

437 
__IO
 
uöt32_t
 
IDCODE
;

438 
__IO
 
uöt32_t
 
CR
;

439 
__IO
 
uöt32_t
 
APB1FZ
;

440 
__IO
 
uöt32_t
 
APB2FZ
;

441 }
	tDBGMCU_Ty≥Def
;

449 
__IO
 
uöt32_t
 
CR
;

450 
__IO
 
uöt32_t
 
SR
;

451 
__IO
 
uöt32_t
 
RISR
;

452 
__IO
 
uöt32_t
 
IER
;

453 
__IO
 
uöt32_t
 
MISR
;

454 
__IO
 
uöt32_t
 
ICR
;

455 
__IO
 
uöt32_t
 
ESCR
;

456 
__IO
 
uöt32_t
 
ESUR
;

457 
__IO
 
uöt32_t
 
CWSTRTR
;

458 
__IO
 
uöt32_t
 
CWSIZER
;

459 
__IO
 
uöt32_t
 
DR
;

460 } 
	tDCMI_Ty≥Def
;

468 
__IO
 
uöt32_t
 
CR
;

469 
__IO
 
uöt32_t
 
NDTR
;

470 
__IO
 
uöt32_t
 
PAR
;

471 
__IO
 
uöt32_t
 
M0AR
;

472 
__IO
 
uöt32_t
 
M1AR
;

473 
__IO
 
uöt32_t
 
FCR
;

474 } 
	tDMA_Såóm_Ty≥Def
;

478 
__IO
 
uöt32_t
 
LISR
;

479 
__IO
 
uöt32_t
 
HISR
;

480 
__IO
 
uöt32_t
 
LIFCR
;

481 
__IO
 
uöt32_t
 
HIFCR
;

482 } 
	tDMA_Ty≥Def
;

490 
__IO
 
uöt32_t
 
MACCR
;

491 
__IO
 
uöt32_t
 
MACFFR
;

492 
__IO
 
uöt32_t
 
MACHTHR
;

493 
__IO
 
uöt32_t
 
MACHTLR
;

494 
__IO
 
uöt32_t
 
MACMIIAR
;

495 
__IO
 
uöt32_t
 
MACMIIDR
;

496 
__IO
 
uöt32_t
 
MACFCR
;

497 
__IO
 
uöt32_t
 
MACVLANTR
;

498 
uöt32_t
 
RESERVED0
[2];

499 
__IO
 
uöt32_t
 
MACRWUFFR
;

500 
__IO
 
uöt32_t
 
MACPMTCSR
;

501 
uöt32_t
 
RESERVED1
[2];

502 
__IO
 
uöt32_t
 
MACSR
;

503 
__IO
 
uöt32_t
 
MACIMR
;

504 
__IO
 
uöt32_t
 
MACA0HR
;

505 
__IO
 
uöt32_t
 
MACA0LR
;

506 
__IO
 
uöt32_t
 
MACA1HR
;

507 
__IO
 
uöt32_t
 
MACA1LR
;

508 
__IO
 
uöt32_t
 
MACA2HR
;

509 
__IO
 
uöt32_t
 
MACA2LR
;

510 
__IO
 
uöt32_t
 
MACA3HR
;

511 
__IO
 
uöt32_t
 
MACA3LR
;

512 
uöt32_t
 
RESERVED2
[40];

513 
__IO
 
uöt32_t
 
MMCCR
;

514 
__IO
 
uöt32_t
 
MMCRIR
;

515 
__IO
 
uöt32_t
 
MMCTIR
;

516 
__IO
 
uöt32_t
 
MMCRIMR
;

517 
__IO
 
uöt32_t
 
MMCTIMR
;

518 
uöt32_t
 
RESERVED3
[14];

519 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

520 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

521 
uöt32_t
 
RESERVED4
[5];

522 
__IO
 
uöt32_t
 
MMCTGFCR
;

523 
uöt32_t
 
RESERVED5
[10];

524 
__IO
 
uöt32_t
 
MMCRFCECR
;

525 
__IO
 
uöt32_t
 
MMCRFAECR
;

526 
uöt32_t
 
RESERVED6
[10];

527 
__IO
 
uöt32_t
 
MMCRGUFCR
;

528 
uöt32_t
 
RESERVED7
[334];

529 
__IO
 
uöt32_t
 
PTPTSCR
;

530 
__IO
 
uöt32_t
 
PTPSSIR
;

531 
__IO
 
uöt32_t
 
PTPTSHR
;

532 
__IO
 
uöt32_t
 
PTPTSLR
;

533 
__IO
 
uöt32_t
 
PTPTSHUR
;

534 
__IO
 
uöt32_t
 
PTPTSLUR
;

535 
__IO
 
uöt32_t
 
PTPTSAR
;

536 
__IO
 
uöt32_t
 
PTPTTHR
;

537 
__IO
 
uöt32_t
 
PTPTTLR
;

538 
__IO
 
uöt32_t
 
RESERVED8
;

539 
__IO
 
uöt32_t
 
PTPTSSR
;

540 
uöt32_t
 
RESERVED9
[565];

541 
__IO
 
uöt32_t
 
DMABMR
;

542 
__IO
 
uöt32_t
 
DMATPDR
;

543 
__IO
 
uöt32_t
 
DMARPDR
;

544 
__IO
 
uöt32_t
 
DMARDLAR
;

545 
__IO
 
uöt32_t
 
DMATDLAR
;

546 
__IO
 
uöt32_t
 
DMASR
;

547 
__IO
 
uöt32_t
 
DMAOMR
;

548 
__IO
 
uöt32_t
 
DMAIER
;

549 
__IO
 
uöt32_t
 
DMAMFBOCR
;

550 
__IO
 
uöt32_t
 
DMARSWTR
;

551 
uöt32_t
 
RESERVED10
[8];

552 
__IO
 
uöt32_t
 
DMACHTDR
;

553 
__IO
 
uöt32_t
 
DMACHRDR
;

554 
__IO
 
uöt32_t
 
DMACHTBAR
;

555 
__IO
 
uöt32_t
 
DMACHRBAR
;

556 } 
	tETH_Ty≥Def
;

564 
__IO
 
uöt32_t
 
IMR
;

565 
__IO
 
uöt32_t
 
EMR
;

566 
__IO
 
uöt32_t
 
RTSR
;

567 
__IO
 
uöt32_t
 
FTSR
;

568 
__IO
 
uöt32_t
 
SWIER
;

569 
__IO
 
uöt32_t
 
PR
;

570 } 
	tEXTI_Ty≥Def
;

578 
__IO
 
uöt32_t
 
ACR
;

579 
__IO
 
uöt32_t
 
KEYR
;

580 
__IO
 
uöt32_t
 
OPTKEYR
;

581 
__IO
 
uöt32_t
 
SR
;

582 
__IO
 
uöt32_t
 
CR
;

583 
__IO
 
uöt32_t
 
OPTCR
;

584 } 
	tFLASH_Ty≥Def
;

592 
__IO
 
uöt32_t
 
BTCR
[8];

593 } 
	tFSMC_B™k1_Ty≥Def
;

601 
__IO
 
uöt32_t
 
BWTR
[7];

602 } 
	tFSMC_B™k1E_Ty≥Def
;

610 
__IO
 
uöt32_t
 
PCR2
;

611 
__IO
 
uöt32_t
 
SR2
;

612 
__IO
 
uöt32_t
 
PMEM2
;

613 
__IO
 
uöt32_t
 
PATT2
;

614 
uöt32_t
 
RESERVED0
;

615 
__IO
 
uöt32_t
 
ECCR2
;

616 } 
	tFSMC_B™k2_Ty≥Def
;

624 
__IO
 
uöt32_t
 
PCR3
;

625 
__IO
 
uöt32_t
 
SR3
;

626 
__IO
 
uöt32_t
 
PMEM3
;

627 
__IO
 
uöt32_t
 
PATT3
;

628 
uöt32_t
 
RESERVED0
;

629 
__IO
 
uöt32_t
 
ECCR3
;

630 } 
	tFSMC_B™k3_Ty≥Def
;

638 
__IO
 
uöt32_t
 
PCR4
;

639 
__IO
 
uöt32_t
 
SR4
;

640 
__IO
 
uöt32_t
 
PMEM4
;

641 
__IO
 
uöt32_t
 
PATT4
;

642 
__IO
 
uöt32_t
 
PIO4
;

643 } 
	tFSMC_B™k4_Ty≥Def
;

651 
__IO
 
uöt32_t
 
MODER
;

652 
__IO
 
uöt32_t
 
OTYPER
;

653 
__IO
 
uöt32_t
 
OSPEEDR
;

654 
__IO
 
uöt32_t
 
PUPDR
;

655 
__IO
 
uöt32_t
 
IDR
;

656 
__IO
 
uöt32_t
 
ODR
;

657 
__IO
 
uöt16_t
 
BSRRL
;

658 
__IO
 
uöt16_t
 
BSRRH
;

659 
__IO
 
uöt32_t
 
LCKR
;

660 
__IO
 
uöt32_t
 
AFR
[2];

661 } 
	tGPIO_Ty≥Def
;

669 
__IO
 
uöt32_t
 
MEMRMP
;

670 
__IO
 
uöt32_t
 
PMC
;

671 
__IO
 
uöt32_t
 
EXTICR
[4];

672 
uöt32_t
 
RESERVED
[2];

673 
__IO
 
uöt32_t
 
CMPCR
;

674 } 
	tSYSCFG_Ty≥Def
;

682 
__IO
 
uöt16_t
 
CR1
;

683 
uöt16_t
 
RESERVED0
;

684 
__IO
 
uöt16_t
 
CR2
;

685 
uöt16_t
 
RESERVED1
;

686 
__IO
 
uöt16_t
 
OAR1
;

687 
uöt16_t
 
RESERVED2
;

688 
__IO
 
uöt16_t
 
OAR2
;

689 
uöt16_t
 
RESERVED3
;

690 
__IO
 
uöt16_t
 
DR
;

691 
uöt16_t
 
RESERVED4
;

692 
__IO
 
uöt16_t
 
SR1
;

693 
uöt16_t
 
RESERVED5
;

694 
__IO
 
uöt16_t
 
SR2
;

695 
uöt16_t
 
RESERVED6
;

696 
__IO
 
uöt16_t
 
CCR
;

697 
uöt16_t
 
RESERVED7
;

698 
__IO
 
uöt16_t
 
TRISE
;

699 
uöt16_t
 
RESERVED8
;

700 } 
	tI2C_Ty≥Def
;

708 
__IO
 
uöt32_t
 
KR
;

709 
__IO
 
uöt32_t
 
PR
;

710 
__IO
 
uöt32_t
 
RLR
;

711 
__IO
 
uöt32_t
 
SR
;

712 } 
	tIWDG_Ty≥Def
;

720 
__IO
 
uöt32_t
 
CR
;

721 
__IO
 
uöt32_t
 
CSR
;

722 } 
	tPWR_Ty≥Def
;

730 
__IO
 
uöt32_t
 
CR
;

731 
__IO
 
uöt32_t
 
PLLCFGR
;

732 
__IO
 
uöt32_t
 
CFGR
;

733 
__IO
 
uöt32_t
 
CIR
;

734 
__IO
 
uöt32_t
 
AHB1RSTR
;

735 
__IO
 
uöt32_t
 
AHB2RSTR
;

736 
__IO
 
uöt32_t
 
AHB3RSTR
;

737 
uöt32_t
 
RESERVED0
;

738 
__IO
 
uöt32_t
 
APB1RSTR
;

739 
__IO
 
uöt32_t
 
APB2RSTR
;

740 
uöt32_t
 
RESERVED1
[2];

741 
__IO
 
uöt32_t
 
AHB1ENR
;

742 
__IO
 
uöt32_t
 
AHB2ENR
;

743 
__IO
 
uöt32_t
 
AHB3ENR
;

744 
uöt32_t
 
RESERVED2
;

745 
__IO
 
uöt32_t
 
APB1ENR
;

746 
__IO
 
uöt32_t
 
APB2ENR
;

747 
uöt32_t
 
RESERVED3
[2];

748 
__IO
 
uöt32_t
 
AHB1LPENR
;

749 
__IO
 
uöt32_t
 
AHB2LPENR
;

750 
__IO
 
uöt32_t
 
AHB3LPENR
;

751 
uöt32_t
 
RESERVED4
;

752 
__IO
 
uöt32_t
 
APB1LPENR
;

753 
__IO
 
uöt32_t
 
APB2LPENR
;

754 
uöt32_t
 
RESERVED5
[2];

755 
__IO
 
uöt32_t
 
BDCR
;

756 
__IO
 
uöt32_t
 
CSR
;

757 
uöt32_t
 
RESERVED6
[2];

758 
__IO
 
uöt32_t
 
SSCGR
;

759 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

760 } 
	tRCC_Ty≥Def
;

768 
__IO
 
uöt32_t
 
TR
;

769 
__IO
 
uöt32_t
 
DR
;

770 
__IO
 
uöt32_t
 
CR
;

771 
__IO
 
uöt32_t
 
ISR
;

772 
__IO
 
uöt32_t
 
PRER
;

773 
__IO
 
uöt32_t
 
WUTR
;

774 
__IO
 
uöt32_t
 
CALIBR
;

775 
__IO
 
uöt32_t
 
ALRMAR
;

776 
__IO
 
uöt32_t
 
ALRMBR
;

777 
__IO
 
uöt32_t
 
WPR
;

778 
__IO
 
uöt32_t
 
SSR
;

779 
__IO
 
uöt32_t
 
SHIFTR
;

780 
__IO
 
uöt32_t
 
TSTR
;

781 
__IO
 
uöt32_t
 
TSDR
;

782 
__IO
 
uöt32_t
 
TSSSR
;

783 
__IO
 
uöt32_t
 
CALR
;

784 
__IO
 
uöt32_t
 
TAFCR
;

785 
__IO
 
uöt32_t
 
ALRMASSR
;

786 
__IO
 
uöt32_t
 
ALRMBSSR
;

787 
uöt32_t
 
RESERVED7
;

788 
__IO
 
uöt32_t
 
BKP0R
;

789 
__IO
 
uöt32_t
 
BKP1R
;

790 
__IO
 
uöt32_t
 
BKP2R
;

791 
__IO
 
uöt32_t
 
BKP3R
;

792 
__IO
 
uöt32_t
 
BKP4R
;

793 
__IO
 
uöt32_t
 
BKP5R
;

794 
__IO
 
uöt32_t
 
BKP6R
;

795 
__IO
 
uöt32_t
 
BKP7R
;

796 
__IO
 
uöt32_t
 
BKP8R
;

797 
__IO
 
uöt32_t
 
BKP9R
;

798 
__IO
 
uöt32_t
 
BKP10R
;

799 
__IO
 
uöt32_t
 
BKP11R
;

800 
__IO
 
uöt32_t
 
BKP12R
;

801 
__IO
 
uöt32_t
 
BKP13R
;

802 
__IO
 
uöt32_t
 
BKP14R
;

803 
__IO
 
uöt32_t
 
BKP15R
;

804 
__IO
 
uöt32_t
 
BKP16R
;

805 
__IO
 
uöt32_t
 
BKP17R
;

806 
__IO
 
uöt32_t
 
BKP18R
;

807 
__IO
 
uöt32_t
 
BKP19R
;

808 } 
	tRTC_Ty≥Def
;

816 
__IO
 
uöt32_t
 
POWER
;

817 
__IO
 
uöt32_t
 
CLKCR
;

818 
__IO
 
uöt32_t
 
ARG
;

819 
__IO
 
uöt32_t
 
CMD
;

820 
__I
 
uöt32_t
 
RESPCMD
;

821 
__I
 
uöt32_t
 
RESP1
;

822 
__I
 
uöt32_t
 
RESP2
;

823 
__I
 
uöt32_t
 
RESP3
;

824 
__I
 
uöt32_t
 
RESP4
;

825 
__IO
 
uöt32_t
 
DTIMER
;

826 
__IO
 
uöt32_t
 
DLEN
;

827 
__IO
 
uöt32_t
 
DCTRL
;

828 
__I
 
uöt32_t
 
DCOUNT
;

829 
__I
 
uöt32_t
 
STA
;

830 
__IO
 
uöt32_t
 
ICR
;

831 
__IO
 
uöt32_t
 
MASK
;

832 
uöt32_t
 
RESERVED0
[2];

833 
__I
 
uöt32_t
 
FIFOCNT
;

834 
uöt32_t
 
RESERVED1
[13];

835 
__IO
 
uöt32_t
 
FIFO
;

836 } 
	tSDIO_Ty≥Def
;

844 
__IO
 
uöt16_t
 
CR1
;

845 
uöt16_t
 
RESERVED0
;

846 
__IO
 
uöt16_t
 
CR2
;

847 
uöt16_t
 
RESERVED1
;

848 
__IO
 
uöt16_t
 
SR
;

849 
uöt16_t
 
RESERVED2
;

850 
__IO
 
uöt16_t
 
DR
;

851 
uöt16_t
 
RESERVED3
;

852 
__IO
 
uöt16_t
 
CRCPR
;

853 
uöt16_t
 
RESERVED4
;

854 
__IO
 
uöt16_t
 
RXCRCR
;

855 
uöt16_t
 
RESERVED5
;

856 
__IO
 
uöt16_t
 
TXCRCR
;

857 
uöt16_t
 
RESERVED6
;

858 
__IO
 
uöt16_t
 
I2SCFGR
;

859 
uöt16_t
 
RESERVED7
;

860 
__IO
 
uöt16_t
 
I2SPR
;

861 
uöt16_t
 
RESERVED8
;

862 } 
	tSPI_Ty≥Def
;

870 
__IO
 
uöt16_t
 
CR1
;

871 
uöt16_t
 
RESERVED0
;

872 
__IO
 
uöt16_t
 
CR2
;

873 
uöt16_t
 
RESERVED1
;

874 
__IO
 
uöt16_t
 
SMCR
;

875 
uöt16_t
 
RESERVED2
;

876 
__IO
 
uöt16_t
 
DIER
;

877 
uöt16_t
 
RESERVED3
;

878 
__IO
 
uöt16_t
 
SR
;

879 
uöt16_t
 
RESERVED4
;

880 
__IO
 
uöt16_t
 
EGR
;

881 
uöt16_t
 
RESERVED5
;

882 
__IO
 
uöt16_t
 
CCMR1
;

883 
uöt16_t
 
RESERVED6
;

884 
__IO
 
uöt16_t
 
CCMR2
;

885 
uöt16_t
 
RESERVED7
;

886 
__IO
 
uöt16_t
 
CCER
;

887 
uöt16_t
 
RESERVED8
;

888 
__IO
 
uöt32_t
 
CNT
;

889 
__IO
 
uöt16_t
 
PSC
;

890 
uöt16_t
 
RESERVED9
;

891 
__IO
 
uöt32_t
 
ARR
;

892 
__IO
 
uöt16_t
 
RCR
;

893 
uöt16_t
 
RESERVED10
;

894 
__IO
 
uöt32_t
 
CCR1
;

895 
__IO
 
uöt32_t
 
CCR2
;

896 
__IO
 
uöt32_t
 
CCR3
;

897 
__IO
 
uöt32_t
 
CCR4
;

898 
__IO
 
uöt16_t
 
BDTR
;

899 
uöt16_t
 
RESERVED11
;

900 
__IO
 
uöt16_t
 
DCR
;

901 
uöt16_t
 
RESERVED12
;

902 
__IO
 
uöt16_t
 
DMAR
;

903 
uöt16_t
 
RESERVED13
;

904 
__IO
 
uöt16_t
 
OR
;

905 
uöt16_t
 
RESERVED14
;

906 } 
	tTIM_Ty≥Def
;

914 
__IO
 
uöt16_t
 
SR
;

915 
uöt16_t
 
RESERVED0
;

916 
__IO
 
uöt16_t
 
DR
;

917 
uöt16_t
 
RESERVED1
;

918 
__IO
 
uöt16_t
 
BRR
;

919 
uöt16_t
 
RESERVED2
;

920 
__IO
 
uöt16_t
 
CR1
;

921 
uöt16_t
 
RESERVED3
;

922 
__IO
 
uöt16_t
 
CR2
;

923 
uöt16_t
 
RESERVED4
;

924 
__IO
 
uöt16_t
 
CR3
;

925 
uöt16_t
 
RESERVED5
;

926 
__IO
 
uöt16_t
 
GTPR
;

927 
uöt16_t
 
RESERVED6
;

928 } 
	tUSART_Ty≥Def
;

936 
__IO
 
uöt32_t
 
CR
;

937 
__IO
 
uöt32_t
 
CFR
;

938 
__IO
 
uöt32_t
 
SR
;

939 } 
	tWWDG_Ty≥Def
;

947 
__IO
 
uöt32_t
 
CR
;

948 
__IO
 
uöt32_t
 
SR
;

949 
__IO
 
uöt32_t
 
DR
;

950 
__IO
 
uöt32_t
 
DOUT
;

951 
__IO
 
uöt32_t
 
DMACR
;

952 
__IO
 
uöt32_t
 
IMSCR
;

953 
__IO
 
uöt32_t
 
RISR
;

954 
__IO
 
uöt32_t
 
MISR
;

955 
__IO
 
uöt32_t
 
K0LR
;

956 
__IO
 
uöt32_t
 
K0RR
;

957 
__IO
 
uöt32_t
 
K1LR
;

958 
__IO
 
uöt32_t
 
K1RR
;

959 
__IO
 
uöt32_t
 
K2LR
;

960 
__IO
 
uöt32_t
 
K2RR
;

961 
__IO
 
uöt32_t
 
K3LR
;

962 
__IO
 
uöt32_t
 
K3RR
;

963 
__IO
 
uöt32_t
 
IV0LR
;

964 
__IO
 
uöt32_t
 
IV0RR
;

965 
__IO
 
uöt32_t
 
IV1LR
;

966 
__IO
 
uöt32_t
 
IV1RR
;

967 } 
	tCRYP_Ty≥Def
;

975 
__IO
 
uöt32_t
 
CR
;

976 
__IO
 
uöt32_t
 
DIN
;

977 
__IO
 
uöt32_t
 
STR
;

978 
__IO
 
uöt32_t
 
HR
[5];

979 
__IO
 
uöt32_t
 
IMR
;

980 
__IO
 
uöt32_t
 
SR
;

981 
uöt32_t
 
RESERVED
[52];

982 
__IO
 
uöt32_t
 
CSR
[51];

983 } 
	tHASH_Ty≥Def
;

991 
__IO
 
uöt32_t
 
CR
;

992 
__IO
 
uöt32_t
 
SR
;

993 
__IO
 
uöt32_t
 
DR
;

994 } 
	tRNG_Ty≥Def
;

1002 
__IO
 
uöt32_t
 
GOTGCTL
;

1003 
__IO
 
uöt32_t
 
GOTGINT
;

1004 
__IO
 
uöt32_t
 
GAHBCFG
;

1005 
__IO
 
uöt32_t
 
GUSBCFG
;

1006 
__IO
 
uöt32_t
 
GRSTCTL
;

1007 
__IO
 
uöt32_t
 
GINTSTS
;

1008 
__IO
 
uöt32_t
 
GINTMSK
;

1009 
__IO
 
uöt32_t
 
GRXSTSR
;

1010 
__IO
 
uöt32_t
 
GRXSTSP
;

1011 
__IO
 
uöt32_t
 
GRXFSIZ
;

1013 
__IO
 
uöt32_t
 
HNPTXFSIZ
;

1014 
__IO
 
uöt32_t
 
DIEPTXF0
;

1016 
__IO
 
uöt32_t
 
HNPTXSTS
;

1017 
__IO
 
uöt32_t
 
GI2CCTL
;

1018 
uöt32_t
 
RESERVED0
;

1019 
__IO
 
uöt32_t
 
GCCFG
;

1020 
__IO
 
uöt32_t
 
CID
;

1021 
uöt32_t
 
RESERVED1
[48];

1022 
__IO
 
uöt32_t
 
HPTXFSIZ
;

1023 
__IO
 
uöt32_t
 
DIEPTXF1
;

1024 
__IO
 
uöt32_t
 
DIEPTXF2
;

1025 
__IO
 
uöt32_t
 
DIEPTXF3
;

1026 
__IO
 
uöt32_t
 
DIEPTXF4
;

1027 
__IO
 
uöt32_t
 
DIEPTXF5
;

1028 
__IO
 
uöt32_t
 
DIEPTXF6
;

1029 
__IO
 
uöt32_t
 
DIEPTXF7
;

1030 
__IO
 
uöt32_t
 
DIEPTXF8
;

1031 
__IO
 
uöt32_t
 
DIEPTXF9
;

1032 
__IO
 
uöt32_t
 
DIEPTXF10
;

1033 
__IO
 
uöt32_t
 
DIEPTXF11
;

1034 
__IO
 
uöt32_t
 
DIEPTXF12
;

1035 
__IO
 
uöt32_t
 
DIEPTXF13
;

1036 
__IO
 
uöt32_t
 
DIEPTXF14
;

1037 
__IO
 
uöt32_t
 
DIEPTXF15
;

1038 
uöt32_t
 
RESERVED2
[176];

1039 
__IO
 
uöt32_t
 
HCFG
;

1040 
__IO
 
uöt32_t
 
HFIR
;

1041 
__IO
 
uöt32_t
 
HFNUM
;

1042 
uöt32_t
 
RESERVED3
;

1043 
__IO
 
uöt32_t
 
HPTXSTS
;

1044 
__IO
 
uöt32_t
 
HAINT
;

1045 
__IO
 
uöt32_t
 
HAINTMSK
;

1046 
uöt32_t
 
RESERVED4
[9];

1047 
__IO
 
uöt32_t
 
HPRT
;

1048 
uöt32_t
 
RESERVED5
[47];

1049 
__IO
 
uöt32_t
 
HCCHAR0
;

1050 
uöt32_t
 
RESERVED6
;

1051 
__IO
 
uöt32_t
 
HCINT0
;

1052 
__IO
 
uöt32_t
 
HCINTMSK0
;

1053 
__IO
 
uöt32_t
 
HCTSIZ0
;

1054 
uöt32_t
 
RESERVED7
[3];

1055 
__IO
 
uöt32_t
 
HCCHAR1
;

1056 
uöt32_t
 
RESERVED8
;

1057 
__IO
 
uöt32_t
 
HCINT1
;

1058 
__IO
 
uöt32_t
 
HCINTMSK1
;

1059 
__IO
 
uöt32_t
 
HCTSIZ1
;

1060 
uöt32_t
 
RESERVED9
[3];

1061 
__IO
 
uöt32_t
 
HCCHAR2
;

1062 
uöt32_t
 
RESERVED10
;

1063 
__IO
 
uöt32_t
 
HCINT2
;

1064 
__IO
 
uöt32_t
 
HCINTMSK2
;

1065 
__IO
 
uöt32_t
 
HCTSIZ2
;

1066 
uöt32_t
 
RESERVED11
[3];

1067 
__IO
 
uöt32_t
 
HCCHR3
;

1068 
uöt32_t
 
RESERVED12
;

1069 
__IO
 
uöt32_t
 
HCINT3
;

1070 
__IO
 
uöt32_t
 
HCINTMSK3
;

1071 
__IO
 
uöt32_t
 
HCTSIZ3
;

1072 
uöt32_t
 
RESERVED13
[3];

1073 
__IO
 
uöt32_t
 
HCCHR4
;

1074 
uöt32_t
 
RESERVED14
;

1075 
__IO
 
uöt32_t
 
HCINT4
;

1076 
__IO
 
uöt32_t
 
HCINTMSK4
;

1077 
__IO
 
uöt32_t
 
HCTSIZ4
;

1078 
uöt32_t
 
RESERVED15
[3];

1079 
__IO
 
uöt32_t
 
HCCHR5
;

1080 
uöt32_t
 
RESERVED16
;

1081 
__IO
 
uöt32_t
 
HCINT5
;

1082 
__IO
 
uöt32_t
 
HCINTMSK5
;

1083 
__IO
 
uöt32_t
 
HCTSIZ5
;

1084 
uöt32_t
 
RESERVED17
[3];

1085 
__IO
 
uöt32_t
 
HCCHR6
;

1086 
uöt32_t
 
RESERVED18
;

1087 
__IO
 
uöt32_t
 
HCINT6
;

1088 
__IO
 
uöt32_t
 
HCINTMSK6
;

1089 
__IO
 
uöt32_t
 
HCTSIZ6
;

1090 
uöt32_t
 
RESERVED19
[3];

1091 
__IO
 
uöt32_t
 
HCCHR7
;

1092 
uöt32_t
 
RESERVED20
;

1093 
__IO
 
uöt32_t
 
HCINT7
;

1094 
__IO
 
uöt32_t
 
HCINTMSK7
;

1095 
__IO
 
uöt32_t
 
HCTSIZ7
;

1096 
uöt32_t
 
RESERVED21
[3];

1097 
__IO
 
uöt32_t
 
HCCHR8
;

1098 
uöt32_t
 
RESERVED22
;

1099 
__IO
 
uöt32_t
 
HCINT8
;

1100 
__IO
 
uöt32_t
 
HCINTMSK8
;

1101 
__IO
 
uöt32_t
 
HCTSIZ8
;

1102 
uöt32_t
 
RESERVED23
[3];

1103 
__IO
 
uöt32_t
 
HCCHR9
;

1104 
uöt32_t
 
RESERVED24
;

1105 
__IO
 
uöt32_t
 
HCINT9
;

1106 
__IO
 
uöt32_t
 
HCINTMSK9
;

1107 
__IO
 
uöt32_t
 
HCTSIZ9
;

1108 
uöt32_t
 
RESERVED25
[3];

1109 
__IO
 
uöt32_t
 
HCCHR10
;

1110 
uöt32_t
 
RESERVED26
;

1111 
__IO
 
uöt32_t
 
HCINT10
;

1112 
__IO
 
uöt32_t
 
HCINTMSK10
;

1113 
__IO
 
uöt32_t
 
HCTSIZ10
;

1114 
uöt32_t
 
RESERVED27
[3];

1115 
__IO
 
uöt32_t
 
HCCHR11
;

1116 
uöt32_t
 
RESERVED28
;

1117 
__IO
 
uöt32_t
 
HCINT11
;

1118 
__IO
 
uöt32_t
 
HCINTMSK11
;

1119 
__IO
 
uöt32_t
 
HCTSIZ11
;

1120 
uöt32_t
 
RESERVED29
[3];

1121 
__IO
 
uöt32_t
 
HCCHR12
;

1122 
uöt32_t
 
RESERVED30
;

1123 
__IO
 
uöt32_t
 
HCINT12
;

1124 
__IO
 
uöt32_t
 
HCINTMSK12
;

1125 
__IO
 
uöt32_t
 
HCTSIZ12
;

1126 
uöt32_t
 
RESERVED31
[3];

1127 
__IO
 
uöt32_t
 
HCCHR13
;

1128 
uöt32_t
 
RESERVED32
;

1129 
__IO
 
uöt32_t
 
HCINT13
;

1130 
__IO
 
uöt32_t
 
HCINTMSK13
;

1131 
__IO
 
uöt32_t
 
HCTSIZ13
;

1132 
uöt32_t
 
RESERVED33
[3];

1133 
__IO
 
uöt32_t
 
HCCHR14
;

1134 
uöt32_t
 
RESERVED34
;

1135 
__IO
 
uöt32_t
 
HCINT14
;

1136 
__IO
 
uöt32_t
 
HCINTMSK14
;

1137 
__IO
 
uöt32_t
 
HCTSIZ14
;

1138 
uöt32_t
 
RESERVED35
[3];

1139 
__IO
 
uöt32_t
 
HCCHR15
;

1140 
uöt32_t
 
RESERVED36
;

1141 
__IO
 
uöt32_t
 
HCINT15
;

1142 
__IO
 
uöt32_t
 
HCINTMSK15
;

1143 
__IO
 
uöt32_t
 
HCTSIZ15
;

1144 
uöt32_t
 
RESERVED37
[3];

1145 
uöt32_t
 
RESERVED38
[64];

1146 
__IO
 
uöt32_t
 
DCFG
;

1147 
__IO
 
uöt32_t
 
DCTL
;

1148 
__IO
 
uöt32_t
 
DSTS
;

1149 
uöt32_t
 
RESERVED39
;

1150 
__IO
 
uöt32_t
 
DIEPMSK
;

1151 
__IO
 
uöt32_t
 
DOEPMSK
;

1152 
__IO
 
uöt32_t
 
DAINT
;

1153 
__IO
 
uöt32_t
 
DAINTMSK
;

1154 
uöt32_t
 
RESERVED40
[2];

1155 
__IO
 
uöt32_t
 
DVBUSDIS
;

1156 
__IO
 
uöt32_t
 
DVBUSPULSE
;

1157 
uöt32_t
 
RESERVED41
;

1158 
__IO
 
uöt32_t
 
DIEPEMPMSK
;

1159 
uöt32_t
 
RESERVED42
[50];

1160 
__IO
 
uöt32_t
 
DIEPCTL0
;

1161 
uöt32_t
 
RESERVED43
;

1162 
__IO
 
uöt32_t
 
DIEPINT0
;

1163 
uöt32_t
 
RESERVED44
;

1164 
__IO
 
uöt32_t
 
DIEPTSIZ0
;

1165 
uöt32_t
 
RESERVED45
;

1166 
__IO
 
uöt32_t
 
DTXFSTS0
;

1167 
uöt32_t
 
RESERVED46
;

1168 
__IO
 
uöt32_t
 
DIEPCTL1
;

1169 
uöt32_t
 
RESERVED47
;

1170 
__IO
 
uöt32_t
 
DIEPINT1
;

1171 
uöt32_t
 
RESERVED48
;

1172 
__IO
 
uöt32_t
 
DIEPTSIZ1
;

1173 
uöt32_t
 
RESERVED49
;

1174 
__IO
 
uöt32_t
 
DTXFSTS1
;

1175 
uöt32_t
 
RESERVED50
;

1176 
__IO
 
uöt32_t
 
DIEPCTL2
;

1177 
uöt32_t
 
RESERVED51
;

1178 
__IO
 
uöt32_t
 
DIEPINT2
;

1179 
uöt32_t
 
RESERVED52
;

1180 
__IO
 
uöt32_t
 
DIEPTSIZ2
;

1181 
uöt32_t
 
RESERVED53
;

1182 
__IO
 
uöt32_t
 
DTXFSTS2
;

1183 
uöt32_t
 
RESERVED54
;

1184 
__IO
 
uöt32_t
 
DIEPCTL3
;

1185 
uöt32_t
 
RESERVED55
;

1186 
__IO
 
uöt32_t
 
DIEPINT3
;

1187 
uöt32_t
 
RESERVED56
;

1188 
__IO
 
uöt32_t
 
DIEPTSIZ3
;

1189 
uöt32_t
 
RESERVED57
;

1190 
__IO
 
uöt32_t
 
DTXFSTS3
;

1191 
uöt32_t
 
RESERVED58
;

1192 
__IO
 
uöt32_t
 
DIEPCTL4
;

1193 
uöt32_t
 
RESERVED59
;

1194 
__IO
 
uöt32_t
 
DIEPINT4
;

1195 
uöt32_t
 
RESERVED60
;

1196 
__IO
 
uöt32_t
 
DIEPTSIZ4
;

1197 
uöt32_t
 
RESERVED61
;

1198 
__IO
 
uöt32_t
 
DTXFSTS4
;

1199 
uöt32_t
 
RESERVED62
;

1200 
__IO
 
uöt32_t
 
DIEPCTL5
;

1201 
uöt32_t
 
RESERVED63
;

1202 
__IO
 
uöt32_t
 
DIEPINT5
;

1203 
uöt32_t
 
RESERVED64
;

1204 
__IO
 
uöt32_t
 
DIEPTSIZ5
;

1205 
uöt32_t
 
RESERVED65
[3];

1206 
__IO
 
uöt32_t
 
DIEPCTL6
;

1207 
uöt32_t
 
RESERVED66
;

1208 
__IO
 
uöt32_t
 
DIEPINT6
;

1209 
uöt32_t
 
RESERVED67
;

1210 
__IO
 
uöt32_t
 
DIEPTSIZ6
;

1211 
uöt32_t
 
RESERVED68
[3];

1212 
__IO
 
uöt32_t
 
DIEPCTL7
;

1213 
uöt32_t
 
RESERVED69
;

1214 
__IO
 
uöt32_t
 
DIEPINT7
;

1215 
uöt32_t
 
RESERVED70
;

1216 
__IO
 
uöt32_t
 
DIEPTSIZ7
;

1217 
uöt32_t
 
RESERVED71
[3];

1218 
__IO
 
uöt32_t
 
DIEPCTL8
;

1219 
uöt32_t
 
RESERVED72
;

1220 
__IO
 
uöt32_t
 
DIEPINT8
;

1221 
uöt32_t
 
RESERVED73
;

1222 
__IO
 
uöt32_t
 
DIEPTSIZ8
;

1223 
uöt32_t
 
RESERVED74
[3];

1224 
__IO
 
uöt32_t
 
DIEPCTL9
;

1225 
uöt32_t
 
RESERVED75
;

1226 
__IO
 
uöt32_t
 
DIEPINT9
;

1227 
uöt32_t
 
RESERVED76
;

1228 
__IO
 
uöt32_t
 
DIEPTSIZ9
;

1229 
uöt32_t
 
RESERVED77
[3];

1230 
__IO
 
uöt32_t
 
DIEPCTL10
;

1231 
uöt32_t
 
RESERVED78
;

1232 
__IO
 
uöt32_t
 
DIEPINT10
;

1233 
uöt32_t
 
RESERVED79
;

1234 
__IO
 
uöt32_t
 
DIEPTSIZ10
;

1235 
uöt32_t
 
RESERVED80
[3];

1236 
__IO
 
uöt32_t
 
DIEPCTL11
;

1237 
uöt32_t
 
RESERVED81
;

1238 
__IO
 
uöt32_t
 
DIEPINT11
;

1239 
uöt32_t
 
RESERVED82
;

1240 
__IO
 
uöt32_t
 
DIEPTSIZ11
;

1241 
uöt32_t
 
RESERVED83
[3];

1242 
__IO
 
uöt32_t
 
DIEPCTL12
;

1243 
uöt32_t
 
RESERVED84
;

1244 
__IO
 
uöt32_t
 
DIEPINT12
;

1245 
uöt32_t
 
RESERVED85
;

1246 
__IO
 
uöt32_t
 
DIEPTSIZ86
;

1247 
uöt32_t
 
RESERVED86
[3];

1248 
__IO
 
uöt32_t
 
DIEPCTL13
;

1249 
uöt32_t
 
RESERVED87
;

1250 
__IO
 
uöt32_t
 
DIEPINT13
;

1251 
uöt32_t
 
RESERVED88
;

1252 
__IO
 
uöt32_t
 
DIEPTSIZ13
;

1253 
uöt32_t
 
RESERVED89
[3];

1254 
__IO
 
uöt32_t
 
DIEPCTL14
;

1255 
uöt32_t
 
RESERVED90
;

1256 
__IO
 
uöt32_t
 
DIEPINT14
;

1257 
uöt32_t
 
RESERVED91
;

1258 
__IO
 
uöt32_t
 
DIEPTSIZ14
;

1259 
uöt32_t
 
RESERVED92
[3];

1260 
__IO
 
uöt32_t
 
DIEPCTL15
;

1261 
uöt32_t
 
RESERVED93
;

1262 
__IO
 
uöt32_t
 
DIEPINT15
;

1263 
uöt32_t
 
RESERVED94
;

1264 
__IO
 
uöt32_t
 
DIEPTSIZ15
;

1265 
uöt32_t
 
RESERVED95
[3];

1266 
__IO
 
uöt32_t
 
DOEPCTL0
;

1267 
uöt32_t
 
RESERVED96
;

1268 
__IO
 
uöt32_t
 
DOEPINT0
;

1269 
uöt32_t
 
RESERVED97
;

1270 
__IO
 
uöt32_t
 
DOEPTSIZ0
;

1271 
uöt32_t
 
RESERVED98
[3];

1272 
__IO
 
uöt32_t
 
DOEPCTL1
;

1273 
uöt32_t
 
RESERVED99
;

1274 
__IO
 
uöt32_t
 
DOEPINT1
;

1275 
uöt32_t
 
RESERVED100
;

1276 
__IO
 
uöt32_t
 
DOEPTSIZ1
;

1277 
uöt32_t
 
RESERVED101
[3];

1278 
__IO
 
uöt32_t
 
DOEPCTL2
;

1279 
uöt32_t
 
RESERVED102
;

1280 
__IO
 
uöt32_t
 
DOEPINT2
;

1281 
uöt32_t
 
RESERVED103
;

1282 
__IO
 
uöt32_t
 
DOEPTSIZ2
;

1283 
uöt32_t
 
RESERVED104
[3];

1284 
__IO
 
uöt32_t
 
DOEPCTL3
;

1285 
uöt32_t
 
RESERVED105
;

1286 
__IO
 
uöt32_t
 
DOEPINT3
;

1287 
uöt32_t
 
RESERVED106
;

1288 
__IO
 
uöt32_t
 
DOEPTSIZ3
;

1289 
uöt32_t
 
RESERVED107
[3];

1290 
__IO
 
uöt32_t
 
DOEPCTL4
;

1291 
uöt32_t
 
RESERVED108
;

1292 
__IO
 
uöt32_t
 
DOEPINT4
;

1293 
uöt32_t
 
RESERVED109
;

1294 
__IO
 
uöt32_t
 
DOEPTSIZ4
;

1295 
uöt32_t
 
RESERVED110
[3];

1296 
__IO
 
uöt32_t
 
DOEPCTL5
;

1297 
uöt32_t
 
RESERVED111
;

1298 
__IO
 
uöt32_t
 
DOEPINT5
;

1299 
uöt32_t
 
RESERVED112
;

1300 
__IO
 
uöt32_t
 
DOEPTSIZ5
;

1301 
uöt32_t
 
RESERVED113
[3];

1302 
__IO
 
uöt32_t
 
DOEPCTL6
;

1303 
uöt32_t
 
RESERVED114
;

1304 
__IO
 
uöt32_t
 
DOEPINT6
;

1305 
uöt32_t
 
RESERVED115
;

1306 
__IO
 
uöt32_t
 
DOEPTSIZ6
;

1307 
uöt32_t
 
RESERVED116
[3];

1308 
__IO
 
uöt32_t
 
DOEPCTL7
;

1309 
uöt32_t
 
RESERVED117
;

1310 
__IO
 
uöt32_t
 
DOEPINT7
;

1311 
uöt32_t
 
RESERVED118
;

1312 
__IO
 
uöt32_t
 
DOEPTSIZ7
;

1313 
uöt32_t
 
RESERVED119
[3];

1314 
__IO
 
uöt32_t
 
DOEPCTL8
;

1315 
uöt32_t
 
RESERVED120
;

1316 
__IO
 
uöt32_t
 
DOEPINT8
;

1317 
uöt32_t
 
RESERVED121
;

1318 
__IO
 
uöt32_t
 
DOEPTSIZ8
;

1319 
uöt32_t
 
RESERVED122
[3];

1320 
__IO
 
uöt32_t
 
DOEPCTL9
;

1321 
uöt32_t
 
RESERVED123
;

1322 
__IO
 
uöt32_t
 
DOEPINT9
;

1323 
uöt32_t
 
RESERVED124
;

1324 
__IO
 
uöt32_t
 
DOEPTSIZ9
;

1325 
uöt32_t
 
RESERVED125
[3];

1326 
__IO
 
uöt32_t
 
DOEPCTL10
;

1327 
uöt32_t
 
RESERVED126
;

1328 
__IO
 
uöt32_t
 
DOEPINT10
;

1329 
uöt32_t
 
RESERVED127
;

1330 
__IO
 
uöt32_t
 
DOEPTSIZ10
;

1331 
uöt32_t
 
RESERVED128
[3];

1332 
__IO
 
uöt32_t
 
DOEPCTL11
;

1333 
uöt32_t
 
RESERVED129
;

1334 
__IO
 
uöt32_t
 
DOEPINT11
;

1335 
uöt32_t
 
RESERVED130
;

1336 
__IO
 
uöt32_t
 
DOEPTSIZ11
;

1337 
uöt32_t
 
RESERVED131
[3];

1338 
__IO
 
uöt32_t
 
DOEPCTL12
;

1339 
uöt32_t
 
RESERVED132
;

1340 
__IO
 
uöt32_t
 
DOEPINT12
;

1341 
uöt32_t
 
RESERVED133
;

1342 
__IO
 
uöt32_t
 
DOEPTSIZ12
;

1343 
uöt32_t
 
RESERVED134
[3];

1344 
__IO
 
uöt32_t
 
DOEPCTL13
;

1345 
uöt32_t
 
RESERVED135
;

1346 
__IO
 
uöt32_t
 
DOEPINT13
;

1347 
uöt32_t
 
RESERVED136
;

1348 
__IO
 
uöt32_t
 
DOEPTSIZ13
;

1349 
uöt32_t
 
RESERVED137
[3];

1350 
__IO
 
uöt32_t
 
DOEPCTL14
;

1351 
uöt32_t
 
RESERVED138
;

1352 
__IO
 
uöt32_t
 
DOEPINT14
;

1353 
uöt32_t
 
RESERVED139
;

1354 
__IO
 
uöt32_t
 
DOEPTSIZ14
;

1355 
uöt32_t
 
RESERVED140
[3];

1356 
__IO
 
uöt32_t
 
DOEPCTL15
;

1357 
uöt32_t
 
RESERVED141
;

1358 
__IO
 
uöt32_t
 
DOEPINT15
;

1359 
uöt32_t
 
RESERVED142
;

1360 
__IO
 
uöt32_t
 
DOEPTSIZ15
;

1361 
uöt32_t
 
RESERVED143
[3];

1362 
uöt32_t
 
RESERVED144
[64];

1363 
__IO
 
uöt32_t
 
PCGCCTL
;

1364 } 
	tOTG_FS_Ty≥Def
;

1372 
__IO
 
uöt32_t
 
GOTGCTL
;

1373 
__IO
 
uöt32_t
 
GOTGINT
;

1374 
__IO
 
uöt32_t
 
GAHBCFG
;

1375 
__IO
 
uöt32_t
 
GUSBCFG
;

1376 
__IO
 
uöt32_t
 
GRSTCTL
;

1377 
__IO
 
uöt32_t
 
GINTSTS
;

1378 
__IO
 
uöt32_t
 
GINTMSK
;

1379 
__IO
 
uöt32_t
 
GRXSTSR
;

1380 
__IO
 
uöt32_t
 
GRXSTSP
;

1381 
__IO
 
uöt32_t
 
GRXFSIZ
;

1383 
__IO
 
uöt32_t
 
GNPTXFSIZ
;

1384 
__IO
 
uöt32_t
 
TX0FSIZ
;

1386 
__IO
 
uöt32_t
 
GNPTXSTS
;

1387 
__IO
 
uöt32_t
 
GI2CCTL
;

1388 
uöt32_t
 
RESERVED0
;

1389 
__IO
 
uöt32_t
 
GCCFG
;

1390 
__IO
 
uöt32_t
 
CID
;

1391 
uöt32_t
 
RESERVED1
[48];

1392 
__IO
 
uöt32_t
 
HPTXFSIZ
;

1393 
__IO
 
uöt32_t
 
DIEPTXF1
;

1394 
__IO
 
uöt32_t
 
DIEPTXF2
;

1395 
__IO
 
uöt32_t
 
DIEPTXF3
;

1396 
__IO
 
uöt32_t
 
DIEPTXF4
;

1397 
__IO
 
uöt32_t
 
DIEPTXF5
;

1398 
__IO
 
uöt32_t
 
DIEPTXF6
;

1399 
__IO
 
uöt32_t
 
DIEPTXF7
;

1400 
__IO
 
uöt32_t
 
DIEPTXF8
;

1401 
__IO
 
uöt32_t
 
DIEPTXF9
;

1402 
__IO
 
uöt32_t
 
DIEPTXF10
;

1403 
__IO
 
uöt32_t
 
DIEPTXF11
;

1404 
__IO
 
uöt32_t
 
DIEPTXF12
;

1405 
__IO
 
uöt32_t
 
DIEPTXF13
;

1406 
__IO
 
uöt32_t
 
DIEPTXF14
;

1407 
__IO
 
uöt32_t
 
DIEPTXF15
;

1408 
uöt32_t
 
RESERVED2
[176];

1409 
__IO
 
uöt32_t
 
HCFG
;

1410 
__IO
 
uöt32_t
 
HFIR
;

1411 
__IO
 
uöt32_t
 
HFNUM
;

1412 
uöt32_t
 
RESERVED3
;

1413 
__IO
 
uöt32_t
 
HPTXSTS
;

1414 
__IO
 
uöt32_t
 
HAINT
;

1415 
__IO
 
uöt32_t
 
HAINTMSK
;

1416 
uöt32_t
 
RESERVED4
[9];

1417 
__IO
 
uöt32_t
 
HPRT
;

1418 
uöt32_t
 
RESERVED5
[47];

1419 
__IO
 
uöt32_t
 
HCCHAR0
;

1420 
__IO
 
uöt32_t
 
HCSPLT0
;

1421 
__IO
 
uöt32_t
 
HCINT0
;

1422 
__IO
 
uöt32_t
 
HCINTMSK0
;

1423 
__IO
 
uöt32_t
 
HCTSIZ0
;

1424 
__IO
 
uöt32_t
 
HCDMA0
;

1425 
uöt32_t
 
RESERVED6
[2];

1426 
__IO
 
uöt32_t
 
HCCHAR1
;

1427 
__IO
 
uöt32_t
 
HCSPLT1
;

1428 
__IO
 
uöt32_t
 
HCINT1
;

1429 
__IO
 
uöt32_t
 
HCINTMSK1
;

1430 
__IO
 
uöt32_t
 
HCTSIZ1
;

1431 
__IO
 
uöt32_t
 
HCDMA1
;

1432 
uöt32_t
 
RESERVED7
[2];

1433 
__IO
 
uöt32_t
 
HCCHAR2
;

1434 
__IO
 
uöt32_t
 
HCSPLT2
;

1435 
__IO
 
uöt32_t
 
HCINT2
;

1436 
__IO
 
uöt32_t
 
HCINTMSK2
;

1437 
__IO
 
uöt32_t
 
HCTSIZ2
;

1438 
__IO
 
uöt32_t
 
HCDMA2
;

1439 
uöt32_t
 
RESERVED8
[2];

1440 
__IO
 
uöt32_t
 
HCCHAR3
;

1441 
__IO
 
uöt32_t
 
HCSPLT3
;

1442 
__IO
 
uöt32_t
 
HCINT3
;

1443 
__IO
 
uöt32_t
 
HCINTMSK3
;

1444 
__IO
 
uöt32_t
 
HCTSIZ3
;

1445 
__IO
 
uöt32_t
 
HCDMA3
;

1446 
uöt32_t
 
RESERVED9
[2];

1447 
__IO
 
uöt32_t
 
HCCHAR4
;

1448 
__IO
 
uöt32_t
 
HCSPLT4
;

1449 
__IO
 
uöt32_t
 
HCINT4
;

1450 
__IO
 
uöt32_t
 
HCINTMSK4
;

1451 
__IO
 
uöt32_t
 
HCTSIZ4
;

1452 
__IO
 
uöt32_t
 
HCDMA4
;

1453 
uöt32_t
 
RESERVED10
[2];

1454 
__IO
 
uöt32_t
 
HCCHAR5
;

1455 
__IO
 
uöt32_t
 
HCSPLT5
;

1456 
__IO
 
uöt32_t
 
HCINT5
;

1457 
__IO
 
uöt32_t
 
HCINTMSK5
;

1458 
__IO
 
uöt32_t
 
HCTSIZ5
;

1459 
__IO
 
uöt32_t
 
HCDMA5
;

1460 
uöt32_t
 
RESERVED11
[2];

1461 
__IO
 
uöt32_t
 
HCCHAR6
;

1462 
__IO
 
uöt32_t
 
HCSPLT6
;

1463 
__IO
 
uöt32_t
 
HCINT6
;

1464 
__IO
 
uöt32_t
 
HCINTMSK6
;

1465 
__IO
 
uöt32_t
 
HCTSIZ6
;

1466 
__IO
 
uöt32_t
 
HCDMA6
;

1467 
uöt32_t
 
RESERVED12
[2];

1468 
__IO
 
uöt32_t
 
HCCHAR7
;

1469 
__IO
 
uöt32_t
 
HCSPLT7
;

1470 
__IO
 
uöt32_t
 
HCINT7
;

1471 
__IO
 
uöt32_t
 
HCINTMSK7
;

1472 
__IO
 
uöt32_t
 
HCTSIZ7
;

1473 
__IO
 
uöt32_t
 
HCDMA7
;

1474 
uöt32_t
 
RESERVED13
[2];

1475 
__IO
 
uöt32_t
 
HCCHAR8
;

1476 
__IO
 
uöt32_t
 
HCSPLT8
;

1477 
__IO
 
uöt32_t
 
HCINT8
;

1478 
__IO
 
uöt32_t
 
HCINTMSK8
;

1479 
__IO
 
uöt32_t
 
HCTSIZ8
;

1480 
__IO
 
uöt32_t
 
HCDMA8
;

1481 
uöt32_t
 
RESERVED14
[2];

1482 
__IO
 
uöt32_t
 
HCCHAR9
;

1483 
__IO
 
uöt32_t
 
HCSPLT9
;

1484 
__IO
 
uöt32_t
 
HCINT9
;

1485 
__IO
 
uöt32_t
 
HCINTMSK9
;

1486 
__IO
 
uöt32_t
 
HCTSIZ9
;

1487 
__IO
 
uöt32_t
 
HCDMA9
;

1488 
uöt32_t
 
RESERVED15
[2];

1489 
__IO
 
uöt32_t
 
HCCHAR10
;

1490 
__IO
 
uöt32_t
 
HCSPLT10
;

1491 
__IO
 
uöt32_t
 
HCINT10
;

1492 
__IO
 
uöt32_t
 
HCINTMSK10
;

1493 
__IO
 
uöt32_t
 
HCTSIZ10
;

1494 
__IO
 
uöt32_t
 
HCDMA10
;

1495 
uöt32_t
 
RESERVED16
[2];

1496 
__IO
 
uöt32_t
 
HCCHAR11
;

1497 
__IO
 
uöt32_t
 
HCSPLT11
;

1498 
__IO
 
uöt32_t
 
HCINT11
;

1499 
__IO
 
uöt32_t
 
HCINTMSK11
;

1500 
__IO
 
uöt32_t
 
HCTSIZ11
;

1501 
__IO
 
uöt32_t
 
HCDMA11
;

1502 
uöt32_t
 
RESERVED17
[2];

1503 
__IO
 
uöt32_t
 
HCCHAR12
;

1504 
__IO
 
uöt32_t
 
HCSPLT12
;

1505 
__IO
 
uöt32_t
 
HCINT12
;

1506 
__IO
 
uöt32_t
 
HCINTMSK12
;

1507 
__IO
 
uöt32_t
 
HCTSIZ12
;

1508 
__IO
 
uöt32_t
 
HCDMA12
;

1509 
uöt32_t
 
RESERVED18
[2];

1510 
__IO
 
uöt32_t
 
HCCHAR13
;

1511 
__IO
 
uöt32_t
 
HCSPLT13
;

1512 
__IO
 
uöt32_t
 
HCINT13
;

1513 
__IO
 
uöt32_t
 
HCINTMSK13
;

1514 
__IO
 
uöt32_t
 
HCTSIZ13
;

1515 
__IO
 
uöt32_t
 
HCDMA13
;

1516 
uöt32_t
 
RESERVED19
[2];

1517 
__IO
 
uöt32_t
 
HCCHAR14
;

1518 
__IO
 
uöt32_t
 
HCSPLT14
;

1519 
__IO
 
uöt32_t
 
HCINT14
;

1520 
__IO
 
uöt32_t
 
HCINTMSK14
;

1521 
__IO
 
uöt32_t
 
HCTSIZ14
;

1522 
__IO
 
uöt32_t
 
HCDMA14
;

1523 
uöt32_t
 
RESERVED20
[2];

1524 
__IO
 
uöt32_t
 
HCCHAR15
;

1525 
__IO
 
uöt32_t
 
HCSPLT15
;

1526 
__IO
 
uöt32_t
 
HCINT15
;

1527 
__IO
 
uöt32_t
 
HCINTMSK15
;

1528 
__IO
 
uöt32_t
 
HCTSIZ15
;

1529 
__IO
 
uöt32_t
 
HCDMA15
;

1530 
uöt32_t
 
RESERVED21
[2];

1531 
uöt32_t
 
RESERVED22
[64];

1532 
__IO
 
uöt32_t
 
DCFG
;

1533 
__IO
 
uöt32_t
 
DCTL
;

1534 
__IO
 
uöt32_t
 
DSTS
;

1535 
uöt32_t
 
RESERVED23
;

1536 
__IO
 
uöt32_t
 
DIEPMSK
;

1537 
__IO
 
uöt32_t
 
DOEPMSK
;

1538 
__IO
 
uöt32_t
 
DAINT
;

1539 
__IO
 
uöt32_t
 
DAINTMSK
;

1540 
uöt32_t
 
RESERVED24
[2];

1541 
__IO
 
uöt32_t
 
DVBUSDIS
;

1542 
__IO
 
uöt32_t
 
DVBUSPULSE
;

1543 
uöt32_t
 
RESERVED25
;

1544 
__IO
 
uöt32_t
 
DIEPEMPMSK
;

1545 
__IO
 
uöt32_t
 
EACHHINT
;

1546 
__IO
 
uöt32_t
 
EACHHINTMSK
;

1547 
__IO
 
uöt32_t
 
DIEPEACHMSK1
;

1548 
uöt32_t
 
RESERVED26
[15];

1549 
__IO
 
uöt32_t
 
DOEPEACHMSK1
;

1550 
uöt32_t
 
RESERVED27
[31];

1551 
__IO
 
uöt32_t
 
DIEPCTL0
;

1552 
uöt32_t
 
RESERVED28
;

1553 
__IO
 
uöt32_t
 
DIEPINT0
;

1554 
uöt32_t
 
RESERVED29
;

1555 
__IO
 
uöt32_t
 
DIEPTSIZ0
;

1556 
__IO
 
uöt32_t
 
DIEPDMA0
;

1557 
__IO
 
uöt32_t
 
DTXFSTS0
;

1558 
uöt32_t
 
RESERVED30
;

1559 
__IO
 
uöt32_t
 
DIEPCTL1
;

1560 
uöt32_t
 
RESERVED31
;

1561 
__IO
 
uöt32_t
 
DIEPINT1
;

1562 
uöt32_t
 
RESERVED32
;

1563 
__IO
 
uöt32_t
 
DIEPTSIZ1
;

1564 
__IO
 
uöt32_t
 
DIEPDMA1
;

1565 
__IO
 
uöt32_t
 
DTXFSTS1
;

1566 
uöt32_t
 
RESERVED33
;

1567 
__IO
 
uöt32_t
 
DIEPCTL2
;

1568 
uöt32_t
 
RESERVED34
;

1569 
__IO
 
uöt32_t
 
DIEPINT2
;

1570 
uöt32_t
 
RESERVED35
;

1571 
__IO
 
uöt32_t
 
DIEPTSIZ2
;

1572 
__IO
 
uöt32_t
 
DIEPDMA2
;

1573 
__IO
 
uöt32_t
 
DTXFSTS2
;

1574 
uöt32_t
 
RESERVED36
;

1575 
__IO
 
uöt32_t
 
DIEPCTL3
;

1576 
uöt32_t
 
RESERVED37
;

1577 
__IO
 
uöt32_t
 
DIEPINT3
;

1578 
uöt32_t
 
RESERVED38
;

1579 
__IO
 
uöt32_t
 
DIEPTSIZ3
;

1580 
__IO
 
uöt32_t
 
DIEPDMA3
;

1581 
__IO
 
uöt32_t
 
DTXFSTS3
;

1582 
uöt32_t
 
RESERVED39
;

1583 
__IO
 
uöt32_t
 
DIEPCTL4
;

1584 
uöt32_t
 
RESERVED40
;

1585 
__IO
 
uöt32_t
 
DIEPINT4
;

1586 
uöt32_t
 
RESERVED41
;

1587 
__IO
 
uöt32_t
 
DIEPTSIZ4
;

1588 
__IO
 
uöt32_t
 
DIEPDMA4
;

1589 
__IO
 
uöt32_t
 
DTXFSTS4
;

1590 
uöt32_t
 
RESERVED42
;

1591 
__IO
 
uöt32_t
 
DIEPCTL5
;

1592 
uöt32_t
 
RESERVED43
;

1593 
__IO
 
uöt32_t
 
DIEPINT5
;

1594 
uöt32_t
 
RESERVED44
;

1595 
__IO
 
uöt32_t
 
DIEPTSIZ5
;

1596 
__IO
 
uöt32_t
 
DIEPDMA5
;

1597 
__IO
 
uöt32_t
 
DTXFSTS5
;

1598 
uöt32_t
 
RESERVED45
;

1599 
__IO
 
uöt32_t
 
DIEPCTL6
;

1600 
uöt32_t
 
RESERVED46
;

1601 
__IO
 
uöt32_t
 
DIEPINT6
;

1602 
uöt32_t
 
RESERVED47
;

1603 
__IO
 
uöt32_t
 
DIEPTSIZ6
;

1604 
__IO
 
uöt32_t
 
DIEPDMA6
;

1605 
__IO
 
uöt32_t
 
DTXFSTS6
;

1606 
uöt32_t
 
RESERVED48
;

1607 
__IO
 
uöt32_t
 
DIEPCTL7
;

1608 
uöt32_t
 
RESERVED49
;

1609 
__IO
 
uöt32_t
 
DIEPINT7
;

1610 
uöt32_t
 
RESERVED50
;

1611 
__IO
 
uöt32_t
 
DIEPTSIZ7
;

1612 
__IO
 
uöt32_t
 
DIEPDMA7
;

1613 
__IO
 
uöt32_t
 
DTXFSTS7
;

1614 
uöt32_t
 
RESERVED51
;

1615 
__IO
 
uöt32_t
 
DIEPCTL8
;

1616 
uöt32_t
 
RESERVED52
;

1617 
__IO
 
uöt32_t
 
DIEPINT8
;

1618 
uöt32_t
 
RESERVED53
;

1619 
__IO
 
uöt32_t
 
DIEPTSIZ8
;

1620 
__IO
 
uöt32_t
 
DIEPDMA8
;

1621 
__IO
 
uöt32_t
 
DTXFSTS8
;

1622 
uöt32_t
 
RESERVED54
;

1623 
__IO
 
uöt32_t
 
DIEPCTL9
;

1624 
uöt32_t
 
RESERVED55
;

1625 
__IO
 
uöt32_t
 
DIEPINT9
;

1626 
uöt32_t
 
RESERVED56
;

1627 
__IO
 
uöt32_t
 
DIEPTSIZ9
;

1628 
__IO
 
uöt32_t
 
DIEPDMA9
;

1629 
__IO
 
uöt32_t
 
DTXFSTS9
;

1630 
uöt32_t
 
RESERVED57
;

1631 
__IO
 
uöt32_t
 
DIEPCTL10
;

1632 
uöt32_t
 
RESERVED58
;

1633 
__IO
 
uöt32_t
 
DIEPINT10
;

1634 
uöt32_t
 
RESERVED59
;

1635 
__IO
 
uöt32_t
 
DIEPTSIZ10
;

1636 
__IO
 
uöt32_t
 
DIEPDMA10
;

1637 
__IO
 
uöt32_t
 
DTXFSTS10
;

1638 
uöt32_t
 
RESERVED60
;

1639 
__IO
 
uöt32_t
 
DIEPCTL11
;

1640 
uöt32_t
 
RESERVED61
;

1641 
__IO
 
uöt32_t
 
DIEPINT11
;

1642 
uöt32_t
 
RESERVED62
;

1643 
__IO
 
uöt32_t
 
DIEPTSIZ11
;

1644 
__IO
 
uöt32_t
 
DIEPDMA11
;

1645 
__IO
 
uöt32_t
 
DTXFSTS11
;

1646 
uöt32_t
 
RESERVED63
;

1647 
__IO
 
uöt32_t
 
DIEPCTL12
;

1648 
uöt32_t
 
RESERVED64
;

1649 
__IO
 
uöt32_t
 
DIEPINT12
;

1650 
uöt32_t
 
RESERVED65
;

1651 
__IO
 
uöt32_t
 
DIEPTSIZ12
;

1652 
__IO
 
uöt32_t
 
DIEPDMA12
;

1653 
__IO
 
uöt32_t
 
DTXFSTS12
;

1654 
uöt32_t
 
RESERVED66
;

1655 
__IO
 
uöt32_t
 
DIEPCTL13
;

1656 
uöt32_t
 
RESERVED67
;

1657 
__IO
 
uöt32_t
 
DIEPINT13
;

1658 
uöt32_t
 
RESERVED68
;

1659 
__IO
 
uöt32_t
 
DIEPTSIZ13
;

1660 
__IO
 
uöt32_t
 
DIEPDMA13
;

1661 
__IO
 
uöt32_t
 
DTXFSTS13
;

1662 
uöt32_t
 
RESERVED69
;

1663 
__IO
 
uöt32_t
 
DIEPCTL14
;

1664 
uöt32_t
 
RESERVED70
;

1665 
__IO
 
uöt32_t
 
DIEPINT14
;

1666 
uöt32_t
 
RESERVED71
;

1667 
__IO
 
uöt32_t
 
DIEPTSIZ14
;

1668 
__IO
 
uöt32_t
 
DIEPDMA14
;

1669 
__IO
 
uöt32_t
 
DTXFSTS14
;

1670 
uöt32_t
 
RESERVED72
;

1671 
__IO
 
uöt32_t
 
DIEPCTL15
;

1672 
uöt32_t
 
RESERVED73
;

1673 
__IO
 
uöt32_t
 
DIEPINT15
;

1674 
uöt32_t
 
RESERVED74
;

1675 
__IO
 
uöt32_t
 
DIEPTSIZ15
;

1676 
__IO
 
uöt32_t
 
DIEPDMA15
;

1677 
__IO
 
uöt32_t
 
DTXFSTS15
;

1678 
uöt32_t
 
RESERVED75
;

1679 
__IO
 
uöt32_t
 
DOEPCTL0
;

1680 
uöt32_t
 
RESERVED76
;

1681 
__IO
 
uöt32_t
 
DOEPINT0
;

1682 
uöt32_t
 
RESERVED77
;

1683 
__IO
 
uöt32_t
 
DOEPTSIZ0
;

1684 
__IO
 
uöt32_t
 
DOEPDMAB0
;

1685 
uöt32_t
 
RESERVED78
[2];

1686 
__IO
 
uöt32_t
 
DOEPCTL1
;

1687 
uöt32_t
 
RESERVED79
;

1688 
__IO
 
uöt32_t
 
DOEPINT1
;

1689 
uöt32_t
 
RESERVED80
;

1690 
__IO
 
uöt32_t
 
DOEPTSIZ1
;

1691 
__IO
 
uöt32_t
 
DOEPDMAB1
;

1692 
uöt32_t
 
RESERVED81
[2];

1693 
__IO
 
uöt32_t
 
DOEPCTL2
;

1694 
uöt32_t
 
RESERVED82
;

1695 
__IO
 
uöt32_t
 
DOEPINT2
;

1696 
uöt32_t
 
RESERVED83
;

1697 
__IO
 
uöt32_t
 
DOEPTSIZ2
;

1698 
__IO
 
uöt32_t
 
DOEPDMAB2
;

1699 
uöt32_t
 
RESERVED84
[2];

1700 
__IO
 
uöt32_t
 
DOEPCTL3
;

1701 
uöt32_t
 
RESERVED85
;

1702 
__IO
 
uöt32_t
 
DOEPINT3
;

1703 
uöt32_t
 
RESERVED86
;

1704 
__IO
 
uöt32_t
 
DOEPTSIZ3
;

1705 
__IO
 
uöt32_t
 
DOEPDMAB3
;

1706 
uöt32_t
 
RESERVED87
[2];

1707 
__IO
 
uöt32_t
 
DOEPCTL4
;

1708 
uöt32_t
 
RESERVED88
;

1709 
__IO
 
uöt32_t
 
DOEPINT4
;

1710 
uöt32_t
 
RESERVED89
;

1711 
__IO
 
uöt32_t
 
DOEPTSIZ4
;

1712 
__IO
 
uöt32_t
 
DOEPDMAB4
;

1713 
uöt32_t
 
RESERVED90
[2];

1714 
__IO
 
uöt32_t
 
DOEPCTL5
;

1715 
uöt32_t
 
RESERVED91
;

1716 
__IO
 
uöt32_t
 
DOEPINT5
;

1717 
uöt32_t
 
RESERVED92
;

1718 
__IO
 
uöt32_t
 
DOEPTSIZ5
;

1719 
__IO
 
uöt32_t
 
DOEPDMAB5
;

1720 
uöt32_t
 
RESERVED93
[2];

1721 
__IO
 
uöt32_t
 
DOEPCTL6
;

1722 
uöt32_t
 
RESERVED94
;

1723 
__IO
 
uöt32_t
 
DOEPINT6
;

1724 
uöt32_t
 
RESERVED95
;

1725 
__IO
 
uöt32_t
 
DOEPTSIZ6
;

1726 
__IO
 
uöt32_t
 
DOEPDMAB6
;

1727 
uöt32_t
 
RESERVED96
[2];

1728 
__IO
 
uöt32_t
 
DOEPCTL7
;

1729 
uöt32_t
 
RESERVED97
;

1730 
__IO
 
uöt32_t
 
DOEPINT7
;

1731 
uöt32_t
 
RESERVED98
;

1732 
__IO
 
uöt32_t
 
DOEPTSIZ7
;

1733 
__IO
 
uöt32_t
 
DOEPDMAB7
;

1734 
uöt32_t
 
RESERVED99
[2];

1735 
__IO
 
uöt32_t
 
DOEPCTL8
;

1736 
uöt32_t
 
RESERVED100
;

1737 
__IO
 
uöt32_t
 
DOEPINT8
;

1738 
uöt32_t
 
RESERVED101
;

1739 
__IO
 
uöt32_t
 
DOEPTSIZ8
;

1740 
__IO
 
uöt32_t
 
DOEPDMAB8
;

1741 
uöt32_t
 
RESERVED102
[2];

1742 
__IO
 
uöt32_t
 
DOEPCTL9
;

1743 
uöt32_t
 
RESERVED103
;

1744 
__IO
 
uöt32_t
 
DOEPINT9
;

1745 
uöt32_t
 
RESERVED104
;

1746 
__IO
 
uöt32_t
 
DOEPTSIZ9
;

1747 
__IO
 
uöt32_t
 
DOEPDMAB9
;

1748 
uöt32_t
 
RESERVED105
[2];

1749 
__IO
 
uöt32_t
 
DOEPCTL10
;

1750 
uöt32_t
 
RESERVED106
;

1751 
__IO
 
uöt32_t
 
DOEPINT10
;

1752 
uöt32_t
 
RESERVED107
;

1753 
__IO
 
uöt32_t
 
DOEPTSIZ10
;

1754 
__IO
 
uöt32_t
 
DOEPDMAB10
;

1755 
uöt32_t
 
RESERVED108
[2];

1756 
__IO
 
uöt32_t
 
DOEPCTL11
;

1757 
uöt32_t
 
RESERVED109
;

1758 
__IO
 
uöt32_t
 
DOEPINT11
;

1759 
uöt32_t
 
RESERVED110
;

1760 
__IO
 
uöt32_t
 
DOEPTSIZ11
;

1761 
__IO
 
uöt32_t
 
DOEPDMAB11
;

1762 
uöt32_t
 
RESERVED111
[2];

1763 
__IO
 
uöt32_t
 
DOEPCTL12
;

1764 
uöt32_t
 
RESERVED112
;

1765 
__IO
 
uöt32_t
 
DOEPINT12
;

1766 
uöt32_t
 
RESERVED113
;

1767 
__IO
 
uöt32_t
 
DOEPTSIZ12
;

1768 
__IO
 
uöt32_t
 
DOEPDMAB12
;

1769 
uöt32_t
 
RESERVED114
[2];

1770 
__IO
 
uöt32_t
 
DOEPCTL13
;

1771 
uöt32_t
 
RESERVED115
;

1772 
__IO
 
uöt32_t
 
DOEPINT13
;

1773 
uöt32_t
 
RESERVED116
;

1774 
__IO
 
uöt32_t
 
DOEPTSIZ13
;

1775 
__IO
 
uöt32_t
 
DOEPDMAB13
;

1776 
uöt32_t
 
RESERVED117
[2];

1777 
__IO
 
uöt32_t
 
DOEPCTL14
;

1778 
uöt32_t
 
RESERVED118
;

1779 
__IO
 
uöt32_t
 
DOEPINT14
;

1780 
uöt32_t
 
RESERVED119
;

1781 
__IO
 
uöt32_t
 
DOEPTSIZ14
;

1782 
__IO
 
uöt32_t
 
DOEPDMAB14
;

1783 
uöt32_t
 
RESERVED120
[2];

1784 
__IO
 
uöt32_t
 
DOEPCTL15
;

1785 
uöt32_t
 
RESERVED121
;

1786 
__IO
 
uöt32_t
 
DOEPINT15
;

1787 
uöt32_t
 
RESERVED122
;

1788 
__IO
 
uöt32_t
 
DOEPTSIZ15
;

1789 
__IO
 
uöt32_t
 
DOEPDMAB15
;

1790 
uöt32_t
 
RESERVED123
[2];

1791 
uöt32_t
 
RESERVED143
[64];

1792 
__IO
 
uöt32_t
 
PCGCCTL
;

1793 } 
	tOTG_HS_Ty≥Def
;

1802 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1803 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1804 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1805 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1806 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1807 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1808 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1810 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1811 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1812 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1813 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1814 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1817 
	#SRAM_BASE
 
SRAM1_BASE


	)

1818 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1822 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1823 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1824 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1825 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1828 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1829 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1830 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1831 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1832 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1833 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1834 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1835 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1836 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1837 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1838 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1839 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1840 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1841 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1842 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1843 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1844 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1845 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1846 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1847 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1848 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1849 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1850 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1851 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1852 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1853 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1854 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1857 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1858 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1859 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1860 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1861 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1862 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1863 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1864 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1865 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1866 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1867 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1868 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1869 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1870 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1871 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1874 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1875 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1876 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1877 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1878 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1879 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1880 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1881 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1882 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1883 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1884 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1885 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1886 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1887 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1888 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1889 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1890 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1891 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1892 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1893 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1894 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1895 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1896 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1897 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1898 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1899 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1900 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1901 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1902 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1903 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1904 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1905 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1906 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1907 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1908 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1909 
	#OTG_HS_BASE
 (
AHB1PERIPH_BASE
 + 0x20000)

	)

1910 
	#OTG_HS_DFIFO0_BASE
 (
OTG_HS_BASE
 + 0x01000)

	)

1911 
	#OTG_HS_DFIFO1_BASE
 (
OTG_HS_BASE
 + 0x02000)

	)

1912 
	#OTG_HS_DFIFO2_BASE
 (
OTG_HS_BASE
 + 0x03000)

	)

1913 
	#OTG_HS_DFIFO3_BASE
 (
OTG_HS_BASE
 + 0x04000)

	)

1914 
	#OTG_HS_DFIFO4_BASE
 (
OTG_HS_BASE
 + 0x05000)

	)

1915 
	#OTG_HS_DFIFO5_BASE
 (
OTG_HS_BASE
 + 0x06000)

	)

1916 
	#OTG_HS_DFIFO6_BASE
 (
OTG_HS_BASE
 + 0x07000)

	)

1917 
	#OTG_HS_DFIFO7_BASE
 (
OTG_HS_BASE
 + 0x08000)

	)

1918 
	#OTG_HS_DFIFO8_BASE
 (
OTG_HS_BASE
 + 0x09000)

	)

1919 
	#OTG_HS_DFIFO9_BASE
 (
OTG_HS_BASE
 + 0x0A000)

	)

1920 
	#OTG_HS_DFIFO10_BASE
 (
OTG_HS_BASE
 + 0x0B000)

	)

1921 
	#OTG_HS_DFIFO11_BASE
 (
OTG_HS_BASE
 + 0x0C000)

	)

1922 
	#OTG_HS_DFIFO12_BASE
 (
OTG_HS_BASE
 + 0x0D000)

	)

1923 
	#OTG_HS_DFIFO13_BASE
 (
OTG_HS_BASE
 + 0x0E000)

	)

1924 
	#OTG_HS_DFIFO14_BASE
 (
OTG_HS_BASE
 + 0x0F000)

	)

1925 
	#OTG_HS_DFIFO15_BASE
 (
OTG_HS_BASE
 + 0x10000)

	)

1928 
	#OTG_FS_BASE
 (
AHB2PERIPH_BASE
 + 0x00000)

	)

1929 
	#OTG_FS_DFIFO0_BASE
 (
OTG_FS_BASE
 + 0x01000)

	)

1930 
	#OTG_FS_DFIFO1_BASE
 (
OTG_FS_BASE
 + 0x02000)

	)

1931 
	#OTG_FS_DFIFO2_BASE
 (
OTG_FS_BASE
 + 0x03000)

	)

1932 
	#OTG_FS_DFIFO3_BASE
 (
OTG_FS_BASE
 + 0x04000)

	)

1933 
	#OTG_FS_DFIFO4_BASE
 (
OTG_FS_BASE
 + 0x05000)

	)

1934 
	#OTG_FS_DFIFO5_BASE
 (
OTG_FS_BASE
 + 0x06000)

	)

1935 
	#OTG_FS_DFIFO6_BASE
 (
OTG_FS_BASE
 + 0x07000)

	)

1936 
	#OTG_FS_DFIFO7_BASE
 (
OTG_FS_BASE
 + 0x08000)

	)

1937 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1938 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1939 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1940 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1943 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1944 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1945 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1946 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1947 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1950 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1959 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1960 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1961 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1962 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1963 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1964 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1965 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1966 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1967 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1968 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1969 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1970 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1971 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1972 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1973 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1974 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1975 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1976 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1977 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1978 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1979 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1980 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1981 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1982 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1983 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1984 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1985 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1986 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1987 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1988 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1989 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1990 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1991 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1992 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1993 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1994 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1995 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1996 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1997 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1998 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1999 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

2000 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

2001 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

2002 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

2003 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

2004 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

2005 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

2006 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

2007 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

2008 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

2009 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

2010 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

2011 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

2012 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

2013 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

2014 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

2015 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

2016 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

2017 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

2018 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

2019 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

2020 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

2021 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

2022 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

2023 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

2024 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

2025 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

2026 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

2027 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

2028 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

2029 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

2030 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

2031 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

2032 
	#OTG_HS
 ((
OTG_HS_Ty≥Def
 *Ë
OTG_HS_BASE
)

	)

2033 
	#OTG_HS_DFIFO0
 (((
U32
 *Ë
OTG_HS_DFIFO0_BASE
Ë)

	)

2034 
	#OTG_HS_DFIFO1
 (((
U32
 *Ë
OTG_HS_DFIFO1_BASE
Ë)

	)

2035 
	#OTG_HS_DFIFO2
 (((
U32
 *Ë
OTG_HS_DFIFO2_BASE
Ë)

	)

2036 
	#OTG_HS_DFIFO3
 (((
U32
 *Ë
OTG_HS_DFIFO3_BASE
Ë)

	)

2037 
	#OTG_HS_DFIFO4
 (((
U32
 *Ë
OTG_HS_DFIFO4_BASE
Ë)

	)

2038 
	#OTG_HS_DFIFO5
 (((
U32
 *Ë
OTG_HS_DFIFO5_BASE
Ë)

	)

2039 
	#OTG_HS_DFIFO6
 (((
U32
 *Ë
OTG_HS_DFIFO6_BASE
Ë)

	)

2040 
	#OTG_HS_DFIFO7
 (((
U32
 *Ë
OTG_HS_DFIFO7_BASE
Ë)

	)

2041 
	#OTG_HS_DFIFO8
 (((
U32
 *Ë
OTG_HS_DFIFO8_BASE
Ë)

	)

2042 
	#OTG_HS_DFIFO9
 (((
U32
 *Ë
OTG_HS_DFIFO9_BASE
Ë)

	)

2043 
	#OTG_HS_DFIFO10
 (((
U32
 *Ë
OTG_HS_DFIFO10_BASE
Ë)

	)

2044 
	#OTG_HS_DFIFO11
 (((
U32
 *Ë
OTG_HS_DFIFO11_BASE
Ë)

	)

2045 
	#OTG_HS_DFIFO12
 (((
U32
 *Ë
OTG_HS_DFIFO12_BASE
Ë)

	)

2046 
	#OTG_HS_DFIFO13
 (((
U32
 *Ë
OTG_HS_DFIFO13_BASE
Ë)

	)

2047 
	#OTG_HS_DFIFO14
 (((
U32
 *Ë
OTG_HS_DFIFO14_BASE
Ë)

	)

2048 
	#OTG_HS_DFIFO15
 (((
U32
 *Ë
OTG_HS_DFIFO15_BASE
Ë)

	)

2049 
	#OTG_FS
 ((
OTG_FS_Ty≥Def
 *Ë
OTG_FS_BASE
)

	)

2050 
	#OTG_FS_DFIFO0
 (((
U32
 *Ë
OTG_FS_DFIFO0_BASE
Ë)

	)

2051 
	#OTG_FS_DFIFO1
 (((
U32
 *Ë
OTG_FS_DFIFO1_BASE
Ë)

	)

2052 
	#OTG_FS_DFIFO2
 (((
U32
 *Ë
OTG_FS_DFIFO2_BASE
Ë)

	)

2053 
	#OTG_FS_DFIFO3
 (((
U32
 *Ë
OTG_FS_DFIFO3_BASE
Ë)

	)

2054 
	#OTG_FS_DFIFO4
 (((
U32
 *Ë
OTG_FS_DFIFO4_BASE
Ë)

	)

2055 
	#OTG_FS_DFIFO5
 (((
U32
 *Ë
OTG_FS_DFIFO5_BASE
Ë)

	)

2056 
	#OTG_FS_DFIFO6
 (((
U32
 *Ë
OTG_FS_DFIFO6_BASE
Ë)

	)

2057 
	#OTG_FS_DFIFO7
 (((
U32
 *Ë
OTG_FS_DFIFO7_BASE
Ë)

	)

2058 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

2059 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

2060 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

2061 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

2062 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

2063 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

2064 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

2065 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

2066 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

2067 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

2091 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

2092 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

2093 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

2094 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

2095 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

2096 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

2099 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

2100 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

2101 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

2102 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

2103 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

2104 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

2105 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

2106 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

2107 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

2108 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

2109 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

2110 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

2111 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

2112 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

2113 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

2114 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

2115 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

2116 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

2117 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

2118 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

2119 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

2120 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

2121 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

2122 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

2125 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

2126 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

2127 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

2128 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

2129 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

2130 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

2131 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

2132 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

2133 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

2134 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

2135 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

2136 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

2137 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

2138 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

2139 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

2140 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

2141 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

2142 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

2143 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

2144 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

2145 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

2146 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

2147 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

2148 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

2151 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

2152 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

2153 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

2154 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

2155 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

2156 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

2157 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

2158 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

2159 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

2160 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

2161 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

2162 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

2163 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

2164 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

2165 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

2166 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

2167 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

2168 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

2169 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

2170 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

2171 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

2172 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

2173 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

2174 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

2175 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

2176 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

2177 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

2178 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

2179 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

2180 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

2181 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

2182 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

2183 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

2184 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

2185 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

2186 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

2189 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

2190 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

2191 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

2192 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

2193 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

2194 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

2195 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

2196 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

2197 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

2198 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

2199 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

2200 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

2201 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

2202 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

2203 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

2204 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

2205 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

2206 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

2207 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

2208 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

2209 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

2210 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

2211 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

2212 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

2213 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

2214 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

2215 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

2216 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

2217 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

2218 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

2219 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

2220 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

2221 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

2222 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

2223 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

2224 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

2225 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

2226 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

2227 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

2228 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

2231 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

2234 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

2237 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

2240 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

2243 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

2246 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

2249 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

2250 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

2251 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

2252 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

2253 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

2254 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

2255 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

2256 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

2257 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

2258 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

2259 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

2260 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

2261 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

2262 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

2263 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

2264 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

2265 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

2266 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

2267 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

2268 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

2269 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

2270 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

2271 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

2272 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

2273 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

2274 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

2275 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

2276 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

2277 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

2280 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

2281 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

2282 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

2283 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

2284 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

2285 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

2286 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

2287 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

2288 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

2289 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

2290 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

2291 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

2292 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

2293 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

2294 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

2295 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

2296 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

2297 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

2298 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

2299 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

2300 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

2301 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

2302 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

2303 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

2304 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

2305 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

2306 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

2307 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

2308 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

2309 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

2310 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

2311 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

2312 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

2313 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

2314 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

2315 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

2318 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

2319 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2320 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2321 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2322 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2323 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2324 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2325 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2326 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2327 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2328 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2329 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2330 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2331 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2332 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2333 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2334 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2335 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2336 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2337 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2338 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2339 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2340 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2341 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2342 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

2343 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

2344 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

2345 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

2346 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

2347 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

2348 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

2349 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2350 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2351 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2352 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2353 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2356 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2357 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2358 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2359 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2360 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2361 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2362 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2363 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2364 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2365 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2366 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2367 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2368 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2369 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2370 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2371 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2372 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2373 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2374 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2375 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2376 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2377 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2378 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2379 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2380 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2381 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2382 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2385 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2388 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2391 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2394 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2397 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2398 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2401 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2402 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2403 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2404 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2405 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2406 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

2407 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2408 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2409 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2410 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2411 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2412 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

2413 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2414 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2415 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2416 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2417 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2418 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

2421 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2422 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2423 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2424 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2425 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2426 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2427 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2428 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2429 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2430 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2431 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2432 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2433 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2434 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2435 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2436 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2437 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2438 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2439 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2440 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2443 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2444 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2453 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2454 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2455 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2456 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2457 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2458 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2459 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2460 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2461 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2464 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2465 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2466 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2467 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2468 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2469 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2470 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2471 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2472 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2475 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2476 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2477 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2478 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2479 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2480 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2481 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2482 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2483 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2484 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2485 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2486 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2487 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2488 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2489 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2490 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2492 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2493 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2494 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2495 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2497 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2498 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2499 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2500 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2503 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2504 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2505 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2506 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2509 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2510 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2511 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2512 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2515 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2516 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2517 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2518 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2519 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2520 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2521 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2522 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2523 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2524 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2525 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2526 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2527 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2528 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2531 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2532 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2533 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2535 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2536 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2537 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2538 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2540 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2541 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2544 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2545 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2546 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2547 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2548 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2549 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2553 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2554 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2555 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2556 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2557 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2560 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2561 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2562 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2565 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2566 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2567 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2568 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2571 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2572 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2573 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2574 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2577 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2578 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2579 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2580 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2581 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2584 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2585 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2586 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2589 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2590 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2591 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2592 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2595 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2596 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2597 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2598 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2601 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2602 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2603 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2604 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2605 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2608 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2609 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2610 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2613 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2614 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2615 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2616 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2619 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2620 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2621 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2622 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2625 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2626 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2627 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2628 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2631 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2632 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2633 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2636 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2637 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2638 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2639 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2642 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2643 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2644 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2645 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2648 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2649 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2650 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2651 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2654 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2655 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2656 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2659 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2660 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2661 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2662 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2665 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2666 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2667 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2668 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2672 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2675 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2676 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2677 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2678 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2679 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2680 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2681 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2682 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2683 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2684 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2685 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2686 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2687 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2688 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2689 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2692 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2693 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2694 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2695 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2696 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2697 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2698 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2699 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2700 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2701 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2702 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2703 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2704 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2705 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2706 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2709 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2710 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2711 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2712 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2713 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2714 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2715 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2716 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2717 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2718 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2719 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2720 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2721 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2722 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2723 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2726 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2727 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2728 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2729 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2730 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2731 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2732 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2733 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2734 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2735 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2736 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2737 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2738 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2739 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2740 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2743 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2744 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2745 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2746 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2747 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2748 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2749 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2750 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2751 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2752 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2753 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2754 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2755 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2756 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2757 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2758 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2759 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2760 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2761 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2762 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2763 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2764 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2765 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2766 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2767 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2768 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2769 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2770 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2771 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2772 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2773 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2774 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2777 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2778 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2779 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2780 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2781 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2782 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2783 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2784 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2785 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2786 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2787 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2788 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2789 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2790 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2791 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2792 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2793 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2794 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2795 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2796 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2797 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2798 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2799 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2800 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2801 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2802 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2803 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2804 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2805 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2806 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2807 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2808 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2811 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2812 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2813 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2814 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2815 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2816 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2817 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2818 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2819 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2820 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2821 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2822 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2823 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2824 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2825 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2826 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2827 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2828 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2829 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2830 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2831 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2832 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2833 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2834 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2835 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2836 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2837 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2838 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2839 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2840 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2841 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2842 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2845 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2846 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2847 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2848 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2849 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2850 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2851 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2852 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2853 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2854 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2855 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2856 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2857 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2858 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2859 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2860 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2861 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2862 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2863 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2864 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2865 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2866 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2867 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2868 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2869 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2870 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2871 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2872 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2873 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2874 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2875 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2876 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2879 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2880 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2881 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2882 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2883 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2884 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2885 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2886 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2887 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2888 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2889 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2890 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2891 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2892 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2893 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2894 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2895 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2896 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2897 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2898 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2899 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2900 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2901 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2902 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2903 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2904 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2905 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2906 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2907 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2908 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2909 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2910 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2913 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2914 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2915 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2916 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2917 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2918 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2921 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2922 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2923 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2924 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2925 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2926 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2927 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2928 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2929 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2930 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2931 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2932 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2933 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2934 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2935 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2936 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2937 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2938 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2939 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2940 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2941 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2942 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2943 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2944 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2947 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2948 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2949 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2950 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2951 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2952 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2953 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2954 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2955 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2956 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2957 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2958 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2959 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2960 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2961 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2962 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2963 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2964 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2965 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2966 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2967 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2968 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2969 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2970 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2971 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2972 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2973 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2974 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2975 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2976 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2977 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2978 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2981 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2982 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2983 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2984 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2985 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2986 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2987 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2988 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2989 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2990 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2991 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2992 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2993 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2994 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2995 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2996 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2997 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2998 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2999 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3000 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3001 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3002 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3003 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3004 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3005 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3006 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3007 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3008 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3009 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3010 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3011 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3012 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3015 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3016 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3017 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3018 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3019 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3020 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3021 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3022 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3023 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3024 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3025 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3026 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3027 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3028 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3029 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3030 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3031 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3032 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3033 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3034 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3035 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3036 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3037 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3038 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3039 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3040 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3041 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3042 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3043 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3044 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3045 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3046 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3049 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3050 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3051 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3052 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3053 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3054 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3055 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3056 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3057 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3058 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3059 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3060 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3061 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3062 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3063 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3064 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3065 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3066 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3067 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3068 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3069 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3070 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3071 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3072 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3073 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3074 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3075 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3076 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3077 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3078 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3079 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3080 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3083 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3084 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3085 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3086 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3087 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3088 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3089 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3090 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3091 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3092 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3093 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3094 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3095 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3096 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3097 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3098 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3099 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3100 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3101 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3102 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3103 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3104 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3105 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3106 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3107 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3108 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3109 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3110 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3111 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3112 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3113 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3114 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3117 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3118 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3119 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3120 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3121 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3122 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3123 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3124 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3125 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3126 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3127 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3128 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3129 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3130 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3131 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3132 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3133 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3134 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3135 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3136 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3137 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3138 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3139 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3140 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3141 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3142 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3143 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3144 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3145 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3146 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3147 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3148 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3151 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3152 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3153 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3154 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3155 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3156 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3157 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3158 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3159 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3160 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3161 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3162 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3163 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3164 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3165 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3166 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3167 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3168 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3169 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3170 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3171 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3172 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3173 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3174 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3175 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3176 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3177 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3178 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3179 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3180 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3181 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3182 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3185 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3186 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3187 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3188 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3189 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3190 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3191 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3192 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3193 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3194 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3195 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3196 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3197 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3198 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3199 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3200 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3201 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3202 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3203 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3204 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3205 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3206 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3207 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3208 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3209 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3210 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3211 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3212 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3213 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3214 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3215 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3216 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3219 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3220 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3221 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3222 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3223 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3224 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3225 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3226 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3227 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3228 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3229 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3230 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3231 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3232 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3233 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3234 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3235 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3236 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3237 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3238 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3239 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3240 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3241 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3242 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3243 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3244 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3245 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3246 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3247 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3248 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3249 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3250 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3253 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3254 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3255 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3256 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3257 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3258 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3259 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3260 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3261 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3262 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3263 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3264 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3265 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3266 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3267 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3268 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3269 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3270 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3271 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3272 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3273 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3274 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3275 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3276 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3277 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3278 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3279 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3280 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3281 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3282 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3283 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3284 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3287 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3288 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3289 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3290 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3291 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3292 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3293 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3294 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3295 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3296 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3297 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3298 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3299 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3300 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3301 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3302 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3303 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3304 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3305 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3306 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3307 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3308 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3309 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3310 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3311 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3312 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3313 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3314 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3315 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3316 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3317 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3318 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3321 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3322 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3323 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3324 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3325 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3326 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3327 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3328 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3329 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3330 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3331 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3332 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3333 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3334 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3335 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3336 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3337 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3338 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3339 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3340 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3341 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3342 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3343 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3344 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3345 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3346 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3347 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3348 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3349 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3350 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3351 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3352 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3355 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3356 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3357 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3358 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3359 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3360 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3361 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3362 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3363 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3364 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3365 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3366 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3367 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3368 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3369 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3370 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3371 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3372 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3373 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3374 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3375 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3376 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3377 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3378 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3379 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3380 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3381 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3382 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3383 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3384 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3385 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3386 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3389 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3390 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3391 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3392 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3393 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3394 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3395 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3396 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3397 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3398 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3399 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3400 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3401 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3402 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3403 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3404 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3405 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3406 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3407 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3408 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3409 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3410 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3411 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3412 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3413 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3414 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3415 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3416 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3417 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3418 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3419 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3420 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3423 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3424 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3425 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3426 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3427 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3428 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3429 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3430 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3431 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3432 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3433 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3434 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3435 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3436 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3437 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3438 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3439 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3440 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3441 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3442 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3443 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3444 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3445 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3446 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3447 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3448 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3449 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3450 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3451 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3452 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3453 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3454 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3457 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3458 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3459 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3460 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3461 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3462 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3463 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3464 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3465 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3466 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3467 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3468 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3469 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3470 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3471 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3472 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3473 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3474 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3475 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3476 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3477 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3478 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3479 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3480 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3481 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3482 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3483 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3484 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3485 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3486 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3487 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3488 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3491 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3492 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3493 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3494 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3495 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3496 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3497 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3498 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3499 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3500 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3501 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3502 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3503 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3504 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3505 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3506 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3507 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3508 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3509 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3510 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3511 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3512 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3513 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3514 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3515 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3516 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3517 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3518 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3519 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3520 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3521 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3522 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3525 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3526 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3527 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3528 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3529 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3530 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3531 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3532 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3533 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3534 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3535 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3536 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3537 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3538 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3539 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3540 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3541 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3542 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3543 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3544 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3545 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3546 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3547 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3548 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3549 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3550 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3551 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3552 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3553 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3554 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3555 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3556 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3559 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3560 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3561 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3562 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3563 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3564 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3565 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3566 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3567 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3568 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3569 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3570 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3571 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3572 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3573 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3574 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3575 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3576 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3577 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3578 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3579 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3580 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3581 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3582 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3583 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3584 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3585 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3586 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3587 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3588 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3589 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3590 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3593 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3594 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3595 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3596 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3597 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3598 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3599 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3600 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3601 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3602 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3603 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3604 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3605 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3606 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3607 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3608 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3609 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3610 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3611 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3612 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3613 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3614 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3615 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3616 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3617 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3618 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3619 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3620 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3621 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3622 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3623 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3624 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3627 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3628 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3629 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3630 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3631 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3632 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3633 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3634 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3635 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3636 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3637 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3638 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3639 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3640 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3641 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3642 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3643 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3644 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3645 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3646 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3647 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3648 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3649 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3650 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3651 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3652 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3653 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3654 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3655 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3656 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3657 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3658 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3661 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3662 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3663 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3664 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3665 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3666 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3667 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3668 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3669 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3670 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3671 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3672 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3673 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3674 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3675 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3676 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3677 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3678 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3679 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3680 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3681 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3682 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3683 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3684 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3685 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3686 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3687 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3688 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3689 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3690 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3691 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3692 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3700 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3704 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3708 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

3716 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

3718 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00000038)

	)

3719 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

3720 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

3721 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

3722 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

3723 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

3724 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

3725 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

3726 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

3727 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

3728 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

3729 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

3731 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

3732 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

3733 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

3734 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

3735 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3736 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3737 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

3738 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

3740 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

3741 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

3742 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

3743 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

3744 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

3746 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

3747 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

3749 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

3750 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

3752 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

3753 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

3755 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

3756 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

3764 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3765 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3766 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3768 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3769 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3770 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3771 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3773 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3774 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3775 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3777 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3778 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3779 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3780 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3781 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3783 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3784 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3785 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3786 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3788 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3789 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3790 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3791 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3793 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3794 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3795 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3797 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3798 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3799 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3800 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3801 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3803 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3806 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3807 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3810 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3813 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3816 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3819 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3822 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3825 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3828 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3829 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3832 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3833 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3836 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3837 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3840 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3843 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3846 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3847 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3861 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3862 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3863 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3864 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3865 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3866 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3867 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3868 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3869 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3870 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3871 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3872 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3873 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3874 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3877 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3878 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3879 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3882 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3883 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3884 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3885 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3886 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3889 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3890 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3891 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3892 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3893 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3896 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3897 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3898 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3899 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3900 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3903 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3904 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3905 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3906 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3907 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3915 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3916 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3917 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3918 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3919 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3920 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3921 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3922 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3923 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3924 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3925 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3926 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3927 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3928 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3929 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3930 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3931 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3932 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3933 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3934 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3935 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3936 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3937 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3938 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3939 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3940 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3941 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3942 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3943 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3944 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3945 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3946 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3947 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3948 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3949 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3952 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3953 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3954 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3955 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3956 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3957 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3958 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3959 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3960 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3961 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3962 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3963 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3964 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3965 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3966 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3967 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3968 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3971 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3972 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3973 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3974 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3975 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3976 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3977 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3978 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3979 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3982 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3983 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3984 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3985 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3986 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3987 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3988 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3989 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3990 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3991 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3992 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3993 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3994 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3995 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3996 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3997 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3998 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3999 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

4000 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

4001 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

4004 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

4005 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

4006 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

4007 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

4008 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

4009 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

4010 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

4011 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

4012 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

4013 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

4014 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

4015 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

4016 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

4017 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

4018 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

4019 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

4020 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

4021 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

4022 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

4023 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

4026 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

4027 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

4028 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

4029 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

4030 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

4031 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

4032 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

4033 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

4034 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

4035 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

4036 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

4037 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

4038 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

4039 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

4040 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

4041 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

4042 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

4043 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

4044 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

4045 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

4048 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

4049 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

4050 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

4051 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

4052 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

4053 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

4054 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

4055 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

4056 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

4057 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

4058 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

4059 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

4060 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

4061 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

4062 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

4063 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

4064 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

4065 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

4066 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

4067 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

4075 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4076 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4077 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4078 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4079 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4080 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4081 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4082 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4083 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4084 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4085 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4086 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4087 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4088 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4089 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4090 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4091 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4092 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4093 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4094 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4097 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4098 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4099 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4100 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4101 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4102 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4103 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4104 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4105 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4106 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4107 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4108 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4109 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4110 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4111 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4112 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4113 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4114 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4115 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4116 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4119 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4120 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4121 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4122 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4123 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4124 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4125 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4126 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4127 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4128 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4129 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4130 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4131 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4132 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4133 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4134 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4135 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4136 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4137 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4138 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4141 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4142 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4143 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4144 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4145 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4146 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4147 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4148 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4149 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4150 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4151 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4152 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4153 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4154 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4155 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4156 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4157 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4158 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4159 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4160 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4163 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

4164 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

4165 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

4166 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

4167 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

4168 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

4169 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

4170 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

4171 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

4172 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

4173 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

4174 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

4175 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

4176 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

4177 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

4178 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

4179 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

4180 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

4181 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

4182 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

4185 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

4186 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

4187 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

4188 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

4189 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

4190 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

4191 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

4192 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

4193 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

4194 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

4195 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

4196 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

4197 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

4198 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

4199 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

4200 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

4201 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

4202 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

4203 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

4204 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

4212 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x00000007)

	)

4213 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

4214 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

4215 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

4216 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

4217 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

4218 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

4219 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

4220 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

4222 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

4223 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

4224 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

4225 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

4226 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

4227 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

4228 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

4231 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

4232 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

4233 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

4234 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

4235 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

4236 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

4237 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

4240 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

4241 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

4242 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

4243 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

4244 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

4245 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

4246 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

4247 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4248 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4249 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

4250 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

4251 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

4254 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

4255 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

4256 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

4257 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

4258 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

4259 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

4260 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

4261 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

4262 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

4263 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

4264 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

4265 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

4266 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

4267 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

4268 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

4269 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

4270 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4271 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4272 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4273 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4274 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4275 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4276 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4277 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4278 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4279 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4280 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4281 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4289 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4290 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4292 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4293 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4294 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4296 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4297 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4298 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4300 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4301 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4302 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4303 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4304 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4305 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4306 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4307 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4308 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4309 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4312 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4313 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4315 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4316 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4317 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4319 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4320 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4321 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4323 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4324 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4325 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4326 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4327 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4328 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4329 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4330 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4331 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4332 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4335 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4336 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4338 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4339 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4340 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4342 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4343 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4344 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4346 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4347 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4348 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4349 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4350 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4351 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4352 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4353 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4354 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4355 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4358 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4359 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4361 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4362 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4363 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4365 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4366 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4367 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4369 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4370 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4371 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4372 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4373 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4374 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4375 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4376 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4377 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4378 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4381 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4382 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4383 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4384 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4385 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4387 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4388 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4389 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4390 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4391 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4393 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4394 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4395 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4396 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4397 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4399 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4400 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4401 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4402 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4403 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4405 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4406 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4407 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4408 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4409 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4411 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4412 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4413 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4414 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4415 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4417 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4418 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4419 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4422 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4423 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4424 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4425 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4426 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4428 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4429 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4430 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4431 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4432 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4434 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4435 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4436 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4437 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4438 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4440 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4441 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4442 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4443 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4444 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4446 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4447 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4448 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4449 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4450 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4452 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4453 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4454 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4455 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4456 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4458 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4459 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4460 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4463 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4464 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4465 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4466 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4467 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4469 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4470 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4471 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4472 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4473 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4475 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4476 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4477 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4478 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4479 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4481 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4482 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4483 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4484 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4485 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4487 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4488 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4489 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4490 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4491 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4493 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4494 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4495 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4496 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4497 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4499 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4500 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4501 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4504 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4505 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4506 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4507 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4508 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4510 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4511 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4512 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4513 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4514 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4516 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4517 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4518 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4519 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4520 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4522 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4523 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4524 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4525 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4526 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4528 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4529 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4530 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4531 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4532 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4534 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4535 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4536 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4537 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4538 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4540 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4541 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4542 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4545 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4546 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4547 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4548 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4549 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4551 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4552 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4553 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4554 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4555 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4557 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4558 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4559 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4560 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4561 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4563 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4564 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4565 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4566 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4567 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4569 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4570 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4571 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4572 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4573 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4575 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4576 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4577 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4580 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4581 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4582 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4583 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4584 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4586 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4587 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4588 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4589 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4590 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4592 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4593 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4594 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4595 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4596 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4598 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4599 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4600 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4601 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4602 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4604 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4605 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4606 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4607 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4608 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4610 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4611 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4612 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4615 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4616 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4617 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4618 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4619 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4621 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4622 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4623 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4624 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4625 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4627 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4628 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4629 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4630 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4631 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4633 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4634 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4635 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4636 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4637 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4639 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4640 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4641 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4642 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4643 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4645 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4646 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4647 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4650 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4651 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4652 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4653 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4654 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4656 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4657 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4658 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4659 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4660 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4662 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4663 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4664 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4665 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4666 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4668 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4669 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4670 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4671 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4672 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4674 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4675 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4676 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4677 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4678 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4680 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4681 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4682 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4685 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4686 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4687 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4689 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4690 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4691 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4693 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4695 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4696 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4697 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4698 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4699 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4701 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4702 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4703 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4704 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4705 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4707 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4708 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4709 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4710 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4713 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4714 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4715 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4717 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4718 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4719 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4721 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4723 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4724 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4725 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4726 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4727 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4729 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4730 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4731 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4732 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4733 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4735 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4736 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4737 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4738 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4741 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4742 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4743 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4745 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4746 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4747 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4749 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4751 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4752 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4753 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4754 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4755 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4757 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4758 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4759 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4760 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4761 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4763 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4764 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4765 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4766 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4769 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4770 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4771 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4772 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4773 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4774 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4775 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4778 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4779 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4780 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4781 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4782 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4783 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4784 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4787 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4788 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4789 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4790 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4791 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4792 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4793 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4796 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4797 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4798 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4799 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4800 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4801 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4802 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4803 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4804 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4806 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4807 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4808 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4809 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4810 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4811 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4812 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4813 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4814 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4816 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4817 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4818 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4819 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4820 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4821 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4822 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4823 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4824 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4826 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4827 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4828 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4829 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4830 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4831 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4832 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4833 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4834 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4837 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4838 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4839 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4840 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4841 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4842 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4843 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4844 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4845 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4847 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4848 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4849 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4850 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4851 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4852 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4853 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4854 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4855 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4857 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4858 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4859 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4860 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4861 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4862 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4863 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4864 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4865 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4867 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4868 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4869 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4870 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4871 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4872 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4873 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4874 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4875 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4878 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4879 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4880 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4881 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4882 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4883 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4884 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4885 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4886 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4888 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4889 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4890 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4891 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4892 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4893 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4894 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4895 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4896 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4898 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4899 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4900 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4901 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4902 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4903 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4904 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4905 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4906 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4908 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4909 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4910 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4911 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4912 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4913 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4914 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4915 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4916 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4919 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4920 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4921 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4922 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4923 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4924 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4925 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4926 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4927 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4929 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4930 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4931 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4932 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4933 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4934 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4935 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4936 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4937 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4939 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4940 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4941 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4942 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4943 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4944 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4945 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4946 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4947 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4949 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4950 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4951 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4952 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4953 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4954 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4955 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4956 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4957 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4960 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4961 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4962 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4963 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4964 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4965 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4966 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4967 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4968 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4970 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4971 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4972 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4973 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4974 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4975 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4976 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4977 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4978 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4980 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4981 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4982 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4983 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4984 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4985 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4986 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4987 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4988 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4990 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4991 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4992 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4993 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4994 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4995 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4996 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4997 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4998 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5001 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5002 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5003 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5004 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5005 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5006 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5007 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5008 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5009 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5011 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5012 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5013 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5014 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5015 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5016 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5017 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5018 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5019 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5021 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5022 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5023 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5024 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5025 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5026 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5027 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5028 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5029 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5031 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5032 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5033 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5034 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5035 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5036 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5037 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5038 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5039 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5042 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5043 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5044 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5045 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5046 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5047 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5048 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5049 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5050 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5052 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5053 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5054 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5055 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5056 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5057 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5058 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5059 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5060 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5062 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5063 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5064 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5065 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5066 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5067 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5068 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5069 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5070 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5072 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5073 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5074 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5075 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5076 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5077 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5078 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5079 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5080 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5083 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5086 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5094 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

5095 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

5096 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

5098 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

5099 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

5100 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

5102 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

5103 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

5104 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

5106 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

5107 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

5108 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

5110 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

5111 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

5112 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

5114 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

5115 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

5116 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

5118 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

5119 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

5120 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

5122 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

5123 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

5124 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

5126 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

5127 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

5128 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

5130 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

5131 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

5132 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

5134 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

5135 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

5136 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

5138 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

5139 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

5140 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

5142 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

5143 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

5144 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

5146 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

5147 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

5148 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

5150 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

5151 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

5152 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

5154 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

5155 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

5156 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

5159 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

5160 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

5161 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

5162 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

5163 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

5164 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

5165 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

5166 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

5167 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

5168 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

5169 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

5170 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

5171 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

5172 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

5173 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

5174 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

5177 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

5178 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

5179 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

5181 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

5182 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

5183 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

5185 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

5186 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

5187 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

5189 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

5190 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

5191 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

5193 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

5194 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

5195 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

5197 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

5198 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

5199 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

5201 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

5202 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

5203 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

5205 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

5206 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

5207 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

5209 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

5210 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

5211 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

5213 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

5214 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

5215 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

5217 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

5218 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

5219 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

5221 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

5222 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

5223 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

5225 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

5226 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

5227 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

5229 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

5230 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

5231 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

5233 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

5234 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

5235 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

5237 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

5238 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

5239 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

5242 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

5243 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

5244 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

5246 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

5247 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

5248 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

5250 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

5251 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

5252 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

5254 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

5255 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

5256 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

5258 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

5259 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

5260 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

5262 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

5263 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

5264 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

5266 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

5267 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

5268 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

5270 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

5271 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

5272 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

5274 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

5275 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

5276 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

5278 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

5279 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

5280 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

5282 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

5283 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

5284 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

5286 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

5287 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

5288 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

5290 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

5291 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

5292 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

5294 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

5295 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

5296 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

5298 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

5299 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

5300 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

5302 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

5303 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

5304 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

5307 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

5308 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

5309 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

5310 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

5311 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

5312 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

5313 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

5314 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

5315 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

5316 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

5317 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

5318 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

5319 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

5320 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

5321 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

5322 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

5324 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

5325 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

5326 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

5327 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

5328 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

5329 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

5330 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

5331 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

5332 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

5333 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

5334 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

5335 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

5336 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

5337 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

5338 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

5339 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

5342 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

5343 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

5344 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

5345 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

5346 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

5347 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

5348 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

5349 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

5350 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

5351 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

5352 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

5353 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

5354 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

5355 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

5356 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

5357 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

5359 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

5360 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

5361 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

5362 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

5363 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

5364 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

5365 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

5366 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

5367 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

5368 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

5369 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

5370 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

5371 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

5372 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

5373 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

5374 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

5377 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

5378 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

5379 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

5380 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

5381 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

5382 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

5383 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

5384 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

5385 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

5386 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

5387 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

5388 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

5389 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

5390 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

5391 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

5392 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

5393 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

5394 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

5395 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

5396 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

5397 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

5398 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

5399 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

5400 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

5401 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

5402 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

5403 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

5404 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

5405 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

5406 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

5407 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

5408 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

5416 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

5417 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

5418 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

5419 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

5420 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

5421 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

5422 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00000080)

	)

5423 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

5424 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

5425 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

5426 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

5427 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

5428 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

5429 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

5432 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

5433 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

5434 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

5435 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

5436 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

5437 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

5438 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

5441 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

5442 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

5445 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

5446 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

5447 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

5448 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

5456 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

5457 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

5458 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

5459 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

5460 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

5461 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

5462 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

5463 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

5464 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

5465 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

5466 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

5467 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

5468 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

5469 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

5472 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

5473 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

5474 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

5475 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

5476 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

5477 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

5478 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

5480 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

5481 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

5482 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

5483 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

5484 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

5487 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

5488 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

5490 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

5491 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

5492 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

5493 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

5494 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

5495 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

5496 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

5497 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

5498 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

5499 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

5501 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

5504 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

5505 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

5508 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

5511 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

5512 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

5513 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

5514 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

5515 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

5516 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

5517 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

5518 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

5519 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

5520 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

5521 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

5522 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

5523 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

5524 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

5527 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

5528 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

5529 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

5530 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

5531 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

5532 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

5533 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

5534 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

5537 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

5538 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

5539 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

5542 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

5550 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

5553 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

5554 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

5555 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

5556 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

5559 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

5562 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

5563 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

5571 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

5572 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

5573 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

5574 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

5575 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

5577 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

5578 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

5579 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

5580 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

5584 
	#PWR_CR_PLS_LEV0
 ((
uöt16_t
)0x0000Ë

	)

5585 
	#PWR_CR_PLS_LEV1
 ((
uöt16_t
)0x0020Ë

	)

5586 
	#PWR_CR_PLS_LEV2
 ((
uöt16_t
)0x0040Ë

	)

5587 
	#PWR_CR_PLS_LEV3
 ((
uöt16_t
)0x0060Ë

	)

5588 
	#PWR_CR_PLS_LEV4
 ((
uöt16_t
)0x0080Ë

	)

5589 
	#PWR_CR_PLS_LEV5
 ((
uöt16_t
)0x00A0Ë

	)

5590 
	#PWR_CR_PLS_LEV6
 ((
uöt16_t
)0x00C0Ë

	)

5591 
	#PWR_CR_PLS_LEV7
 ((
uöt16_t
)0x00E0Ë

	)

5593 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

5594 
	#PWR_CR_FPDS
 ((
uöt16_t
)0x0200Ë

	)

5595 
	#PWR_CR_VOS
 ((
uöt16_t
)0x4000Ë

	)

5597 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

5600 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

5601 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

5602 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

5603 
	#PWR_CSR_BRR
 ((
uöt16_t
)0x0008Ë

	)

5604 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

5605 
	#PWR_CSR_BRE
 ((
uöt16_t
)0x0200Ë

	)

5606 
	#PWR_CSR_VOSRDY
 ((
uöt16_t
)0x4000Ë

	)

5608 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

5616 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

5617 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

5619 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

5620 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

5621 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

5622 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

5623 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

5624 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

5626 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

5627 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

5628 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

5629 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

5630 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

5631 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

5632 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

5633 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

5634 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

5636 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

5637 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

5638 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

5639 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

5640 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

5641 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

5642 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

5643 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

5646 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

5647 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

5648 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

5649 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

5650 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

5651 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

5652 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

5654 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

5655 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

5656 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

5657 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

5658 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

5659 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

5660 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

5661 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

5662 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

5663 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

5665 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

5666 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

5667 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

5669 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

5670 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

5671 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

5673 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

5674 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

5675 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

5676 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

5677 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

5681 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

5682 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

5683 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

5685 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

5686 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

5687 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

5690 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

5691 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

5692 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

5694 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

5695 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

5696 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

5699 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

5700 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

5701 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

5702 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

5703 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

5705 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5706 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

5707 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

5708 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

5709 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

5710 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

5711 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

5712 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

5713 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

5716 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

5717 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

5718 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

5719 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

5721 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5722 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

5723 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

5724 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

5725 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

5728 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

5729 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

5730 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

5731 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

5733 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5734 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

5735 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

5736 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

5737 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

5740 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

5741 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

5742 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

5743 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

5744 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

5745 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

5748 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

5749 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

5750 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

5752 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

5754 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

5755 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

5756 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

5757 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

5759 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

5760 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

5761 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

5762 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

5764 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

5765 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

5766 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

5769 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

5770 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

5771 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

5772 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

5773 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

5774 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

5775 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

5776 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

5777 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

5778 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

5779 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

5780 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

5781 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

5782 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

5783 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

5784 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

5785 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

5786 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

5787 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

5788 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

5791 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

5792 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

5793 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

5794 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

5795 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

5796 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

5797 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

5798 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

5799 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

5800 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

5801 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

5802 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

5803 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

5804 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

5807 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

5808 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

5809 
	#RCC_AHB2RSTR_HSAHRST
 ((
uöt32_t
)0x00000020)

	)

5810 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

5811 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

5814 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

5817 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

5818 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

5819 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

5820 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

5821 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

5822 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

5823 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

5824 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

5825 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

5826 
	#RCC_APB1RSTR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

5827 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00008000)

	)

5828 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00010000)

	)

5829 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

5830 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

5831 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

5832 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

5833 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

5834 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

5835 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

5836 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

5837 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

5838 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

5839 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

5842 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

5843 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

5844 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

5845 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

5846 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

5847 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

5848 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

5849 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

5850 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

5851 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

5852 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

5854 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

5857 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

5858 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

5859 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

5860 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

5861 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

5862 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

5863 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

5864 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

5865 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

5866 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

5867 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

5868 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

5869 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

5870 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

5871 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

5872 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

5873 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

5874 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

5875 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

5876 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

5879 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

5880 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

5881 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

5882 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

5883 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

5886 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

5889 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

5890 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

5891 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

5892 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

5893 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

5894 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

5895 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

5896 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

5897 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

5898 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

5899 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

5900 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

5901 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

5902 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

5903 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

5904 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

5905 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

5906 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

5907 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

5908 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

5909 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

5910 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

5911 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

5914 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

5915 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

5916 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

5917 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

5918 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

5919 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

5920 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

5921 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

5922 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

5923 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

5924 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

5925 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

5926 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

5929 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

5930 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

5931 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

5932 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

5933 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

5934 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

5935 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

5936 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

5937 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

5938 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

5939 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

5940 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

5941 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

5942 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

5943 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

5944 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

5945 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

5946 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

5947 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

5948 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

5949 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

5950 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

5953 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

5954 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

5955 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

5956 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

5957 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

5960 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

5963 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

5964 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

5965 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

5966 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

5967 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

5968 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

5969 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

5970 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

5971 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

5972 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

5973 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

5974 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

5975 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

5976 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

5977 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

5978 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

5979 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

5980 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

5981 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

5982 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

5983 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

5984 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

5985 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

5988 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

5989 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

5990 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

5991 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

5992 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

5993 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

5994 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

5995 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

5996 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

5997 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

5998 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

5999 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

6000 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

6003 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

6004 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

6005 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

6007 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

6008 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

6009 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

6011 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

6012 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

6015 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

6016 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

6017 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

6018 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

6019 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

6020 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

6021 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

6022 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

6023 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

6024 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

6027 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

6028 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

6029 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

6030 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

6033 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

6034 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

6042 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

6043 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

6046 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

6047 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

6048 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

6049 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

6050 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

6058 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

6059 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

6060 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6061 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6062 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

6063 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6064 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6065 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6066 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6067 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

6068 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6069 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6070 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6071 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6072 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6073 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6074 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6075 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6076 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

6077 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6078 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6079 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6080 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

6081 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6082 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6083 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6084 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6087 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

6088 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

6089 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

6090 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

6091 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

6092 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

6093 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

6094 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

6095 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

6096 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

6097 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

6098 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

6099 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

6100 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

6101 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

6102 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

6103 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

6104 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

6105 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

6106 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

6107 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

6108 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

6109 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

6110 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

6111 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

6112 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

6113 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

6114 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

6117 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

6118 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

6119 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

6120 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

6121 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

6122 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

6123 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

6124 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

6125 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

6126 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

6127 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

6128 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

6129 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

6130 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

6131 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

6132 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

6133 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

6134 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

6135 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

6136 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

6137 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

6138 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

6139 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

6140 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

6141 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

6142 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

6145 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

6146 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

6147 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

6148 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

6149 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

6150 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

6151 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

6152 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

6153 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

6154 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

6155 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

6156 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

6157 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

6158 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

6159 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

6162 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

6163 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

6166 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

6169 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

6170 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

6173 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

6174 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

6175 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

6176 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

6177 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

6178 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

6179 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

6180 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

6181 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

6182 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

6183 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

6184 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

6185 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

6186 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6187 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6188 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

6189 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6190 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6191 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6192 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6193 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

6194 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

6195 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6196 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6197 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6198 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6199 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6200 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6201 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6202 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6203 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

6204 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

6205 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6206 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6207 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6208 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

6209 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6210 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6211 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6212 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6215 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

6216 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

6217 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

6218 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

6219 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

6220 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

6221 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

6222 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

6223 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

6224 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

6225 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

6226 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

6227 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

6228 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6229 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6230 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

6231 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6232 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6233 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6234 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6235 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

6236 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

6237 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6238 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6239 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6240 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6241 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6242 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6243 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6244 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6245 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

6246 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

6247 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6248 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6249 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6250 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

6251 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6252 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6253 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6254 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6257 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

6260 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

6263 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

6264 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

6267 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

6268 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

6269 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6270 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6271 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

6272 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6273 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6274 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6275 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6276 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

6277 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6278 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6279 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6280 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6281 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6282 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6283 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6284 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6285 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

6286 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6287 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6288 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6289 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

6290 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6291 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6292 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6293 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6296 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

6297 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

6298 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

6299 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

6300 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

6301 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

6302 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

6303 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

6304 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

6305 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

6306 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

6307 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

6308 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

6309 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

6310 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

6311 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

6312 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

6313 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

6316 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

6319 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

6320 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

6321 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

6322 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

6323 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

6324 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

6325 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

6326 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

6327 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

6328 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

6329 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

6330 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

6331 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

6334 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

6335 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

6336 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

6337 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

6338 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

6339 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

6340 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

6341 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

6342 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

6343 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

6344 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

6345 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

6346 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

6347 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

6348 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

6349 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

6350 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

6351 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

6354 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

6355 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

6356 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

6357 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

6358 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

6359 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

6362 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

6363 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

6364 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

6365 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

6366 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

6367 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

6370 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6373 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6376 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6379 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6382 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6385 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6388 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6391 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6394 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6397 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6400 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6403 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6406 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6409 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6412 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6415 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6418 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6421 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6424 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6427 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6435 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

6436 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

6437 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

6440 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

6441 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

6442 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

6443 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

6445 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

6446 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

6447 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

6449 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

6450 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

6453 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

6456 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

6458 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

6459 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

6460 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

6462 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

6463 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

6464 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

6465 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

6466 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

6467 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

6468 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

6471 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

6474 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

6477 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

6480 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

6483 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

6486 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

6489 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

6492 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

6495 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

6496 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

6497 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

6498 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

6500 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

6501 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

6502 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

6503 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

6504 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

6506 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

6507 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

6508 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

6509 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

6512 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

6515 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

6516 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

6517 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

6518 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

6519 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

6520 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

6521 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

6522 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

6523 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

6524 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

6525 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

6526 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

6527 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

6528 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

6529 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

6530 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

6531 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

6532 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

6533 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

6534 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

6535 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

6536 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

6537 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

6538 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

6541 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

6542 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

6543 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

6544 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

6545 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

6546 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

6547 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

6548 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

6549 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

6550 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

6551 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

6552 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

6553 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

6556 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

6557 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

6558 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

6559 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

6560 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

6561 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

6562 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

6563 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

6564 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

6565 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

6566 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

6567 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

6568 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

6569 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

6570 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

6571 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

6572 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

6573 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

6574 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

6575 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

6576 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

6577 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

6578 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

6579 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

6582 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

6585 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

6593 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

6594 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

6595 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

6597 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

6598 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

6599 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

6600 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

6602 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

6603 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

6604 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

6605 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

6606 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

6607 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

6608 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

6609 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

6610 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

6611 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

6614 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

6615 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

6616 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

6617 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

6618 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

6619 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

6622 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

6623 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

6624 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

6625 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

6626 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

6627 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

6628 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

6629 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

6632 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

6635 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

6638 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

6641 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

6644 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

6646 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

6647 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

6648 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

6650 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

6652 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

6653 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

6654 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

6656 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

6658 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

6659 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

6660 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

6662 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

6663 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

6666 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

6667 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

6668 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

6676 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000003Ë

	)

6677 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001)

	)

6678 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002)

	)

6681 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

6683 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

6686 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

6687 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

6688 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

6689 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

6693 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

6694 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

6695 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

6696 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

6697 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

6698 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

6699 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

6700 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

6701 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

6705 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

6706 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

6707 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

6708 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

6709 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

6710 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

6711 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

6712 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

6713 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

6717 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

6718 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

6719 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

6720 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

6721 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

6722 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

6723 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

6724 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

6725 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

6729 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

6730 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

6731 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

6732 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

6733 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

6734 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

6735 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

6736 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

6737 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

6740 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

6741 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

6742 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

6743 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

6747 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

6748 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

6749 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

6750 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

6751 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

6752 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

6753 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

6754 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

6755 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

6759 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

6760 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

6761 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

6762 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

6763 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

6764 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

6765 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

6766 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

6767 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

6771 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

6772 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

6773 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

6774 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

6775 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

6776 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

6777 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

6778 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

6779 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

6783 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

6784 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

6785 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

6786 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

6787 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

6788 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

6789 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

6790 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

6791 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

6794 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

6795 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

6796 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

6797 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

6802 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

6803 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

6804 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

6805 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

6806 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

6807 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

6808 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

6809 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

6810 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

6814 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

6815 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

6816 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

6817 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

6818 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

6819 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

6820 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

6821 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

6822 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

6826 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

6827 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

6828 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

6829 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

6830 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

6831 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

6832 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

6833 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

6834 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

6838 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

6839 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

6840 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

6841 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

6842 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

6843 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

6844 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

6845 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

6846 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

6849 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

6850 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

6851 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

6852 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

6856 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

6857 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

6858 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

6859 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

6860 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

6861 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

6862 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

6863 
	#SYSCFG_EXTICR3_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

6867 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

6868 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

6869 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

6870 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

6871 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

6872 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

6873 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

6874 
	#SYSCFG_EXTICR3_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

6878 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

6879 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

6880 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

6881 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

6882 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

6883 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

6884 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

6885 
	#SYSCFG_EXTICR3_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

6889 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

6890 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

6891 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

6892 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

6893 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

6894 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

6895 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

6896 
	#SYSCFG_EXTICR3_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

6899 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

6900 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

6908 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

6909 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

6910 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

6911 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

6912 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

6914 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

6915 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

6916 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

6918 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

6920 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

6921 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

6922 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

6925 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

6926 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

6927 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

6929 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

6930 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

6931 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

6932 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

6934 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

6935 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

6936 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

6937 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

6938 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

6939 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

6940 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

6941 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

6944 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

6945 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

6946 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

6947 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

6949 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

6950 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

6951 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

6952 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

6954 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

6956 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

6957 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

6958 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

6959 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

6960 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

6962 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

6963 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

6964 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

6966 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

6967 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

6970 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

6971 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

6972 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

6973 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

6974 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

6975 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

6976 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

6977 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

6978 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

6979 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

6980 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

6981 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

6982 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

6983 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

6984 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

6987 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

6988 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

6989 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

6990 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

6991 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

6992 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

6993 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

6994 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

6995 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

6996 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

6997 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

6998 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

7001 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

7002 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

7003 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

7004 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

7005 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

7006 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

7007 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

7008 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

7011 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

7012 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

7013 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

7015 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

7016 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

7018 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

7019 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

7020 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

7021 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

7023 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

7025 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

7026 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

7027 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

7029 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

7030 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

7032 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

7033 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

7034 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

7035 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

7037 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

7041 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

7042 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

7043 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

7045 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

7046 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

7047 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

7048 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

7049 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

7051 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

7052 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

7053 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

7055 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

7056 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

7057 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

7058 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

7059 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

7062 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

7063 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

7064 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

7066 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

7067 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

7069 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

7070 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

7071 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

7072 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

7074 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

7076 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

7077 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

7078 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

7080 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

7081 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

7083 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

7084 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

7085 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

7086 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

7088 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

7092 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

7093 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

7094 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

7096 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

7097 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

7098 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

7099 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

7100 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

7102 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

7103 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

7104 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

7106 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

7107 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

7108 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

7109 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

7110 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

7113 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

7114 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

7115 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

7116 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

7117 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

7118 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

7119 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

7120 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

7121 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

7122 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

7123 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

7124 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

7125 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

7126 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

7127 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

7130 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

7133 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

7136 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

7139 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

7142 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

7145 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

7148 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

7151 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

7154 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

7155 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

7156 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

7157 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

7158 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

7159 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

7160 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

7161 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

7162 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

7164 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

7165 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

7166 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

7168 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

7169 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

7170 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

7171 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

7172 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

7173 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

7176 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

7177 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

7178 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

7179 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

7180 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

7181 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

7183 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

7184 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

7185 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

7186 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

7187 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

7188 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

7191 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

7194 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

7195 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

7196 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

7197 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

7198 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

7199 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

7208 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7209 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7210 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7211 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7212 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7213 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7214 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7215 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7216 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7217 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7220 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7223 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7224 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7227 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7228 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7229 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7230 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7231 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7232 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7233 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7234 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7235 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7236 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7237 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7238 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7239 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7240 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7241 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7244 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7245 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7246 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7247 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7248 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7249 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7250 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7252 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7253 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7254 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7256 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7259 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7260 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7261 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7262 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7263 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7264 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7265 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7266 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7267 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7268 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7269 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7270 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7273 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7274 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7275 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7276 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7277 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7278 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7279 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7280 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7281 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7283 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7291 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

7292 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

7293 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

7294 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

7295 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

7296 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

7297 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

7298 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

7300 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

7303 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

7304 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

7305 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

7306 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

7307 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

7308 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

7309 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

7310 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

7312 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

7313 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

7314 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

7316 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

7319 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

7328 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

7329 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

7332 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

7333 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

7334 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

7335 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

7337 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

7338 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

7339 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

7342 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

7343 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

7344 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

7345 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

7346 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

7347 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

7348 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

7349 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

7350 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

7351 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

7352 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

7353 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

7354 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

7355 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

7356 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

7357 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

7358 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

7360 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

7363 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

7364 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

7365 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

7366 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

7367 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

7375 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7376 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7377 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7378 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7379 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7380 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7381 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7382 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7383 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7384 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7385 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7386 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7387 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7388 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7389 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7390 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7391 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7392 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7393 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7394 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7396 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7397 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7398 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7399 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7400 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7401 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7402 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7405 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7406 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7407 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7408 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7409 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7410 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7411 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7412 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7413 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7414 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7415 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7416 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7417 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7418 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7421 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7424 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7427 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7428 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7429 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7430 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7431 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

7432 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7433 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7434 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

7435 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7436 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7439 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7442 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7443 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7444 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7445 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7446 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7447 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7448 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7449 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7450 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7451 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7452 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7455 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7456 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7459 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7473 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7474 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7475 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7476 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7477 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7478 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7479 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7482 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7483 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7484 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7485 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7486 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7489 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7490 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7493 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7496 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7499 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7500 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7501 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7502 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7503 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7504 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7505 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7506 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7507 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7508 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

7511 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7514 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7515 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7516 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7517 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7518 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7519 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7520 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7521 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7522 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7523 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

7526 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7529 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7530 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7531 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7532 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7533 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7534 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7535 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7536 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7537 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7538 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

7541 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7548 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

7549 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

7550 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

7551 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

7552 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

7553 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

7556 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

7557 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

7558 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

7561 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

7562 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

7563 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

7566 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

7567 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

7568 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

7571 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

7572 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

7573 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

7576 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7579 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7582 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7585 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7588 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7591 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7598 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

7599 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

7600 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

7601 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

7602 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

7603 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

7604 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

7605 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

7606 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

7608 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

7609 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

7610 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

7611 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

7612 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

7613 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

7616 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

7619 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7622 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

7623 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7626 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7629 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

7630 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7633 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7636 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7639 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7642 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

7643 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

7650 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

7651 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

7652 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

7653 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

7654 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

7655 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

7656 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

7657 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

7658 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

7659 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

7660 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

7661 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

7662 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

7663 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

7664 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

7665 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

7666 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

7667 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

7668 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

7669 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

7670 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

7671 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

7672 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

7673 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

7674 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

7675 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

7676 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

7677 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

7678 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

7679 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

7680 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

7681 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

7682 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

7683 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

7684 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

7685 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

7686 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

7687 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

7688 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

7691 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7694 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7697 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7700 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7703 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

7704 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

7705 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

7706 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

7708 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

7709 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

7710 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

7711 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

7712 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7713 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

7714 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

7715 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

7716 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

7717 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

7718 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

7719 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7720 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

7721 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

7722 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

7723 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

7724 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

7725 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

7726 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

7727 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

7728 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

7729 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

7730 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

7731 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

7732 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

7733 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

7734 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

7735 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

7736 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

7737 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

7738 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

7739 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

7742 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

7743 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

7744 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

7745 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

7746 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

7747 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

7748 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7749 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

7750 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

7751 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

7752 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

7753 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

7754 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

7755 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

7756 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

7757 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

7758 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

7759 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

7760 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7761 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

7762 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

7763 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

7764 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

7765 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

7768 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

7769 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

7770 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

7771 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

7772 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

7773 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

7774 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

7775 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

7776 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

7777 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

7778 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

7779 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

7780 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

7781 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

7782 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

7785 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

7786 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

7787 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

7788 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

7791 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7794 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7797 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7800 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7810 #ifde‡
USE_STDPERIPH_DRIVER


7811 
	~"°m32f4xx_c⁄f.h
"

7818 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

7820 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

7822 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

7824 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

7826 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

7828 
	#READ_REG
(
REG
Ë((REG))

	)

7830 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

7836 #ifde‡
__˝lu•lus


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\inc\system_stm32f4xx.h

33 #i‚de‡
__SYSTEM_STM32F4XX_H


34 
	#__SYSTEM_STM32F4XX_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

80 
Sy°emInô
();

81 
Sy°emC‹eClockUpd©e
();

86 #ifde‡
__˝lu•lus


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\src\main.d

1 
	gobj
\
	gdebug
\
	g§c
\
	gmaö
.
	go
: 
§c
\
maö
.
c
 
öc
/
°m32f4xx
.
h
 
cmsis
/
c‹e_cm4
.h \

2 
cmsis
/
c‹e_cmIn°r
.
h
 cmsis/
c‹e_cmFunc
.h cmsis/
c‹e_cm4_simd
.h \

3 
öc
/
sy°em_°m32f4xx
.
h
 
ucosii
\
Sour˚
/
ucos_ii
.h ucosii\
CONFIG
/
≠p_cfg
.h \

4 
ucosii
\
CONFIG
/
os_cfg
.
h
 ucosii\
P‹ts
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\src\startup_stm32f4xx.d

1 
	gobj
\
	gdebug
\
	g§c
\
	g°¨tup_°m32f4xx
.
	go
: 
§c
\
°¨tup_°m32f4xx
.
S


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\src\system_stm32f4xx.d

1 
	gobj
\
	gdebug
\
	g§c
\
	gsy°em_°m32f4xx
.
	go
: 
§c
\
sy°em_°m32f4xx
.
c
 
öc
/
°m32f4xx
.
h
 \

2 
cmsis
/
c‹e_cm4
.
h
 cmsis/
c‹e_cmIn°r
.h cmsis/
c‹e_cmFunc
.h \

3 
cmsis
/
c‹e_cm4_simd
.
h
 
öc
/
sy°em_°m32f4xx
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_core.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_c‹e
.
	go
: 
ucosii
\
CORE
\
os_c‹e
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_flag.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_Êag
.
	go
: 
ucosii
\
CORE
\
os_Êag
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_mbox.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_mbox
.
	go
: 
ucosii
\
CORE
\
os_mbox
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_mem.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_mem
.
	go
: 
ucosii
\
CORE
\
os_mem
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_mutex.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_muãx
.
	go
: 
ucosii
\
CORE
\
os_muãx
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_q.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_q
.
	go
: 
ucosii
\
CORE
\
os_q
.
c
 ucosii\CORE/
ucos_ii
.
h
 \

2 
ucosii
\
CONFIG
/
os_cfg
.
h
 ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_sem.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_£m
.
	go
: 
ucosii
\
CORE
\
os_£m
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_task.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_èsk
.
	go
: 
ucosii
\
CORE
\
os_èsk
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_time.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_time
.
	go
: 
ucosii
\
CORE
\
os_time
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_tmr.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gc‹e
\
	gos_tmr
.
	go
: 
ucosii
\
CORE
\
os_tmr
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\PORT\os_cpu_a.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gp‹t
\
	gos_˝u_a
.
	go
: 
ucosii
\
PORT
\
os_˝u_a
.
S


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\PORT\os_cpu_c.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gp‹t
\
	gos_˝u_c
.
	go
: 
ucosii
\
PORT
\
os_˝u_c
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h \

3 
uC
-
LIB
/
lib_def
.
h
 uC-
CPU
/
˝u_def
.h uC-CPU\
ARM
-
C‹ãx
-
M4
\
GNU
/
˝u
.h \

4 
ucosii
\
CONFIG
/
˝u_cfg
.
h


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\PORT\os_dbg.d

1 
	gobj
\
	gdebug
\
	gucosii
\
	gp‹t
\
	gos_dbg
.
	go
: 
ucosii
\
PORT
\
os_dbg
.
c
 \

2 
ucosii
\
CORE
/
ucos_ii
.
h
 ucosii\
CONFIG
/
os_cfg
.h ucosii\
PORT
/
os_˝u
.h

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\src\main.c

14 
	~"°m32f4xx.h
"

15 
	~"ucos_ii.h
"

16 
	~"≠p_cfg.h
"

19 
OS_STK
 
	gAµ_TaskSèπStk
[
APP_TASK_START_STK_SIZE
];

20 
OS_STK
 
	gAµ_Task1Stk
[
APP_TASK_1_STK_SIZE
];

24 
Aµ_TaskSèπ
(*
p_¨g
);

25 
Aµ_TaskCª©e
();

26 
Aµ_Task1
(*
p_¨g
);

41 
INT32U
 
	$BSP_CPU_ClkFªq
 ()

50 
	}
}

57 
INT32U
 
	$OS_CPU_SysTickClkFªq
 ()

59 
INT32U
 
‰eq
;

62 
‰eq
 = 
	`BSP_CPU_ClkFªq
();

63  (
‰eq
);

64 
	}
}

76 
	$maö
()

78 
	`OSInô
();

79 
	`OSTaskCª©e
(((*)(*)Ë
Aµ_TaskSèπ
,

81 (
OS_STK
 * )&
Aµ_TaskSèπStk
[
APP_TASK_START_STK_SIZE
 - 1],

82 (
INT8U
 ) 
APP_TASK_START_PRIO
);

83 #i‡(
OS_TASK_NAME_SIZE
 >= 11)

84 
	`OSTaskNameSë
(
APP_TASK_START_PRIO
, (
CPU_INT08U
 *)"Sèπ Task", &
os_îr
);

86 
	`OSSèπ
();

88 
	}
}

90 
	$Aµ_TaskSèπ
 (*
p_¨g
)

92 ()
p_¨g
;

94 
	`OS_CPU_SysTickInô
();

96 #i‡(
OS_TASK_STAT_EN
 > 0)

97 
	`OSSètInô
();

101 
	`Aµ_TaskCª©e
();

105 
	`OSTaskSu•íd
(
OS_PRIO_SELF
);

107 
	}
}

115 
	$Aµ_TaskCª©e
()

117 
	`OSTaskCª©e
(((*)(*)Ë
Aµ_Task1
,

119 (
OS_STK
 * )&
Aµ_Task1Stk
[
APP_TASK_1_STK_SIZE
 - 1],

120 (
INT8U
 ) 
APP_TASK_1_PRIO
);

122 
	}
}

129 
	$Aµ_Task1
(*
p_¨g
)

131 
INT8U
 
îr
;

132 ()
p_¨g
;

137 
	`OSTimeDly
(300);

139 
	`OSTimeDly
(300);

144 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\src\startup_stm32f4xx.S

32 .
sy¡ax
 
	gunifõd


33 .
¨ch
 
	g¨mv7
-
	gm


35 .
	g£˘i⁄
 .
	g°ack


36 .
	gÆign
 3

37 #ifde‡
__STACK_SIZE


38 .
equ
 
	gSèck_Size
, 
	g__STACK_SIZE


40 .
equ
 
	gSèck_Size
, 0x400

42 .
globl
 
	g__SèckT›


43 .
globl
 
__SèckLimô


44 
	g__SèckLimô
:

45 .
•a˚
 
Sèck_Size


46 .
size
 
__SèckLimô
, . - __StackLimit

47 
	g__SèckT›
:

48 .
size
 
__SèckT›
, . - 
	g__SèckT›


50 .
	g£˘i⁄
 .
	ghóp


51 .
	gÆign
 3

52 #ifde‡
__HEAP_SIZE


53 .
equ
 
	gHóp_Size
, 
	g__HEAP_SIZE


55 .
equ
 
	gHóp_Size
, 0xC00

57 .
globl
 
	g__HópBa£


58 .
globl
 
__HópLimô


59 
	g__HópBa£
:

60 .
Hóp_Size


61 .
•a˚
 
Hóp_Size


62 .
ídif


63 .
size
 
__HópBa£
, . - __HeapBase

64 
	g__HópLimô
:

65 .
size
 
__HópLimô
, . - 
	g__HópLimô


67 .
	g£˘i⁄
 .
	gi§_ve˘‹


68 .
	gÆign
 2

69 .
globl
 
__i§_ve˘‹


70 
	g__i§_ve˘‹
:

71 .
__SèckT›


72 .
Re£t_H™dÀr


73 .
NMI_H™dÀr


74 .
H¨dFau…_H™dÀr


75 .
MemM™age_H™dÀr


76 .
BusFau…_H™dÀr


77 .
UßgeFau…_H™dÀr


82 .
SVC_H™dÀr


83 .
DebugM⁄_H™dÀr


85 .
PídSV_H™dÀr


86 .
SysTick_H™dÀr


89 .
WWDG_IRQH™dÀr


90 .
PVD_IRQH™dÀr


91 .
TAMP_STAMP_IRQH™dÀr


92 .
RTC_WKUP_IRQH™dÀr


93 .
FLASH_IRQH™dÀr


94 .
RCC_IRQH™dÀr


95 .
EXTI0_IRQH™dÀr


96 .
EXTI1_IRQH™dÀr


97 .
EXTI2_IRQH™dÀr


98 .
EXTI3_IRQH™dÀr


99 .
EXTI4_IRQH™dÀr


100 .
DMA1_Såóm0_IRQH™dÀr


101 .
DMA1_Såóm1_IRQH™dÀr


102 .
DMA1_Såóm2_IRQH™dÀr


103 .
DMA1_Såóm3_IRQH™dÀr


104 .
DMA1_Såóm4_IRQH™dÀr


105 .
DMA1_Såóm5_IRQH™dÀr


106 .
DMA1_Såóm6_IRQH™dÀr


107 .
ADC_IRQH™dÀr


108 .
CAN1_TX_IRQH™dÀr


109 .
CAN1_RX0_IRQH™dÀr


110 .
CAN1_RX1_IRQH™dÀr


111 .
CAN1_SCE_IRQH™dÀr


112 .
EXTI9_5_IRQH™dÀr


113 .
TIM1_BRK_TIM9_IRQH™dÀr


114 .
TIM1_UP_TIM10_IRQH™dÀr


115 .
TIM1_TRG_COM_TIM11_IRQH™dÀr


116 .
TIM1_CC_IRQH™dÀr


117 .
TIM2_IRQH™dÀr


118 .
TIM3_IRQH™dÀr


119 .
TIM4_IRQH™dÀr


120 .
I2C1_EV_IRQH™dÀr


121 .
I2C1_ER_IRQH™dÀr


122 .
I2C2_EV_IRQH™dÀr


123 .
I2C2_ER_IRQH™dÀr


124 .
SPI1_IRQH™dÀr


125 .
SPI2_IRQH™dÀr


126 .
USART1_IRQH™dÀr


127 .
USART2_IRQH™dÀr


128 .
USART3_IRQH™dÀr


129 .
EXTI15_10_IRQH™dÀr


130 .
RTC_Aœrm_IRQH™dÀr


131 .
OTG_FS_WKUP_IRQH™dÀr


132 .
TIM8_BRK_TIM12_IRQH™dÀr


133 .
TIM8_UP_TIM13_IRQH™dÀr


134 .
TIM8_TRG_COM_TIM14_IRQH™dÀr


135 .
TIM8_CC_IRQH™dÀr


136 .
DMA1_Såóm7_IRQH™dÀr


137 .
FSMC_IRQH™dÀr


138 .
SDIO_IRQH™dÀr


139 .
TIM5_IRQH™dÀr


140 .
SPI3_IRQH™dÀr


141 .
UART4_IRQH™dÀr


142 .
UART5_IRQH™dÀr


143 .
TIM6_DAC_IRQH™dÀr


144 .
TIM7_IRQH™dÀr


145 .
DMA2_Såóm0_IRQH™dÀr


146 .
DMA2_Såóm1_IRQH™dÀr


147 .
DMA2_Såóm2_IRQH™dÀr


148 .
DMA2_Såóm3_IRQH™dÀr


149 .
DMA2_Såóm4_IRQH™dÀr


150 .
ETH_IRQH™dÀr


151 .
ETH_WKUP_IRQH™dÀr


152 .
CAN2_TX_IRQH™dÀr


153 .
CAN2_RX0_IRQH™dÀr


154 .
CAN2_RX1_IRQH™dÀr


155 .
CAN2_SCE_IRQH™dÀr


156 .
OTG_FS_IRQH™dÀr


157 .
DMA2_Såóm5_IRQH™dÀr


158 .
DMA2_Såóm6_IRQH™dÀr


159 .
DMA2_Såóm7_IRQH™dÀr


160 .
USART6_IRQH™dÀr


161 .
I2C3_EV_IRQH™dÀr


162 .
I2C3_ER_IRQH™dÀr


163 .
OTG_HS_EP1_OUT_IRQH™dÀr


164 .
OTG_HS_EP1_IN_IRQH™dÀr


165 .
OTG_HS_WKUP_IRQH™dÀr


166 .
OTG_HS_IRQH™dÀr


167 .
DCMI_IRQH™dÀr


168 .
CRYP_IRQH™dÀr


169 .
HASH_RNG_IRQH™dÀr


170 .
FPU_IRQH™dÀr


172 .
size
 
__i§_ve˘‹
, . - 
	g__i§_ve˘‹


174 .
	gãxt


175 .
	gthumb


176 .
	gthumb_func


177 .
	gÆign
 2

178 .
globl
 
	gRe£t_H™dÀr


179 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


180 
	gRe£t_H™dÀr
:

188 
ldr
 
r1
, =
__ëext


189 
ldr
 
r2
, =
__d©a_°¨t__


190 
ldr
 
r3
, =
__d©a_íd__


196 .
Êash_to_øm_lo›
:

197 
cmp
 
r2
, 
r3


198 
ôâ
 
…


199 
ldæt
 
	gr0
, [
r1
], #4

200 
°æt
 
	gr0
, [
r2
], #4

201 
	gb…
 .
	gÊash_to_øm_lo›


203 
subs
 
	gr3
, 
r2


204 
	gbÀ
 .
	gÊash_to_øm_lo›_íd


205 .
	gÊash_to_øm_lo›
:

206 
subs
 
r3
, #4

207 
ldr
 
	gr0
, [
r1
, 
r3
]

208 
°r
 
	gr0
, [
r2
, 
r3
]

209 
	gbgt
 .
	gÊash_to_øm_lo›


210 .
	gÊash_to_øm_lo›_íd
:

213 #i‚de‡
__NO_SYSTEM_INIT


214 
ldr
 
r0
, =
Sy°emInô


215 
blx
 
r0


218 
ldr
 
r0
, =
_°¨t


219 
bx
 
r0


220 .
poﬁ


221 .
size
 
Re£t_H™dÀr
, . - 
	gRe£t_H™dÀr


226 .
	gÆign
 1

227 .
	gthumb_func


228 .
wók
 
	g_°¨t


229 .
ty≥
 
	g_°¨t
, %
fun˘i⁄


230 
	g_°¨t
:

233 
ldr
 
r1
, = 
__bss_°¨t__


234 
ldr
 
r2
, = 
__bss_íd__


235 
movs
 
r3
, #0

236 
	gb
 .
	gfûl_zîo_bss


237 .
	glo›_zîo_bss
:

238 
°r
 
r3
, [
r1
], #4

240 .
	gfûl_zîo_bss
:

241 
cmp
 
r1
, 
r2


242 
	gbcc
 .
lo›_zîo_bss


245 
bl
 
maö


246 
	gb
 .

247 .
size
 
	g_°¨t
, . - _start

252 .
ma¸o
 
def_úq_h™dÀr
 
	gh™dÀr_«me


253 .
	gÆign
 1

254 .
	gthumb_func


255 .
	gwók
 \
	gh™dÀr_«me


256 .
	gty≥
 \
	gh™dÀr_«me
, %
	gfun˘i⁄


257 \
	gh™dÀr_«me
 :

258 
b
 .

259 .
size
 \
h™dÀr_«me
, . - \
	gh™dÀr_«me


260 .
ídm


262 
def_úq_h™dÀr
 
NMI_H™dÀr


263 
def_úq_h™dÀr
 
H¨dFau…_H™dÀr


264 
def_úq_h™dÀr
 
MemM™age_H™dÀr


265 
def_úq_h™dÀr
 
BusFau…_H™dÀr


266 
def_úq_h™dÀr
 
UßgeFau…_H™dÀr


267 
def_úq_h™dÀr
 
SVC_H™dÀr


268 
def_úq_h™dÀr
 
DebugM⁄_H™dÀr


269 
def_úq_h™dÀr
 
PídSV_H™dÀr


270 
def_úq_h™dÀr
 
SysTick_H™dÀr


271 
def_úq_h™dÀr
 
DeÁu…_H™dÀr


274 
def_úq_h™dÀr
 
WWDG_IRQH™dÀr


275 
def_úq_h™dÀr
 
PVD_IRQH™dÀr


276 
def_úq_h™dÀr
 
TAMP_STAMP_IRQH™dÀr


277 
def_úq_h™dÀr
 
RTC_WKUP_IRQH™dÀr


278 
def_úq_h™dÀr
 
FLASH_IRQH™dÀr


279 
def_úq_h™dÀr
 
RCC_IRQH™dÀr


280 
def_úq_h™dÀr
 
EXTI0_IRQH™dÀr


281 
def_úq_h™dÀr
 
EXTI1_IRQH™dÀr


282 
def_úq_h™dÀr
 
EXTI2_IRQH™dÀr


283 
def_úq_h™dÀr
 
EXTI3_IRQH™dÀr


284 
def_úq_h™dÀr
 
EXTI4_IRQH™dÀr


285 
def_úq_h™dÀr
 
DMA1_Såóm0_IRQH™dÀr


286 
def_úq_h™dÀr
 
DMA1_Såóm1_IRQH™dÀr


287 
def_úq_h™dÀr
 
DMA1_Såóm2_IRQH™dÀr


288 
def_úq_h™dÀr
 
DMA1_Såóm3_IRQH™dÀr


289 
def_úq_h™dÀr
 
DMA1_Såóm4_IRQH™dÀr


290 
def_úq_h™dÀr
 
DMA1_Såóm5_IRQH™dÀr


291 
def_úq_h™dÀr
 
DMA1_Såóm6_IRQH™dÀr


292 
def_úq_h™dÀr
 
ADC_IRQH™dÀr


293 
def_úq_h™dÀr
 
CAN1_TX_IRQH™dÀr


294 
def_úq_h™dÀr
 
CAN1_RX0_IRQH™dÀr


295 
def_úq_h™dÀr
 
CAN1_RX1_IRQH™dÀr


296 
def_úq_h™dÀr
 
CAN1_SCE_IRQH™dÀr


297 
def_úq_h™dÀr
 
EXTI9_5_IRQH™dÀr


298 
def_úq_h™dÀr
 
TIM1_BRK_TIM9_IRQH™dÀr


299 
def_úq_h™dÀr
 
TIM1_UP_TIM10_IRQH™dÀr


300 
def_úq_h™dÀr
 
TIM1_TRG_COM_TIM11_IRQH™dÀr


301 
def_úq_h™dÀr
 
TIM1_CC_IRQH™dÀr


302 
def_úq_h™dÀr
 
TIM2_IRQH™dÀr


303 
def_úq_h™dÀr
 
TIM3_IRQH™dÀr


304 
def_úq_h™dÀr
 
TIM4_IRQH™dÀr


305 
def_úq_h™dÀr
 
I2C1_EV_IRQH™dÀr


306 
def_úq_h™dÀr
 
I2C1_ER_IRQH™dÀr


307 
def_úq_h™dÀr
 
I2C2_EV_IRQH™dÀr


308 
def_úq_h™dÀr
 
I2C2_ER_IRQH™dÀr


309 
def_úq_h™dÀr
 
SPI1_IRQH™dÀr


310 
def_úq_h™dÀr
 
SPI2_IRQH™dÀr


311 
def_úq_h™dÀr
 
USART1_IRQH™dÀr


312 
def_úq_h™dÀr
 
USART2_IRQH™dÀr


313 
def_úq_h™dÀr
 
USART3_IRQH™dÀr


314 
def_úq_h™dÀr
 
EXTI15_10_IRQH™dÀr


315 
def_úq_h™dÀr
 
RTC_Aœrm_IRQH™dÀr


316 
def_úq_h™dÀr
 
OTG_FS_WKUP_IRQH™dÀr


317 
def_úq_h™dÀr
 
TIM8_BRK_TIM12_IRQH™dÀr


318 
def_úq_h™dÀr
 
TIM8_UP_TIM13_IRQH™dÀr


319 
def_úq_h™dÀr
 
TIM8_TRG_COM_TIM14_IRQH™dÀr


320 
def_úq_h™dÀr
 
TIM8_CC_IRQH™dÀr


321 
def_úq_h™dÀr
 
DMA1_Såóm7_IRQH™dÀr


322 
def_úq_h™dÀr
 
FSMC_IRQH™dÀr


323 
def_úq_h™dÀr
 
SDIO_IRQH™dÀr


324 
def_úq_h™dÀr
 
TIM5_IRQH™dÀr


325 
def_úq_h™dÀr
 
SPI3_IRQH™dÀr


326 
def_úq_h™dÀr
 
UART4_IRQH™dÀr


327 
def_úq_h™dÀr
 
UART5_IRQH™dÀr


328 
def_úq_h™dÀr
 
TIM6_DAC_IRQH™dÀr


329 
def_úq_h™dÀr
 
TIM7_IRQH™dÀr


330 
def_úq_h™dÀr
 
DMA2_Såóm0_IRQH™dÀr


331 
def_úq_h™dÀr
 
DMA2_Såóm1_IRQH™dÀr


332 
def_úq_h™dÀr
 
DMA2_Såóm2_IRQH™dÀr


333 
def_úq_h™dÀr
 
DMA2_Såóm3_IRQH™dÀr


334 
def_úq_h™dÀr
 
DMA2_Såóm4_IRQH™dÀr


335 
def_úq_h™dÀr
 
ETH_IRQH™dÀr


336 
def_úq_h™dÀr
 
ETH_WKUP_IRQH™dÀr


337 
def_úq_h™dÀr
 
CAN2_TX_IRQH™dÀr


338 
def_úq_h™dÀr
 
CAN2_RX0_IRQH™dÀr


339 
def_úq_h™dÀr
 
CAN2_RX1_IRQH™dÀr


340 
def_úq_h™dÀr
 
CAN2_SCE_IRQH™dÀr


341 
def_úq_h™dÀr
 
OTG_FS_IRQH™dÀr


342 
def_úq_h™dÀr
 
DMA2_Såóm5_IRQH™dÀr


343 
def_úq_h™dÀr
 
DMA2_Såóm6_IRQH™dÀr


344 
def_úq_h™dÀr
 
DMA2_Såóm7_IRQH™dÀr


345 
def_úq_h™dÀr
 
USART6_IRQH™dÀr


346 
def_úq_h™dÀr
 
I2C3_EV_IRQH™dÀr


347 
def_úq_h™dÀr
 
I2C3_ER_IRQH™dÀr


348 
def_úq_h™dÀr
 
OTG_HS_EP1_OUT_IRQH™dÀr


349 
def_úq_h™dÀr
 
OTG_HS_EP1_IN_IRQH™dÀr


350 
def_úq_h™dÀr
 
OTG_HS_WKUP_IRQH™dÀr


351 
def_úq_h™dÀr
 
OTG_HS_IRQH™dÀr


352 
def_úq_h™dÀr
 
DCMI_IRQH™dÀr


353 
def_úq_h™dÀr
 
CRYP_IRQH™dÀr


354 
def_úq_h™dÀr
 
HASH_RNG_IRQH™dÀr


355 
def_úq_h™dÀr
 
	gFPU_IRQH™dÀr


357 .
	gíd


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\src\system_stm32f4xx.c

123 
	~"°m32f4xx.h
"

150 
	#VECT_TAB_OFFSET
 0x00

	)

156 
	#PLL_M
 25

	)

157 
	#PLL_N
 336

	)

160 
	#PLL_P
 2

	)

163 
	#PLL_Q
 7

	)

183 
uöt32_t
 
	gSy°emC‹eClock
 = 168000000;

185 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

195 
SëSysClock
();

196 #i‡
deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

197 
Sy°emInô_ExtMemCé
();

215 
	$Sy°emInô
()

218 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

219 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

223 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

226 
RCC
->
CFGR
 = 0x00000000;

229 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

232 
RCC
->
PLLCFGR
 = 0x24003010;

235 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

238 
RCC
->
CIR
 = 0x00000000;

240 #i‡
	`deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

241 
	`Sy°emInô_ExtMemCé
();

246 
	`SëSysClock
();

249 #ifde‡
VECT_TAB_SRAM


250 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

252 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

254 
	}
}

292 
	$Sy°emC‹eClockUpd©e
()

294 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

297 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

299 
tmp
)

302 
Sy°emC‹eClock
 = 
HSI_VALUE
;

305 
Sy°emC‹eClock
 = 
HSE_VALUE
;

312 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

313 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

315 i‡(
∂lsour˚
 != 0)

318 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

323 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

326 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

327 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

330 
Sy°emC‹eClock
 = 
HSI_VALUE
;

335 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

337 
Sy°emC‹eClock
 >>
tmp
;

338 
	}
}

348 
	$SëSysClock
()

353 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

356 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

361 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

362 
SèπUpCou¡î
++;

363 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

365 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

367 
HSESètus
 = (
uöt32_t
)0x01;

371 
HSESètus
 = (
uöt32_t
)0x00;

374 i‡(
HSESètus
 =(
uöt32_t
)0x01)

377 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

378 
PWR
->
CR
 |
PWR_CR_VOS
;

381 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

384 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV2
;

387 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV4
;

390 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

391 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

394 
RCC
->
CR
 |
RCC_CR_PLLON
;

397 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

402 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_5WS
;

405 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

406 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

409 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

418 
	}
}

426 #ifde‡
DATA_IN_ExtSRAM


435 
	$Sy°emInô_ExtMemCé
()

458 
RCC
->
AHB1ENR
 |= 0x00000078;

461 
GPIOD
->
AFR
[0] = 0x00cc00cc;

462 
GPIOD
->
AFR
[1] = 0xcccccccc;

464 
GPIOD
->
MODER
 = 0xaaaa0a0a;

466 
GPIOD
->
OSPEEDR
 = 0xffff0f0f;

468 
GPIOD
->
OTYPER
 = 0x00000000;

470 
GPIOD
->
PUPDR
 = 0x00000000;

473 
GPIOE
->
AFR
[0] = 0xcccccccc;

474 
GPIOE
->
AFR
[1] = 0xcccccccc;

476 
GPIOE
->
MODER
 = 0xaaaaaaaa;

478 
GPIOE
->
OSPEEDR
 = 0xffffffff;

480 
GPIOE
->
OTYPER
 = 0x00000000;

482 
GPIOE
->
PUPDR
 = 0x00000000;

485 
GPIOF
->
AFR
[0] = 0x00cccccc;

486 
GPIOF
->
AFR
[1] = 0xcccc0000;

488 
GPIOF
->
MODER
 = 0xaa000aaa;

490 
GPIOF
->
OSPEEDR
 = 0xff000fff;

492 
GPIOF
->
OTYPER
 = 0x00000000;

494 
GPIOF
->
PUPDR
 = 0x00000000;

497 
GPIOG
->
AFR
[0] = 0x00cccccc;

498 
GPIOG
->
AFR
[1] = 0x000000c0;

500 
GPIOG
->
MODER
 = 0x00080aaa;

502 
GPIOG
->
OSPEEDR
 = 0x000c0fff;

504 
GPIOG
->
OTYPER
 = 0x00000000;

506 
GPIOG
->
PUPDR
 = 0x00000000;

510 
RCC
->
AHB3ENR
 |= 0x00000001;

513 
FMC_B™k1
->
BTCR
[2] = 0x00001011;

514 
FMC_B™k1
->
BTCR
[3] = 0x00000201;

515 
FMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

545 
	}
}

548 #ifde‡
DATA_IN_ExtSDRAM


557 
	$Sy°emInô_ExtMemCé
()

559 
uöt32_t
 
tm¥eg
 = 0, 
timeout
 = 0xFFFF;

560 
uöt32_t
 
ödex
;

564 
RCC
->
AHB1ENR
 |= 0x000001FC;

567 
GPIOC
->
AFR
[0] = 0x0000000c;

568 
GPIOC
->
AFR
[1] = 0x00007700;

570 
GPIOC
->
MODER
 = 0x00a00002;

572 
GPIOC
->
OSPEEDR
 = 0x00a00002;

574 
GPIOC
->
OTYPER
 = 0x00000000;

576 
GPIOC
->
PUPDR
 = 0x00500000;

579 
GPIOD
->
AFR
[0] = 0x000000CC;

580 
GPIOD
->
AFR
[1] = 0xCC000CCC;

582 
GPIOD
->
MODER
 = 0xA02A000A;

584 
GPIOD
->
OSPEEDR
 = 0xA02A000A;

586 
GPIOD
->
OTYPER
 = 0x00000000;

588 
GPIOD
->
PUPDR
 = 0x00000000;

591 
GPIOE
->
AFR
[0] = 0xC00000CC;

592 
GPIOE
->
AFR
[1] = 0xCCCCCCCC;

594 
GPIOE
->
MODER
 = 0xAAAA800A;

596 
GPIOE
->
OSPEEDR
 = 0xAAAA800A;

598 
GPIOE
->
OTYPER
 = 0x00000000;

600 
GPIOE
->
PUPDR
 = 0x00000000;

603 
GPIOF
->
AFR
[0] = 0xcccccccc;

604 
GPIOF
->
AFR
[1] = 0xcccccccc;

606 
GPIOF
->
MODER
 = 0xAA800AAA;

608 
GPIOF
->
OSPEEDR
 = 0xAA800AAA;

610 
GPIOF
->
OTYPER
 = 0x00000000;

612 
GPIOF
->
PUPDR
 = 0x00000000;

615 
GPIOG
->
AFR
[0] = 0xcccccccc;

616 
GPIOG
->
AFR
[1] = 0xcccccccc;

618 
GPIOG
->
MODER
 = 0xaaaaaaaa;

620 
GPIOG
->
OSPEEDR
 = 0xaaaaaaaa;

622 
GPIOG
->
OTYPER
 = 0x00000000;

624 
GPIOG
->
PUPDR
 = 0x00000000;

627 
GPIOH
->
AFR
[0] = 0x00C0CC00;

628 
GPIOH
->
AFR
[1] = 0xCCCCCCCC;

630 
GPIOH
->
MODER
 = 0xAAAA08A0;

632 
GPIOH
->
OSPEEDR
 = 0xAAAA08A0;

634 
GPIOH
->
OTYPER
 = 0x00000000;

636 
GPIOH
->
PUPDR
 = 0x00000000;

639 
GPIOI
->
AFR
[0] = 0xCCCCCCCC;

640 
GPIOI
->
AFR
[1] = 0x00000CC0;

642 
GPIOI
->
MODER
 = 0x0028AAAA;

644 
GPIOI
->
OSPEEDR
 = 0x0028AAAA;

646 
GPIOI
->
OTYPER
 = 0x00000000;

648 
GPIOI
->
PUPDR
 = 0x00000000;

652 
RCC
->
AHB3ENR
 |= 0x00000001;

655 
FMC_B™k5_6
->
SDCR
[0] = 0x000029D0;

656 
FMC_B™k5_6
->
SDTR
[0] = 0x01115351;

660 
FMC_B™k5_6
->
SDCMR
 = 0x00000011;

661 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

662 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

664 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

668 
ödex
 = 0; index<1000; index++);

671 
FMC_B™k5_6
->
SDCMR
 = 0x00000012;

672 
timeout
 = 0xFFFF;

673 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

675 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

679 
FMC_B™k5_6
->
SDCMR
 = 0x00000073;

680 
timeout
 = 0xFFFF;

681 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

683 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

687 
FMC_B™k5_6
->
SDCMR
 = 0x00046014;

688 
timeout
 = 0xFFFF;

689 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

691 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

695 
tm¥eg
 = 
FMC_B™k5_6
->
SDRTR
;

696 
FMC_B™k5_6
->
SDRTR
 = (
tm¥eg
 | (0x0000027C<<1));

699 
tm¥eg
 = 
FMC_B™k5_6
->
SDCR
[0];

700 
FMC_B™k5_6
->
SDCR
[0] = (
tm¥eg
 & 0xFFFFFDFF);

726 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\CONFIG\app_cfg.h

29 #i‚de‡ 
__APP_CFG_H__


30 
	#__APP_CFG_H__


	)

38 
	#APP_OS_PROBE_EN
 
DEF_ENABLED


	)

39 
	#APP_PROBE_COM_EN
 
DEF_ENABLED


	)

54 
	#APP_TASK_START_PRIO
 3

	)

55 
	#USART1_MUTEX_PRIO
 6

	)

56 
	#APP_TASK_1_PRIO
 5

	)

57 
	#APP_TASK_Prötf_PRIO
 4

	)

60 
	#OS_TASK_TMR_PRIO
 (
OS_LOWEST_PRIO
 - 2)

	)

69 
	#APP_TASK_START_STK_SIZE
 512

	)

70 
	#APP_TASK_1_STK_SIZE
 1024

	)

71 
	#APP_TASK_Prötf_STK_SIZE
 1024

	)

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\CONFIG\os_cfg.h

25 #i‚de‡
OS_CFG_H


26 
	#OS_CFG_H


	)

30 
	#OS_APP_HOOKS_EN
 0u

	)

31 
	#OS_ARG_CHK_EN
 1u

	)

32 
	#OS_CPU_HOOKS_EN
 1u

	)

34 
	#OS_DEBUG_EN
 0u

	)

36 
	#OS_EVENT_MULTI_EN
 1u

	)

37 
	#OS_EVENT_NAME_EN
 1u

	)

39 
	#OS_LOWEST_PRIO
 63u

	)

42 
	#OS_MAX_EVENTS
 10u

	)

43 
	#OS_MAX_FLAGS
 5u

	)

44 
	#OS_MAX_MEM_PART
 5u

	)

45 
	#OS_MAX_QS
 4u

	)

46 
	#OS_MAX_TASKS
 20u

	)

48 
	#OS_SCHED_LOCK_EN
 1u

	)

50 
	#OS_TICK_STEP_EN
 1u

	)

51 
	#OS_TICKS_PER_SEC
 1000u

	)

55 
	#OS_TASK_TMR_STK_SIZE
 128u

	)

56 
	#OS_TASK_STAT_STK_SIZE
 128u

	)

57 
	#OS_TASK_IDLE_STK_SIZE
 128u

	)

61 
	#OS_TASK_CHANGE_PRIO_EN
 1u

	)

62 
	#OS_TASK_CREATE_EN
 1u

	)

63 
	#OS_TASK_CREATE_EXT_EN
 1u

	)

64 
	#OS_TASK_DEL_EN
 1u

	)

65 
	#OS_TASK_NAME_EN
 1u

	)

66 
	#OS_TASK_PROFILE_EN
 1u

	)

67 
	#OS_TASK_QUERY_EN
 1u

	)

68 
	#OS_TASK_REG_TBL_SIZE
 1u

	)

69 
	#OS_TASK_STAT_EN
 1u

	)

70 
	#OS_TASK_STAT_STK_CHK_EN
 1u

	)

71 
	#OS_TASK_SUSPEND_EN
 1u

	)

72 
	#OS_TASK_SW_HOOK_EN
 1u

	)

76 
	#OS_FLAG_EN
 1u

	)

77 
	#OS_FLAG_ACCEPT_EN
 1u

	)

78 
	#OS_FLAG_DEL_EN
 1u

	)

79 
	#OS_FLAG_NAME_EN
 1u

	)

80 
	#OS_FLAG_QUERY_EN
 1u

	)

81 
	#OS_FLAG_WAIT_CLR_EN
 1u

	)

82 
	#OS_FLAGS_NBITS
 16u

	)

86 
	#OS_MBOX_EN
 1u

	)

87 
	#OS_MBOX_ACCEPT_EN
 1u

	)

88 
	#OS_MBOX_DEL_EN
 1u

	)

89 
	#OS_MBOX_PEND_ABORT_EN
 1u

	)

90 
	#OS_MBOX_POST_EN
 1u

	)

91 
	#OS_MBOX_POST_OPT_EN
 1u

	)

92 
	#OS_MBOX_QUERY_EN
 1u

	)

96 
	#OS_MEM_EN
 1u

	)

97 
	#OS_MEM_NAME_EN
 1u

	)

98 
	#OS_MEM_QUERY_EN
 1u

	)

102 
	#OS_MUTEX_EN
 1u

	)

103 
	#OS_MUTEX_ACCEPT_EN
 1u

	)

104 
	#OS_MUTEX_DEL_EN
 1u

	)

105 
	#OS_MUTEX_QUERY_EN
 1u

	)

109 
	#OS_Q_EN
 1u

	)

110 
	#OS_Q_ACCEPT_EN
 1u

	)

111 
	#OS_Q_DEL_EN
 1u

	)

112 
	#OS_Q_FLUSH_EN
 1u

	)

113 
	#OS_Q_PEND_ABORT_EN
 1u

	)

114 
	#OS_Q_POST_EN
 1u

	)

115 
	#OS_Q_POST_FRONT_EN
 1u

	)

116 
	#OS_Q_POST_OPT_EN
 1u

	)

117 
	#OS_Q_QUERY_EN
 1u

	)

121 
	#OS_SEM_EN
 1u

	)

122 
	#OS_SEM_ACCEPT_EN
 1u

	)

123 
	#OS_SEM_DEL_EN
 1u

	)

124 
	#OS_SEM_PEND_ABORT_EN
 1u

	)

125 
	#OS_SEM_QUERY_EN
 1u

	)

126 
	#OS_SEM_SET_EN
 1u

	)

130 
	#OS_TIME_DLY_HMSM_EN
 1u

	)

131 
	#OS_TIME_DLY_RESUME_EN
 1u

	)

132 
	#OS_TIME_GET_SET_EN
 1u

	)

133 
	#OS_TIME_TICK_HOOK_EN
 1u

	)

137 
	#OS_TMR_EN
 1u

	)

138 
	#OS_TMR_CFG_MAX
 16u

	)

139 
	#OS_TMR_CFG_NAME_EN
 1u

	)

140 
	#OS_TMR_CFG_WHEEL_SIZE
 8u

	)

141 
	#OS_TMR_CFG_TICKS_PER_SEC
 10u

	)

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_cpu.h

23 #i‚de‡ 
OS_CPU_H


24 
	#OS_CPU_H


	)

27 #ifde‡ 
OS_CPU_GLOBALS


28 
	#OS_CPU_EXT


	)

30 
	#OS_CPU_EXT
 

	)

33 #i‚de‡ 
OS_CPU_EXCEPT_STK_SIZE


34 
	#OS_CPU_EXCEPT_STK_SIZE
 128u

	)

44 
	tBOOLEAN
;

45 
	tINT8U
;

46 sig√d 
	tINT8S
;

47 
	tINT16U
;

48 sig√d 
	tINT16S
;

49 
	tINT32U
;

50 sig√d 
	tINT32S
;

51 
	tFP32
;

52 
	tFP64
;

54 
	tOS_STK
;

55 
	tOS_CPU_SR
;

79 
	#OS_CRITICAL_METHOD
 3u

	)

81 #i‡
OS_CRITICAL_METHOD
 == 3u

82 
	#OS_ENTER_CRITICAL
(Ë{
˝u_§
 = 
	`OS_CPU_SR_Save
();}

	)

83 
	#OS_EXIT_CRITICAL
(Ë{
	`OS_CPU_SR_Re°‹e
(
˝u_§
);}

	)

92 
	#OS_STK_GROWTH
 1u

	)

94 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

102 
OS_CPU_EXT
 
OS_STK
 
	gOS_CPU_Ex˚±Stk
[
OS_CPU_EXCEPT_STK_SIZE
];

103 
OS_CPU_EXT
 
OS_STK
 *
	gOS_CPU_Ex˚±StkBa£
;

111 #i‡
OS_CRITICAL_METHOD
 == 3u

112 
OS_CPU_SR
 
OS_CPU_SR_Save
();

113 
OS_CPU_SR_Re°‹e
(
OS_CPU_SR
 
˝u_§
);

116 
OSCtxSw
();

117 
OSI¡CtxSw
();

118 
OSSèπHighRdy
();

120 
OS_CPU_PídSVH™dÀr
();

123 
OS_CPU_SysTickH™dÀr
();

124 
OS_CPU_SysTickInô
();

126 
INT32U
 
OS_CPU_SysTickClkFªq
();

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_cpu_a.S

3 @ 
	guC
/
	gOS
-
	gII


4 @ 
The
 
	gRól
-
Time
 
	gKî√l


7 @ (
	gc
Ë
	gC›yright
 2010@ 
	gMi¸ium
, 
	gInc
.@ 
	gWe°⁄
, 
	gFL


8 @ 
AŒ
 
rights
 
	gª£rved
. 
PrŸe˘ed
 
by
 
öã∫©i⁄Æ
 
c›yright
 
	gœws
.

10 @ 
ARM
 
	gC‹ãx
-
M4
 
	gP‹t


12 @ 
	gFûe
 : 
OS_CPU_A
.
ASM


13 @ 
Vîsi⁄
 : 
V2
.92

14 @ 
By
 : 
JJL


15 @ 
BAN


17 @ 
F‹
 : 
ARMv7
 
C‹ãx
-
M4


18 @@
Mode
 : 
Thumb
-2 
ISA


19 @ 
Toﬁchaö
 : 
GNU
 
C
 
Compûî


25 @ 
PUBLIC
 
FUNCTIONS


28 .
OSRu¬ög
 @ 
Exã∫Æ
 
ª„ªn˚s


29 .
OSPrioCur


30 .
OSPrioHighRdy


31 .
OSTCBCur


32 .
OSTCBHighRdy


33 .
OSI¡Exô


34 .
OSTaskSwHook


35 .
OS_CPU_Ex˚±StkBa£


37 .
globÆ
 
OS_CPU_SR_Save
 @ 
Fun˘i⁄s
 
de˛¨ed
 
ö
 
this
 
fûe


38 .
globÆ
 
OS_CPU_SR_Re°‹e


39 .
globÆ
 
OSSèπHighRdy


40 .
globÆ
 
OSCtxSw


41 .
globÆ
 
OSI¡CtxSw


42 .
globÆ
 
OS_CPU_PídSVH™dÀr


44 @
PAGE


46 @ 
EQUATES


49 .
equ
 
NVIC_INT_CTRL
, 0xE000ED04 @ 
I¡îru±
 
c⁄åﬁ
 
°©e
 .

50 .
equ
 
NVIC_SYSPRI14
, 0xE000ED22 @ 
Sy°em
 
¥i‹ôy
 (priority 14).

51 .
equ
 
NVIC_PENDSV_PRI
, 0xFF @ 
PídSV
 
¥i‹ôy
 
vÆue
 (
lowe°
).

52 .
equ
 
NVIC_PENDSVSET
, 0x10000000 @ 
VÆue
 
to
 
åiggî
 
PídSV
 
ex˚±i⁄
.

56 @ 
CODE
 
GENERATION
 
DIRECTIVES


59 .
ãxt


60 .
Æign
 2

61 .
thumb


62 .
sy¡ax
 
unifõd


65 @ 
CRITICAL
 
SECTION
 
METHOD
 3 
FUNCTIONS


67 @ 
Des¸ùti⁄
: 
DißbÀ
/
E«bÀ
 
öãºu±s
 
by
 
¥e£rvög
 
the
 
°©e
 
of
 i¡îru±s. 
GíîÆly
 
•ókög
 
you


68 @ 
would
 
°‹e
 
the
 
°©e
 
of
Åhê
öãºu±
 
dißbÀ
 
Êag
 
ö
Åhê
loˇl
 
v¨übÀ
 '˝u_§' 
™d
 
thí


69 @ 
dißbÀ
 
öãºu±s
. '˝u_§' 
is
 
Æloˇãd
 
ö
 
Æl
 
of
 
uC
/
OS
-
II
's functionsÅhatÇeedÅo

70 @ 
dißbÀ
 
öãºu±s
. 
You
 
would
 
ª°‹e
 
the
 
öãºu±
 dißbÀ 
°©e
 
by
 
c›yög
 
back
 'cpu_sr'

71 @ 
öto
 
the
 
CPU
's statusÑegister.

73 @ 
PrŸŸy≥s
 : 
OS_CPU_SR
 
OS_CPU_SR_Save
()@

74 @ 
OS_CPU_SR_Re°‹e
(
OS_CPU_SR
 
˝u_§
)@

77 @ 
	$NŸe
(
s
Ë: 1Ë
The£
 
fun˘i⁄s
 
¨e
 
u£d
 
ö
 
gíîÆ
 
like
 
this
:

79 @ 
	`Task
 (*
p_¨g
)

81 @ #i‡
OS_CRITICAL_METHOD
 == 3

82 @ 
OS_CPU_SR
 
˝u_§
;

87 @ 
	`OS_ENTER_CRITICAL
();

90 @ 
	`OS_EXIT_CRITICAL
();

93 @ 
	}
}

95 .
thumb_func


96 
OS_CPU_SR_Save
:

97 
MRS
 
R0
, 
PRIMASK
 @ 
Së
 
¥io
 
mask
 
to
 mask 
	$Æl
 (
ex˚±
 
Áu…s
)

98 
CPSID
 
I


99 
BX
 
LR


101 .
thumb_func


102 
OS_CPU_SR_Re°‹e
:

103 
MSR
 
PRIMASK
, 
R0


104 
BX
 
LR


106 @
PAGE


108 @ 
START
 
MULTITASKING


109 @ 
	`OSSèπHighRdy
()

111 @ 
	$NŸe
(
s
Ë: 1Ë
This
 
fun˘i⁄
 
åiggîs
 
a
 
PídSV
 
	$ex˚±i⁄
 (
es£¡üŒy
, 
ˇu£s
 
a
 
c⁄ãxt
 Ë
to
 
ˇu£


112 @ 
the
 
fú°
 
èsk
 
to
 
°¨t
.

114 @ 2Ë
	$OSSèπHighRdy
(Ë
MUST
:

115 @ 
a
Ë
Sëup
 
PídSV
 
ex˚±i⁄
 
¥i‹ôy
 
to
 
lowe°
;

116 @ 
b
Ë
Së
 
öôül
 
PSP
 
to
 0,Åÿ
ãŒ
 
c⁄ãxt
 
swôchî
 
this
 
is
 
fú°
 
run
;

117 @ 
c
Ë
Së
 
the
 
maö
 
°ack
 
to
 
OS_CPU_Ex˚±StkBa£


118 @ 
d
Ë
Së
 
OSRu¬ög
 
to
 
TRUE
;

119 @ 
e
Ë
Triggî
 
PídSV
 
ex˚±i⁄
;

120 @ 
f
Ë
E«bÀ
 
	`öãºu±s
 (
èsks
 
wûl
 
run
 
wôh
 
öãºu±s
 
íabÀd
).

123 .
thumb_func


124 
OSSèπHighRdy
:

125 
LDR
 
R0
, =
NVIC_SYSPRI14
 @ 
Së
 
the
 
PídSV
 
ex˚±i⁄
 
¥i‹ôy


126 
LDR
 
R1
, =
NVIC_PENDSV_PRI


127 
STRB
 
R1
, [
R0
]

129 
MOVS
 
R0
, #0 @ 
Së
 
the
 
PSP
 
to
 0 
öôül
 
c⁄ãxt
 
ˇŒ


130 
MSR
 
PSP
, 
R0


132 
LDR
 
R0
, =
OS_CPU_Ex˚±StkBa£
 @ 
Inôülize
 
the
 
MSP
 
to
Åhe OS_CPU_ExceptStkBase

133 
LDR
 
R1
, [
R0
]

134 
MSR
 
MSP
, 
R1


136 
LDR
 
R0
, =
OSRu¬ög
 @ OSRu¬ög = 
TRUE


137 
MOVS
 
R1
, #1

138 
STRB
 
R1
, [
R0
]

140 
LDR
 
R0
, =
NVIC_INT_CTRL
 @ 
Triggî
 
the
 
PídSV
 
	$ex˚±i⁄
 (
ˇu£s
 
c⁄ãxt
 )

141 
LDR
 
R1
, =
NVIC_PENDSVSET


142 
STR
 
R1
, [
R0
]

144 
CPSIE
 
I
 @ 
E«bÀ
 
öãºu±s
 
©
 
¥o˚ss‹
 
Àvñ


146 
OSSèπH™g
:

147 
B
 
OSSèπH™g
 @ 
Should
 
√vî
 
gë
 
hîe


150 @
PAGE


152 @ 
PERFORM
 
A
 
CONTEXT
 
	`SWITCH
 (
From
 
èsk
 
Àvñ
Ë- 
	`OSCtxSw
()

154 @ 
	$NŸe
(
s
Ë: 1Ë
	$OSCtxSw
(Ë
is
 
ˇŒed
 
whí
 
OS
 
w™ts
 
to
 
≥rf‹m
 
a
 
èsk
 
c⁄ãxt
 . 
This
 
fun˘i⁄


155 @ 
åiggîs
 
the
 
PídSV
 
ex˚±i⁄
 
which
 
is
 
whîe
Åhê
ªÆ
 
w‹k
 i†
d⁄e
.

158 .
thumb_func


159 
OSCtxSw
:

160 
LDR
 
R0
, =
NVIC_INT_CTRL
 @ 
Triggî
 
the
 
PídSV
 
	$ex˚±i⁄
 (
ˇu£s
 
c⁄ãxt
 )

161 
LDR
 
R1
, =
NVIC_PENDSVSET


162 
STR
 
R1
, [
R0
]

163 
BX
 
LR


166 @
PAGE


168 @ 
PERFORM
 
A
 
CONTEXT
 
	`SWITCH
 (
From
 
öãºu±
 
Àvñ
Ë- 
	`OSI¡CtxSw
()

170 @ 
	$NŸe
(
s
Ë: 1Ë
	$OSI¡CtxSw
(Ë
is
 
ˇŒed
 
by
 
	$OSI¡Exô
(Ë
whí
 
ô
 
dëîmöes
 
a
 
c⁄ãxt
 
is
 
√eded
 
as


171 @ 
the
 
ªsu…
 
of
 
™
 
öãºu±
. 
This
 
fun˘i⁄
 
sim∂y
 
åiggîs
 
a
 
PídSV
 
ex˚±i⁄
 
which
 
wûl


172 @ 
be
 
h™dÀd
 
whí
 
thîe
 
¨e
 
no
 
m‹e
 
öãºu±s
 
a˘ive
 
™d
 i¡îru±†¨ê
íabÀd
.

175 .
thumb_func


176 
OSI¡CtxSw
:

177 
LDR
 
R0
, =
NVIC_INT_CTRL
 @ 
Triggî
 
the
 
PídSV
 
	$ex˚±i⁄
 (
ˇu£s
 
c⁄ãxt
 )

178 
LDR
 
R1
, =
NVIC_PENDSVSET


179 
STR
 
R1
, [
R0
]

180 
BX
 
LR


183 @
PAGE


185 @ 
HANDLE
 
PídSV
 
EXCEPTION


186 @ 
	`OS_CPU_PídSVH™dÀr
()

188 @ 
	$NŸe
(
s
Ë: 1Ë
PídSV
 
is
 
u£d
 
to
 
ˇu£
 
a
 
c⁄ãxt
 . 
This
 i†®
ªcommíded
 
mëhod
 
≥rf‹mög


189 @ 
c⁄ãxt
 
swôches
 
wôh
 
C‹ãx
-
M4
. 
This
 
is
 
beˇu£
 
the
 C‹ãx-M4áuto-
ßves
 
hÆf
 
of
Åhe

190 @ 
¥o˚ss‹
 
c⁄ãxt
 
⁄
 
™y
 
ex˚±i⁄
, 
™d
 
ª°‹es
 
ßme
 o¿ 
‰om
Éx˚±i⁄. 
So
 
⁄ly


191 @ 
ßvög
 
of
 
R4
-
R11
 
is
 
ªquúed
 
™d
 
fixög
 
up
 
the
 
°ack
 
poöãrs
. 
Usög
Åhê
PídSV
 
ex˚±i⁄


192 @ 
this
 
way
 
móns
 
th©
 
c⁄ãxt
 
ßvög
 
™d
 
ª°‹ög
 
is
 
idítiˇl
 
whëhî
 
ô
 i†
öôüãd
 
‰om


193 @ 
a
 
thªad
 
‹
 
occurs
 
due
 
to
 
™
 
öãºu±
 o∏
ex˚±i⁄
.

195 @ 2Ë
P£udo
-
code
 
is
:

196 @ 
a
Ë
Gë
 
the
 
¥o˚ss
 
SP
, 0 
thí
 
	$skù
 (
d
Ë
the
 
ßvög
 
	`∑π
 (
fú°
 
c⁄ãxt
 );

197 @ 
b
Ë
Save
 
ªmaöög
 
ªgs
 
r4
-
r11
 
⁄
 
¥o˚ss
 
°ack
;

198 @ 
c
Ë
Save
 
the
 
¥o˚ss
 
SP
 
ö
 
ôs
 
TCB
, 
OSTCBCur
->
OSTCBStkPå
 = SP;

199 @ 
d
Ë
CÆl
 
	`OSTaskSwHook
();

200 @ 
e
Ë
Gë
 
cuºít
 
high
 
¥i‹ôy
, 
OSPrioCur
 = 
OSPrioHighRdy
;

201 @ 
f
Ë
Gë
 
cuºít
 
ªady
 
thªad
 
TCB
, 
OSTCBCur
 = 
OSTCBHighRdy
;

202 @ 
g
Ë
Gë
 
√w
 
¥o˚ss
 
SP
 
‰om
 
TCB
, SP = 
OSTCBHighRdy
->
OSTCBStkPå
;

203 @ 
h
Ë
Re°‹e
 
R4
-
R11
 
‰om
 
√w
 
¥o˚ss
 
°ack
;

204 @ 
i
Ë
Pîf‹m
 
ex˚±i⁄
  
which
 
wûl
 
ª°‹e
 
ªmaöög
 
c⁄ãxt
.

206 @ 3Ë
On
 
íåy
 
öto
 
PídSV
 
h™dÀr
:

207 @ 
a
Ë
The
 
fﬁlowög
 
have
 
bìn
 
ßved
 
⁄
 
the
 
¥o˚ss
 
	$°ack
 (
by
 
¥o˚ss‹
):

208 @ 
xPSR
, 
PC
, 
LR
, 
R12
, 
R0
-
R3


209 @ 
b
Ë
Pro˚ss‹
 
mode
 
is
 
swôched
 
to
 
H™dÀr
 
	`mode
 (
‰om
 
Thªad
 mode)

210 @ 
c
Ë
Sèck
 
is
 
Maö
 
	`°ack
 (
swôched
 
‰om
 
Pro˚ss
 
°ack
)

211 @ 
d
Ë
OSTCBCur
 
poöts
 
to
 
the
 
OS_TCB
 
of
Åhê
èsk
Åÿ
su•íd


212 @ 
OSTCBHighRdy
 
poöts
 
to
 
the
 
OS_TCB
 
of
Åhê
èsk
Åÿ
ªsume


214 @ 4Ë
Sö˚
 
PídSV
 
is
 
£t
 
to
 
lowe°
 
¥i‹ôy
 
ö
 
the
 
	`sy°em
 (
by
 
	$OSSèπHighRdy
(Ë
above
), 
we


215 @ 
know
 
th©
 
ô
 
wûl
 
⁄ly
 
be
 
run
 
whí
 
no
 
Ÿhî
 
ex˚±i⁄
 
‹
 
öãºu±
 
is
 
a˘ive
, 
™d


216 @ 
thîef‹e
 
ß„
 
to
 
assume
 
th©
 
c⁄ãxt
 
beög
 
swôched
 
out
 
was
 
usög
 
the
 
¥o˚ss
 
	`°ack
 (
PSP
).

219 .
thumb_func


220 
OS_CPU_PídSVH™dÀr
:

221 
CPSID
 
I
 @ 
Pªvít
 
öãºu±i⁄
 
durög
 
c⁄ãxt
 

222 
MRS
 
R0
, 
PSP
 @ PSP 
is
 
¥o˚ss
 
°ack
 
poöãr


223 
CBZ
 
R0
, 
OS_CPU_PídSVH™dÀr_noßve
 @ 
Skù
 
ßve
 
the
 
fú°
 
time


225 
SUBS
 
R0
, R0, #0
x20
 @ 
Save
 
ªmaöög
 
ªgs
 
r4
-11 
⁄
 
¥o˚ss
 
°ack


226 
STM
 
R0
, {
R4
-
R11
}

228 
LDR
 
	gR1
, =
OSTCBCur
 @ OSTCBCur->
OSTCBStkPå
 = 
SP
;

229 
LDR
 
	gR1
, [
R1
]

230 
STR
 
	gR0
, [
R1
] @ 
R0
 
is
 
SP
 
of
 
¥o˚ss
 
beög
 
swôched
 
	gout


232 @ 
At
 
this
 
	gpoöt
, 
ítúe
 
c⁄ãxt
 
of
 
¥o˚ss
 
has
 
bìn
 
ßved


233 
	gOS_CPU_PídSVH™dÀr_noßve
:

234 
PUSH
 {
R14
} @ 
Save
 
LR
 
exc_ªtu∫
 
vÆue


235 
LDR
 
R0
, =
OSTaskSwHook
 @ OSTaskSwHook();

236 
BLX
 
R0


237 
	gPOP
 {
	gR14
}

239 
LDR
 
	gR0
, =
OSPrioCur
 @ OSPrioCu∏
OSPrioHighRdy
;

240 
LDR
 
	gR1
, =
OSPrioHighRdy


241 
LDRB
 
R2
, [
R1
]

242 
STRB
 
	gR2
, [
R0
]

244 
LDR
 
	gR0
, =
OSTCBCur
 @ OSTCBCu∏
OSTCBHighRdy
;

245 
LDR
 
	gR1
, =
OSTCBHighRdy


246 
LDR
 
R2
, [
R1
]

247 
STR
 
	gR2
, [
R0
]

249 
LDR
 
	gR0
, [
R2
] @ 
R0
 
is
 
√w
 
¥o˚ss
 
	gSP
; SP = 
OSTCBHighRdy
->
OSTCBStkPå
;

250 
LDM
 
	gR0
, {
	gR4
-
	gR11
} @ 
Re°‹e
 
	gr4
-11 
‰om
 
√w
 
¥o˚ss
 
°ack


251 
ADDS
 
	gR0
, R0, #0
x20


252 
MSR
 
	gPSP
, 
	gR0
 @ 
Lﬂd
 
PSP
 
wôh
 
√w
 
¥o˚ss
 
SP


253 
ORR
 
	gLR
, LR, #0
	gx04
 @ 
Ensuª
 
ex˚±i⁄
  
u£s
 
¥o˚ss
 
°ack


254 
CPSIE
 
I


255 
BX
 
	gLR
 @ 
Ex˚±i⁄
  
wûl
 
ª°‹e
 
ªmaöög
 
	gc⁄ãxt


257 .
	gíd


	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_cpu_c.c

23 
	#OS_CPU_GLOBALS


	)

24 
	~<ucos_ii.h
>

25 
	~"°m32f4xx.h
"

32 #i‡
OS_TMR_EN
 > 0u

33 
INT16U
 
	gOSTmrCå
;

42 
	#OS_CPU_CM3_NVIC_ST_CTRL
 (*((vﬁ©ûê
INT32U
 *)0xE000E010uL)Ë

	)

43 
	#OS_CPU_CM3_NVIC_ST_RELOAD
 (*((vﬁ©ûê
INT32U
 *)0xE000E014uL)Ë

	)

44 
	#OS_CPU_CM3_NVIC_ST_CURRENT
 (*((vﬁ©ûê
INT32U
 *)0xE000E018uL)Ë

	)

45 
	#OS_CPU_CM3_NVIC_ST_CAL
 (*((vﬁ©ûê
INT32U
 *)0xE000E01CuL)Ë

	)

46 
	#OS_CPU_CM3_NVIC_PRIO_ST
 (*((vﬁ©ûê
INT8U
 *)0xE000ED23uL)Ë

	)

48 
	#OS_CPU_CM3_NVIC_ST_CTRL_COUNT
 0x00010000uL

	)

49 
	#OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC
 0x00000004uL

	)

50 
	#OS_CPU_CM3_NVIC_ST_CTRL_INTEN
 0x00000002uL

	)

51 
	#OS_CPU_CM3_NVIC_ST_CTRL_ENABLE
 0x00000001uL

	)

52 
	#OS_CPU_CM3_NVIC_PRIO_MIN
 0xFFu

	)

66 #i‡
OS_CPU_HOOKS_EN
 > 0u

67 
	$OSInôHookBegö
 ()

69 
INT32U
 
size
;

70 
OS_STK
 *
p°k
;

73 
p°k
 = &
OS_CPU_Ex˚±Stk
[0];

74 
size
 = 
OS_CPU_EXCEPT_STK_SIZE
;

75 
size
 > 0u) {

76 
size
--;

77 *
p°k
++ = (
OS_STK
)0;

80 
OS_CPU_Ex˚±StkBa£
 = &
OS_CPU_Ex˚±Stk
[
OS_CPU_EXCEPT_STK_SIZE
 - 1u];

82 #i‡
OS_TMR_EN
 > 0u

83 
OSTmrCå
 = 0u;

85 
	}
}

100 #i‡
OS_CPU_HOOKS_EN
 > 0u

101 
	$OSInôHookEnd
 ()

103 
	}
}

117 #i‡
OS_CPU_HOOKS_EN
 > 0u

118 
	$OSTaskCª©eHook
 (
OS_TCB
 *
±cb
)

120 #i‡
OS_APP_HOOKS_EN
 > 0u

121 
	`Aµ_TaskCª©eHook
(
±cb
);

123 ()
±cb
;

125 
	}
}

140 #i‡
OS_CPU_HOOKS_EN
 > 0u

141 
	$OSTaskDñHook
 (
OS_TCB
 *
±cb
)

143 #i‡
OS_APP_HOOKS_EN
 > 0u

144 
	`Aµ_TaskDñHook
(
±cb
);

146 ()
±cb
;

148 
	}
}

163 #i‡
OS_CPU_HOOKS_EN
 > 0u

164 
	$OSTaskIdÀHook
 ()

166 #i‡
OS_APP_HOOKS_EN
 > 0u

167 
	`Aµ_TaskIdÀHook
();

169 
	}
}

185 #i‡
OS_CPU_HOOKS_EN
 > 0u

186 
	$OSTaskRëu∫Hook
 (
OS_TCB
 *
±cb
)

188 #i‡
OS_APP_HOOKS_EN
 > 0u

189 
	`Aµ_TaskRëu∫Hook
(
±cb
);

191 ()
±cb
;

193 
	}
}

207 #i‡
OS_CPU_HOOKS_EN
 > 0u

208 
	$OSTaskSètHook
 ()

210 #i‡
OS_APP_HOOKS_EN
 > 0u

211 
	`Aµ_TaskSètHook
();

213 
	}
}

245 
OS_STK
 *
OSTaskStkInô
 ((*
èsk
)(*
p_¨g
), *p_¨g, OS_STK *
±os
, 
INT16U
 
›t
)

247 
OS_STK
 *
°k
;

250 ()
›t
;

251 
°k
 = 
±os
;

254 *(
°k
Ë(
INT32U
)0x01000000uL;

255 *(--
°k
Ë(
INT32U
)
èsk
;

256 *(--
°k
Ë(
INT32U
)
OS_TaskRëu∫
;

257 *(--
°k
Ë(
INT32U
)0x12121212uL;

258 *(--
°k
Ë(
INT32U
)0x03030303uL;

259 *(--
°k
Ë(
INT32U
)0x02020202uL;

260 *(--
°k
Ë(
INT32U
)0x01010101uL;

261 *(--
°k
Ë(
INT32U
)
p_¨g
;

264 *(--
°k
Ë(
INT32U
)0x11111111uL;

265 *(--
°k
Ë(
INT32U
)0x10101010uL;

266 *(--
°k
Ë(
INT32U
)0x09090909uL;

267 *(--
°k
Ë(
INT32U
)0x08080808uL;

268 *(--
°k
Ë(
INT32U
)0x07070707uL;

269 *(--
°k
Ë(
INT32U
)0x06060606uL;

270 *(--
°k
Ë(
INT32U
)0x05050505uL;

271 *(--
°k
Ë(
INT32U
)0x04040404uL;

273  (
°k
);

274 
	}
}

291 #i‡(
OS_CPU_HOOKS_EN
 > 0uË&& (
OS_TASK_SW_HOOK_EN
 > 0u)

292 
	$OSTaskSwHook
 ()

294 #i‡
OS_APP_HOOKS_EN
 > 0u

295 
	`Aµ_TaskSwHook
();

297 
	}
}

311 #i‡
OS_CPU_HOOKS_EN
 > 0u

312 
	$OSTCBInôHook
 (
OS_TCB
 *
±cb
)

314 #i‡
OS_APP_HOOKS_EN
 > 0u

315 
	`Aµ_TCBInôHook
(
±cb
);

317 ()
±cb
;

319 
	}
}

333 #i‡(
OS_CPU_HOOKS_EN
 > 0uË&& (
OS_TIME_TICK_HOOK_EN
 > 0u)

334 
	$OSTimeTickHook
 ()

336 #i‡
OS_APP_HOOKS_EN
 > 0u

337 
	`Aµ_TimeTickHook
();

340 #i‡
OS_TMR_EN
 > 0u

341 
OSTmrCå
++;

342 i‡(
OSTmrCå
 >(
OS_TICKS_PER_SEC
 / 
OS_TMR_CFG_TICKS_PER_SEC
)) {

343 
OSTmrCå
 = 0;

344 
	`OSTmrSig«l
();

347 
	}
}

363 
	$OS_CPU_SysTickH™dÀr
 ()

365 
OS_CPU_SR
 
˝u_§
;

366 
	`OS_ENTER_CRITICAL
();

367 
OSI¡Ne°ög
++;

368 
	`OS_EXIT_CRITICAL
();

369 
	`OSTimeTick
();

370 
	`OSI¡Exô
();

371 
	}
}

385 
	$OS_CPU_SysTickInô
 ()

388 
	`SysTick_C⁄fig
(
	`OS_CPU_SysTickClkFªq
(Ë/ 
OS_TICKS_PER_SEC
)!=0);

389 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_dbg.c

24 
	~<ucos_ii.h
>

32 
INT16U
 c⁄° 
	gOSDebugEn
 = 
OS_DEBUG_EN
;

34 #i‡
OS_DEBUG_EN
 > 0u

36 
INT32U
 c⁄° 
	gOSEndü¬essTe°
 = 0x12345678uL;

38 
INT16U
 c⁄° 
	gOSEvítEn
 = 
OS_EVENT_EN
;

39 
INT16U
 c⁄° 
	gOSEvítMax
 = 
OS_MAX_EVENTS
;

40 
INT16U
 c⁄° 
	gOSEvítNameEn
 = 
OS_EVENT_NAME_EN
;

41 #i‡(
OS_EVENT_EN
Ë&& (
OS_MAX_EVENTS
 > 0u)

42 
INT16U
 c⁄° 
	gOSEvítSize
 = (
OS_EVENT
);

43 
INT16U
 c⁄° 
	gOSEvítTblSize
 = (
OSEvítTbl
);

45 
INT16U
 c⁄° 
	gOSEvítSize
 = 0u;

46 
INT16U
 c⁄° 
	gOSEvítTblSize
 = 0u;

48 
INT16U
 c⁄° 
	gOSEvítMu…iEn
 = 
OS_EVENT_MULTI_EN
;

51 
INT16U
 c⁄° 
	gOSFœgEn
 = 
OS_FLAG_EN
;

52 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

53 
INT16U
 c⁄° 
	gOSFœgGΩSize
 = (
OS_FLAG_GRP
);

54 
INT16U
 c⁄° 
	gOSFœgNodeSize
 = (
OS_FLAG_NODE
);

55 
INT16U
 c⁄° 
	gOSFœgWidth
 = (
OS_FLAGS
);

57 
INT16U
 c⁄° 
	gOSFœgGΩSize
 = 0u;

58 
INT16U
 c⁄° 
	gOSFœgNodeSize
 = 0u;

59 
INT16U
 c⁄° 
	gOSFœgWidth
 = 0u;

61 
INT16U
 c⁄° 
	gOSFœgMax
 = 
OS_MAX_FLAGS
;

62 
INT16U
 c⁄° 
	gOSFœgNameEn
 = 
OS_FLAG_NAME_EN
;

64 
INT16U
 c⁄° 
	gOSLowe°Prio
 = 
OS_LOWEST_PRIO
;

66 
INT16U
 c⁄° 
	gOSMboxEn
 = 
OS_MBOX_EN
;

68 
INT16U
 c⁄° 
	gOSMemEn
 = 
OS_MEM_EN
;

69 
INT16U
 c⁄° 
	gOSMemMax
 = 
OS_MAX_MEM_PART
;

70 
INT16U
 c⁄° 
	gOSMemNameEn
 = 
OS_MEM_NAME_EN
;

71 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

72 
INT16U
 c⁄° 
	gOSMemSize
 = (
OS_MEM
);

73 
INT16U
 c⁄° 
	gOSMemTblSize
 = (
OSMemTbl
);

75 
INT16U
 c⁄° 
	gOSMemSize
 = 0u;

76 
INT16U
 c⁄° 
	gOSMemTblSize
 = 0u;

78 
INT16U
 c⁄° 
	gOSMuãxEn
 = 
OS_MUTEX_EN
;

80 
INT16U
 c⁄° 
	gOSPåSize
 = (*);

82 
INT16U
 c⁄° 
	gOSQEn
 = 
OS_Q_EN
;

83 
INT16U
 c⁄° 
	gOSQMax
 = 
OS_MAX_QS
;

84 #i‡(
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)

85 
INT16U
 c⁄° 
	gOSQSize
 = (
OS_Q
);

87 
INT16U
 c⁄° 
	gOSQSize
 = 0u;

90 
INT16U
 c⁄° 
	gOSRdyTblSize
 = 
OS_RDY_TBL_SIZE
;

92 
INT16U
 c⁄° 
	gOSSemEn
 = 
OS_SEM_EN
;

94 
INT16U
 c⁄° 
	gOSStkWidth
 = (
OS_STK
);

96 
INT16U
 c⁄° 
	gOSTaskCª©eEn
 = 
OS_TASK_CREATE_EN
;

97 
INT16U
 c⁄° 
	gOSTaskCª©eExtEn
 = 
OS_TASK_CREATE_EXT_EN
;

98 
INT16U
 c⁄° 
	gOSTaskDñEn
 = 
OS_TASK_DEL_EN
;

99 
INT16U
 c⁄° 
	gOSTaskIdÀStkSize
 = 
OS_TASK_IDLE_STK_SIZE
;

100 
INT16U
 c⁄° 
	gOSTaskProfûeEn
 = 
OS_TASK_PROFILE_EN
;

101 
INT16U
 c⁄° 
	gOSTaskMax
 = 
OS_MAX_TASKS
 + 
OS_N_SYS_TASKS
;

102 
INT16U
 c⁄° 
	gOSTaskNameEn
 = 
OS_TASK_NAME_EN
;

103 
INT16U
 c⁄° 
	gOSTaskSètEn
 = 
OS_TASK_STAT_EN
;

104 
INT16U
 c⁄° 
	gOSTaskSètStkSize
 = 
OS_TASK_STAT_STK_SIZE
;

105 
INT16U
 c⁄° 
	gOSTaskSètStkChkEn
 = 
OS_TASK_STAT_STK_CHK_EN
;

106 
INT16U
 c⁄° 
	gOSTaskSwHookEn
 = 
OS_TASK_SW_HOOK_EN
;

107 
INT16U
 c⁄° 
	gOSTaskRegTblSize
 = 
OS_TASK_REG_TBL_SIZE
;

109 
INT16U
 c⁄° 
	gOSTCBPrioTblMax
 = 
OS_LOWEST_PRIO
 + 1u;

110 
INT16U
 c⁄° 
	gOSTCBSize
 = (
OS_TCB
);

111 
INT16U
 c⁄° 
	gOSTicksPîSec
 = 
OS_TICKS_PER_SEC
;

112 
INT16U
 c⁄° 
	gOSTimeTickHookEn
 = 
OS_TIME_TICK_HOOK_EN
;

113 
INT16U
 c⁄° 
	gOSVîsi⁄Nbr
 = 
OS_VERSION
;

115 
INT16U
 c⁄° 
	gOSTmrEn
 = 
OS_TMR_EN
;

116 
INT16U
 c⁄° 
	gOSTmrCfgMax
 = 
OS_TMR_CFG_MAX
;

117 
INT16U
 c⁄° 
	gOSTmrCfgNameEn
 = 
OS_TMR_CFG_NAME_EN
;

118 
INT16U
 c⁄° 
	gOSTmrCfgWhìlSize
 = 
OS_TMR_CFG_WHEEL_SIZE
;

119 
INT16U
 c⁄° 
	gOSTmrCfgTicksPîSec
 = 
OS_TMR_CFG_TICKS_PER_SEC
;

121 #i‡(
OS_TMR_EN
 > 0uË&& (
OS_TMR_CFG_MAX
 > 0u)

122 
INT16U
 c⁄° 
	gOSTmrSize
 = (
OS_TMR
);

123 
INT16U
 c⁄° 
	gOSTmrTblSize
 = (
OSTmrTbl
);

124 
INT16U
 c⁄° 
	gOSTmrWhìlSize
 = (
OS_TMR_WHEEL
);

125 
INT16U
 c⁄° 
	gOSTmrWhìlTblSize
 = (
OSTmrWhìlTbl
);

127 
INT16U
 c⁄° 
	gOSTmrSize
 = 0u;

128 
INT16U
 c⁄° 
	gOSTmrTblSize
 = 0u;

129 
INT16U
 c⁄° 
	gOSTmrWhìlSize
 = 0u;

130 
INT16U
 c⁄° 
	gOSTmrWhìlTblSize
 = 0u;

142 #i‡
OS_DEBUG_EN
 > 0u

144 
INT16U
 c⁄° 
	gOSD©aSize
 = (
OSCtxSwCå
)

145 #i‡(
OS_EVENT_EN
Ë&& (
OS_MAX_EVENTS
 > 0u)

146 + (
OSEvítFªeLi°
)

147 + (
OSEvítTbl
)

149 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

150 + (
OSFœgTbl
)

151 + (
OSFœgFªeLi°
)

153 #i‡
OS_TASK_STAT_EN
 > 0u

154 + (
OSCPUUßge
)

155 + (
OSIdÀCåMax
)

156 + (
OSIdÀCåRun
)

157 + (
OSSètRdy
)

158 + (
OSTaskSètStk
)

160 #i‡
OS_TICK_STEP_EN
 > 0u

161 + (
OSTickSãpSèã
)

163 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

164 + (
OSMemFªeLi°
)

165 + (
OSMemTbl
)

167 #i‡(
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)

168 + (
OSQFªeLi°
)

169 + (
OSQTbl
)

171 #i‡
OS_TIME_GET_SET_EN
 > 0u

172 + (
OSTime
)

174 #i‡(
OS_TMR_EN
 > 0uË&& (
OS_TMR_CFG_MAX
 > 0u)

175 + (
OSTmrFªe
)

176 + (
OSTmrU£d
)

177 + (
OSTmrTime
)

178 + (
OSTmrSem
)

179 + (
OSTmrSemSig«l
)

180 + (
OSTmrTbl
)

181 + (
OSTmrFªeLi°
)

182 + (
OSTmrTaskStk
)

183 + (
OSTmrWhìlTbl
)

185 + (
OSI¡Ne°ög
)

186 + (
OSLockNe°ög
)

187 + (
OSPrioCur
)

188 + (
OSPrioHighRdy
)

189 + (
OSRdyGΩ
)

190 + (
OSRdyTbl
)

191 + (
OSRu¬ög
)

192 + (
OSTaskCå
)

193 + (
OSIdÀCå
)

194 + (
OSTaskIdÀStk
)

195 + (
OSTCBCur
)

196 + (
OSTCBFªeLi°
)

197 + (
OSTCBHighRdy
)

198 + (
OSTCBLi°
)

199 + (
OSTCBPrioTbl
)

200 + (
OSTCBTbl
);

225 #i‡
OS_DEBUG_EN
 > 0u

226 
	$OSDebugInô
 ()

228 c⁄° *
±emp
;

231 
±emp
 = (c⁄° *)&
OSDebugEn
;

233 
±emp
 = (c⁄° *)&
OSEndü¬essTe°
;

235 
±emp
 = (c⁄° *)&
OSEvítMax
;

236 
±emp
 = (c⁄° *)&
OSEvítNameEn
;

237 
±emp
 = (c⁄° *)&
OSEvítEn
;

238 
±emp
 = (c⁄° *)&
OSEvítSize
;

239 
±emp
 = (c⁄° *)&
OSEvítTblSize
;

240 
±emp
 = (c⁄° *)&
OSEvítMu…iEn
;

242 
±emp
 = (c⁄° *)&
OSFœgEn
;

243 
±emp
 = (c⁄° *)&
OSFœgGΩSize
;

244 
±emp
 = (c⁄° *)&
OSFœgNodeSize
;

245 
±emp
 = (c⁄° *)&
OSFœgWidth
;

246 
±emp
 = (c⁄° *)&
OSFœgMax
;

247 
±emp
 = (c⁄° *)&
OSFœgNameEn
;

249 
±emp
 = (c⁄° *)&
OSLowe°Prio
;

251 
±emp
 = (c⁄° *)&
OSMboxEn
;

253 
±emp
 = (c⁄° *)&
OSMemEn
;

254 
±emp
 = (c⁄° *)&
OSMemMax
;

255 
±emp
 = (c⁄° *)&
OSMemNameEn
;

256 
±emp
 = (c⁄° *)&
OSMemSize
;

257 
±emp
 = (c⁄° *)&
OSMemTblSize
;

259 
±emp
 = (c⁄° *)&
OSMuãxEn
;

261 
±emp
 = (c⁄° *)&
OSPåSize
;

263 
±emp
 = (c⁄° *)&
OSQEn
;

264 
±emp
 = (c⁄° *)&
OSQMax
;

265 
±emp
 = (c⁄° *)&
OSQSize
;

267 
±emp
 = (c⁄° *)&
OSRdyTblSize
;

269 
±emp
 = (c⁄° *)&
OSSemEn
;

271 
±emp
 = (c⁄° *)&
OSStkWidth
;

273 
±emp
 = (c⁄° *)&
OSTaskCª©eEn
;

274 
±emp
 = (c⁄° *)&
OSTaskCª©eExtEn
;

275 
±emp
 = (c⁄° *)&
OSTaskDñEn
;

276 
±emp
 = (c⁄° *)&
OSTaskIdÀStkSize
;

277 
±emp
 = (c⁄° *)&
OSTaskProfûeEn
;

278 
±emp
 = (c⁄° *)&
OSTaskMax
;

279 
±emp
 = (c⁄° *)&
OSTaskNameEn
;

280 
±emp
 = (c⁄° *)&
OSTaskSètEn
;

281 
±emp
 = (c⁄° *)&
OSTaskSètStkSize
;

282 
±emp
 = (c⁄° *)&
OSTaskSètStkChkEn
;

283 
±emp
 = (c⁄° *)&
OSTaskSwHookEn
;

285 
±emp
 = (c⁄° *)&
OSTCBPrioTblMax
;

286 
±emp
 = (c⁄° *)&
OSTCBSize
;

288 
±emp
 = (c⁄° *)&
OSTicksPîSec
;

289 
±emp
 = (c⁄° *)&
OSTimeTickHookEn
;

291 #i‡
OS_TMR_EN
 > 0u

292 
±emp
 = (c⁄° *)&
OSTmrTbl
[0];

293 
±emp
 = (c⁄° *)&
OSTmrWhìlTbl
[0];

295 
±emp
 = (c⁄° *)&
OSTmrEn
;

296 
±emp
 = (c⁄° *)&
OSTmrCfgMax
;

297 
±emp
 = (c⁄° *)&
OSTmrCfgNameEn
;

298 
±emp
 = (c⁄° *)&
OSTmrCfgWhìlSize
;

299 
±emp
 = (c⁄° *)&
OSTmrCfgTicksPîSec
;

300 
±emp
 = (c⁄° *)&
OSTmrSize
;

301 
±emp
 = (c⁄° *)&
OSTmrTblSize
;

303 
±emp
 = (c⁄° *)&
OSTmrWhìlSize
;

304 
±emp
 = (c⁄° *)&
OSTmrWhìlTblSize
;

307 
±emp
 = (c⁄° *)&
OSVîsi⁄Nbr
;

309 
±emp
 = (c⁄° *)&
OSD©aSize
;

311 
±emp
 =Ötemp;

312 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_core.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	#OS_GLOBALS


	)

26 
	~<ucos_ii.h
>

38 
INT8U
 c⁄° 
	gOSUnM≠Tbl
[256] = {

64 
OS_InôEvítLi°
();

66 
OS_InôMisc
();

68 
OS_InôRdyLi°
();

70 
OS_InôTaskIdÀ
();

72 #i‡
OS_TASK_STAT_EN
 > 0u

73 
OS_InôTaskSèt
();

76 
OS_InôTCBLi°
();

78 
OS_SchedNew
();

107 #i‡(
OS_EVENT_EN
Ë&& (
OS_EVENT_NAME_EN
 > 0u)

108 
INT8U
 
	$OSEvítNameGë
 (
OS_EVENT
 *
≥vít
,

109 
INT8U
 **
≤ame
,

110 
INT8U
 *
≥º
)

112 
INT8U
 
Àn
;

113 #i‡
OS_CRITICAL_METHOD
 == 3u

114 
OS_CPU_SR
 
˝u_§
 = 0u;

119 #ifde‡
OS_SAFETY_CRITICAL


120 i‡(
≥º
 =(
INT8U
 *)0) {

121 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

125 #i‡
OS_ARG_CHK_EN
 > 0u

126 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

127 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

130 i‡(
≤ame
 =(
INT8U
 **)0) {

131 *
≥º
 = 
OS_ERR_PNAME_NULL
;

135 i‡(
OSI¡Ne°ög
 > 0u) {

136 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

139 
≥vít
->
OSEvítTy≥
) {

140 
OS_EVENT_TYPE_SEM
:

141 
OS_EVENT_TYPE_MUTEX
:

142 
OS_EVENT_TYPE_MBOX
:

143 
OS_EVENT_TYPE_Q
:

147 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

150 
	`OS_ENTER_CRITICAL
();

151 *
≤ame
 = 
≥vít
->
OSEvítName
;

152 
Àn
 = 
	`OS_SåLí
(*
≤ame
);

153 
	`OS_EXIT_CRITICAL
();

154 *
≥º
 = 
OS_ERR_NONE
;

155  (
Àn
);

156 
	}
}

186 #i‡(
OS_EVENT_EN
Ë&& (
OS_EVENT_NAME_EN
 > 0u)

187 
	$OSEvítNameSë
 (
OS_EVENT
 *
≥vít
,

188 
INT8U
 *
≤ame
,

189 
INT8U
 *
≥º
)

191 #i‡
OS_CRITICAL_METHOD
 == 3u

192 
OS_CPU_SR
 
˝u_§
 = 0u;

197 #ifde‡
OS_SAFETY_CRITICAL


198 i‡(
≥º
 =(
INT8U
 *)0) {

199 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

203 #i‡
OS_ARG_CHK_EN
 > 0u

204 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

205 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

208 i‡(
≤ame
 =(
INT8U
 *)0) {

209 *
≥º
 = 
OS_ERR_PNAME_NULL
;

213 i‡(
OSI¡Ne°ög
 > 0u) {

214 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

217 
≥vít
->
OSEvítTy≥
) {

218 
OS_EVENT_TYPE_SEM
:

219 
OS_EVENT_TYPE_MUTEX
:

220 
OS_EVENT_TYPE_MBOX
:

221 
OS_EVENT_TYPE_Q
:

225 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

228 
	`OS_ENTER_CRITICAL
();

229 
≥vít
->
OSEvítName
 = 
≤ame
;

230 
	`OS_EXIT_CRITICAL
();

231 *
≥º
 = 
OS_ERR_NONE
;

232 
	}
}

307 #i‡((
OS_EVENT_EN
Ë&& (
OS_EVENT_MULTI_EN
 > 0u))

308 
INT16U
 
	$OSEvítPídMu…i
 (
OS_EVENT
 **
≥víts_≥nd
,

309 
OS_EVENT
 **
≥víts_rdy
,

310 **
pmsgs_rdy
,

311 
INT32U
 
timeout
,

312 
INT8U
 *
≥º
)

314 
OS_EVENT
 **
≥víts
;

315 
OS_EVENT
 *
≥vít
;

316 #i‡((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u))

317 
OS_Q
 *
pq
;

319 
BOOLEAN
 
evíts_rdy
;

320 
INT16U
 
evíts_rdy_nbr
;

321 
INT8U
 
evíts_°©
;

322 #i‡(
OS_CRITICAL_METHOD
 == 3u)

323 
OS_CPU_SR
 
˝u_§
 = 0u;

328 #ifde‡
OS_SAFETY_CRITICAL


329 i‡(
≥º
 =(
INT8U
 *)0) {

330 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

334 #i‡(
OS_ARG_CHK_EN
 > 0u)

335 i‡(
≥víts_≥nd
 =(
OS_EVENT
 **)0) {

336 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

339 i‡(*
≥víts_≥nd
 =(
OS_EVENT
 *)0) {

340 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

343 i‡(
≥víts_rdy
 =(
OS_EVENT
 **)0) {

344 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

347 i‡(
pmsgs_rdy
 == (**)0) {

348 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

353 *
≥víts_rdy
 = (
OS_EVENT
 *)0;

355 
≥víts
 = 
≥víts_≥nd
;

356 
≥vít
 = *
≥víts
;

357 
≥vít
 !(
OS_EVENT
 *)0) {

358 
≥vít
->
OSEvítTy≥
) {

359 #i‡(
OS_SEM_EN
 > 0u)

360 
OS_EVENT_TYPE_SEM
:

363 #i‡(
OS_MBOX_EN
 > 0u)

364 
OS_EVENT_TYPE_MBOX
:

367 #i‡((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u))

368 
OS_EVENT_TYPE_Q
:

372 
OS_EVENT_TYPE_MUTEX
:

373 
OS_EVENT_TYPE_FLAG
:

375 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

378 
≥víts
++;

379 
≥vít
 = *
≥víts
;

382 i‡(
OSI¡Ne°ög
 > 0u) {

383 *
≥º
 = 
OS_ERR_PEND_ISR
;

386 i‡(
OSLockNe°ög
 > 0u) {

387 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

392 
	`OS_ENTER_CRITICAL
();

393 
evíts_rdy
 = 
OS_FALSE
;

394 
evíts_rdy_nbr
 = 0u;

395 
evíts_°©
 = 
OS_STAT_RDY
;

396 
≥víts
 = 
≥víts_≥nd
;

397 
≥vít
 = *
≥víts
;

398 
≥vít
 !(
OS_EVENT
 *)0) {

399 
≥vít
->
OSEvítTy≥
) {

400 #i‡(
OS_SEM_EN
 > 0u)

401 
OS_EVENT_TYPE_SEM
:

402 i‡(
≥vít
->
OSEvítC¡
 > 0u) {

403 
≥vít
->
OSEvítC¡
--;

404 *
≥víts_rdy
++ = 
≥vít
;

405 
evíts_rdy
 = 
OS_TRUE
;

406 *
pmsgs_rdy
++ = (*)0;

407 
evíts_rdy_nbr
++;

410 
evíts_°©
 |
OS_STAT_SEM
;

415 #i‡(
OS_MBOX_EN
 > 0u)

416 
OS_EVENT_TYPE_MBOX
:

417 i‡(
≥vít
->
OSEvítPå
 != (*)0) {

419 *
pmsgs_rdy
++ = (*)
≥vít
->
OSEvítPå
;

420 
≥vít
->
OSEvítPå
 = (*)0;

421 *
≥víts_rdy
++ = 
≥vít
;

422 
evíts_rdy
 = 
OS_TRUE
;

423 
evíts_rdy_nbr
++;

426 
evíts_°©
 |
OS_STAT_MBOX
;

431 #i‡((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u))

432 
OS_EVENT_TYPE_Q
:

433 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

434 i‡(
pq
->
OSQE¡rõs
 > 0u) {

436 *
pmsgs_rdy
++ = (*)*
pq
->
OSQOut
++;

437 i‡(
pq
->
OSQOut
 =pq->
OSQEnd
) {

438 
pq
->
OSQOut
 =Öq->
OSQSèπ
;

440 
pq
->
OSQE¡rõs
--;

441 *
≥víts_rdy
++ = 
≥vít
;

442 
evíts_rdy
 = 
OS_TRUE
;

443 
evíts_rdy_nbr
++;

446 
evíts_°©
 |
OS_STAT_Q
;

451 
OS_EVENT_TYPE_MUTEX
:

452 
OS_EVENT_TYPE_FLAG
:

454 
	`OS_EXIT_CRITICAL
();

455 *
≥víts_rdy
 = (
OS_EVENT
 *)0;

456 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

457  (
evíts_rdy_nbr
);

459 
≥víts
++;

460 
≥vít
 = *
≥víts
;

463 i‡–
evíts_rdy
 =
OS_TRUE
) {

464 *
≥víts_rdy
 = (
OS_EVENT
 *)0;

465 
	`OS_EXIT_CRITICAL
();

466 *
≥º
 = 
OS_ERR_NONE
;

467  (
evíts_rdy_nbr
);

471 
OSTCBCur
->
OSTCBSèt
 |
evíts_°©
 |

472 
OS_STAT_MULTI
;

473 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

474 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

475 
	`OS_EvítTaskWaôMu…i
(
≥víts_≥nd
);

477 
	`OS_EXIT_CRITICAL
();

478 
	`OS_Sched
();

479 
	`OS_ENTER_CRITICAL
();

481 
OSTCBCur
->
OSTCBSètPíd
) {

482 
OS_STAT_PEND_OK
:

483 
OS_STAT_PEND_ABORT
:

484 
≥vít
 = 
OSTCBCur
->
OSTCBEvítPå
;

485 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

486 *
≥víts_rdy
++ = 
≥vít
;

487 *
≥víts_rdy
 = (
OS_EVENT
 *)0;

488 
evíts_rdy_nbr
++;

491 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_TO
;

492 
	`OS_EvítTaskRemoveMu…i
(
OSTCBCur
, 
≥víts_≥nd
);

496 
OS_STAT_PEND_TO
:

498 
	`OS_EvítTaskRemoveMu…i
(
OSTCBCur
, 
≥víts_≥nd
);

502 
OSTCBCur
->
OSTCBSètPíd
) {

503 
OS_STAT_PEND_OK
:

504 
≥vít
->
OSEvítTy≥
) {

505 #i‡(
OS_SEM_EN
 > 0u)

506 
OS_EVENT_TYPE_SEM
:

507 *
pmsgs_rdy
++ = (*)0;

511 #i‡((
OS_MBOX_EN
 > 0u) || \

512 ((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)))

513 
OS_EVENT_TYPE_MBOX
:

514 
OS_EVENT_TYPE_Q
:

515 *
pmsgs_rdy
++ = (*)
OSTCBCur
->
OSTCBMsg
;

519 
OS_EVENT_TYPE_MUTEX
:

520 
OS_EVENT_TYPE_FLAG
:

522 
	`OS_EXIT_CRITICAL
();

523 *
≥víts_rdy
 = (
OS_EVENT
 *)0;

524 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

525  (
evíts_rdy_nbr
);

527 *
≥º
 = 
OS_ERR_NONE
;

530 
OS_STAT_PEND_ABORT
:

531 *
pmsgs_rdy
++ = (*)0;

532 *
≥º
 = 
OS_ERR_PEND_ABORT
;

535 
OS_STAT_PEND_TO
:

537 *
pmsgs_rdy
++ = (*)0;

538 *
≥º
 = 
OS_ERR_TIMEOUT
;

542 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

543 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

544 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

545 
OSTCBCur
->
OSTCBEvítMu…iPå
 = (
OS_EVENT
 **)0;

546 #i‡((
OS_MBOX_EN
 > 0u) || \

547 ((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)))

548 
OSTCBCur
->
OSTCBMsg
 = (*)0;

550 
	`OS_EXIT_CRITICAL
();

552  (
evíts_rdy_nbr
);

553 
	}
}

570 
	$OSInô
 ()

572 
	`OSInôHookBegö
();

574 
	`OS_InôMisc
();

576 
	`OS_InôRdyLi°
();

578 
	`OS_InôTCBLi°
();

580 
	`OS_InôEvítLi°
();

582 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

583 
	`OS_FœgInô
();

586 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

587 
	`OS_MemInô
();

590 #i‡(
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)

591 
	`OS_QInô
();

594 
	`OS_InôTaskIdÀ
();

595 #i‡
OS_TASK_STAT_EN
 > 0u

596 
	`OS_InôTaskSèt
();

599 #i‡
OS_TMR_EN
 > 0u

600 
	`OSTmr_Inô
();

603 
	`OSInôHookEnd
();

605 #i‡
OS_DEBUG_EN
 > 0u

606 
	`OSDebugInô
();

608 
	}
}

635 
	$OSI¡E¡î
 ()

637 i‡(
OSRu¬ög
 =
OS_TRUE
) {

638 i‡(
OSI¡Ne°ög
 < 255u) {

639 
OSI¡Ne°ög
++;

642 
	}
}

663 
	$OSI¡Exô
 ()

665 #i‡
OS_CRITICAL_METHOD
 == 3u

666 
OS_CPU_SR
 
˝u_§
 = 0u;

671 i‡(
OSRu¬ög
 =
OS_TRUE
) {

672 
	`OS_ENTER_CRITICAL
();

673 i‡(
OSI¡Ne°ög
 > 0u) {

674 
OSI¡Ne°ög
--;

676 i‡(
OSI¡Ne°ög
 == 0u) {

677 i‡(
OSLockNe°ög
 == 0u) {

678 
	`OS_SchedNew
();

679 
OSTCBHighRdy
 = 
OSTCBPrioTbl
[
OSPrioHighRdy
];

680 i‡(
OSPrioHighRdy
 !
OSPrioCur
) {

681 #i‡
OS_TASK_PROFILE_EN
 > 0u

682 
OSTCBHighRdy
->
OSTCBCtxSwCå
++;

684 
OSCtxSwCå
++;

685 
	`OSI¡CtxSw
();

689 
	`OS_EXIT_CRITICAL
();

691 
	}
}

710 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


711 
	$OSSa„tyCrôiˇlSèπ
 ()

713 
OSSa„tyCrôiˇlSèπFœg
 = 
OS_TRUE
;

714 
	}
}

735 #i‡
OS_SCHED_LOCK_EN
 > 0u

736 
	$OSSchedLock
 ()

738 #i‡
OS_CRITICAL_METHOD
 == 3u

739 
OS_CPU_SR
 
˝u_§
 = 0u;

744 i‡(
OSRu¬ög
 =
OS_TRUE
) {

745 
	`OS_ENTER_CRITICAL
();

746 i‡(
OSI¡Ne°ög
 == 0u) {

747 i‡(
OSLockNe°ög
 < 255u) {

748 
OSLockNe°ög
++;

751 
	`OS_EXIT_CRITICAL
();

753 
	}
}

772 #i‡
OS_SCHED_LOCK_EN
 > 0u

773 
	$OSSchedU∆ock
 ()

775 #i‡
OS_CRITICAL_METHOD
 == 3u

776 
OS_CPU_SR
 
˝u_§
 = 0u;

781 i‡(
OSRu¬ög
 =
OS_TRUE
) {

782 
	`OS_ENTER_CRITICAL
();

783 i‡(
OSLockNe°ög
 > 0u) {

784 
OSLockNe°ög
--;

785 i‡(
OSLockNe°ög
 == 0u) {

786 i‡(
OSI¡Ne°ög
 == 0u) {

787 
	`OS_EXIT_CRITICAL
();

788 
	`OS_Sched
();

790 
	`OS_EXIT_CRITICAL
();

793 
	`OS_EXIT_CRITICAL
();

796 
	`OS_EXIT_CRITICAL
();

799 
	}
}

823 
	$OSSèπ
 ()

825 i‡(
OSRu¬ög
 =
OS_FALSE
) {

826 
	`OS_SchedNew
();

827 
OSPrioCur
 = 
OSPrioHighRdy
;

828 
OSTCBHighRdy
 = 
OSTCBPrioTbl
[
OSPrioHighRdy
];

829 
OSTCBCur
 = 
OSTCBHighRdy
;

830 
	`OSSèπHighRdy
();

832 
	}
}

854 #i‡
OS_TASK_STAT_EN
 > 0u

855 
	$OSSètInô
 ()

857 #i‡
OS_CRITICAL_METHOD
 == 3u

858 
OS_CPU_SR
 
˝u_§
 = 0u;

863 
	`OSTimeDly
(2u);

864 
	`OS_ENTER_CRITICAL
();

865 
OSIdÀCå
 = 0uL;

866 
	`OS_EXIT_CRITICAL
();

867 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 10u);

868 
	`OS_ENTER_CRITICAL
();

869 
OSIdÀCåMax
 = 
OSIdÀCå
;

870 
OSSètRdy
 = 
OS_TRUE
;

871 
	`OS_EXIT_CRITICAL
();

872 
	}
}

889 
	$OSTimeTick
 ()

891 
OS_TCB
 *
±cb
;

892 #i‡
OS_TICK_STEP_EN
 > 0u

893 
BOOLEAN
 
°ï
;

895 #i‡
OS_CRITICAL_METHOD
 == 3u

896 
OS_CPU_SR
 
˝u_§
 = 0u;

901 #i‡
OS_TIME_TICK_HOOK_EN
 > 0u

902 
	`OSTimeTickHook
();

904 #i‡
OS_TIME_GET_SET_EN
 > 0u

905 
	`OS_ENTER_CRITICAL
();

906 
OSTime
++;

907 
	`OS_EXIT_CRITICAL
();

909 i‡(
OSRu¬ög
 =
OS_TRUE
) {

910 #i‡
OS_TICK_STEP_EN
 > 0u

911 
OSTickSãpSèã
) {

912 
OS_TICK_STEP_DIS
:

913 
°ï
 = 
OS_TRUE
;

916 
OS_TICK_STEP_WAIT
:

917 
°ï
 = 
OS_FALSE
;

920 
OS_TICK_STEP_ONCE
:

921 
°ï
 = 
OS_TRUE
;

922 
OSTickSãpSèã
 = 
OS_TICK_STEP_WAIT
;

926 
°ï
 = 
OS_TRUE
;

927 
OSTickSãpSèã
 = 
OS_TICK_STEP_DIS
;

930 i‡(
°ï
 =
OS_FALSE
) {

934 
±cb
 = 
OSTCBLi°
;

935 
±cb
->
OSTCBPrio
 !
OS_TASK_IDLE_PRIO
) {

936 
	`OS_ENTER_CRITICAL
();

937 i‡(
±cb
->
OSTCBDly
 != 0u) {

938 
±cb
->
OSTCBDly
--;

939 i‡(
±cb
->
OSTCBDly
 == 0u) {

941 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_PEND_ANY
Ë!
OS_STAT_RDY
) {

942 
±cb
->
OSTCBSèt
 &(
INT8U
)~(INT8U)
OS_STAT_PEND_ANY
;

943 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_TO
;

945 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

948 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_SUSPEND
Ë=
OS_STAT_RDY
) {

949 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

950 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

954 
±cb
 =Ötcb->
OSTCBNext
;

955 
	`OS_EXIT_CRITICAL
();

958 
	}
}

975 
INT16U
 
	$OSVîsi⁄
 ()

977  (
OS_VERSION
);

978 
	}
}

993 #i‡
OS_TASK_DEL_EN
 > 0u

994 
	$OS_Dummy
 ()

996 
	}
}

1027 #i‡(
OS_EVENT_EN
)

1028 
INT8U
 
	$OS_EvítTaskRdy
 (
OS_EVENT
 *
≥vít
,

1029 *
pmsg
,

1030 
INT8U
 
msk
,

1031 
INT8U
 
≥nd_°©
)

1033 
OS_TCB
 *
±cb
;

1034 
INT8U
 
y
;

1035 
INT8U
 
x
;

1036 
INT8U
 
¥io
;

1037 #i‡
OS_LOWEST_PRIO
 > 63u

1038 
OS_PRIO
 *
±bl
;

1042 #i‡
OS_LOWEST_PRIO
 <= 63u

1043 
y
 = 
OSUnM≠Tbl
[
≥vít
->
OSEvítGΩ
];

1044 
x
 = 
OSUnM≠Tbl
[
≥vít
->
OSEvítTbl
[
y
]];

1045 
¥io
 = (
INT8U
)((
y
 << 3uË+ 
x
);

1047 i‡((
≥vít
->
OSEvítGΩ
 & 0xFFu) != 0u) {

1048 
y
 = 
OSUnM≠Tbl
[ 
≥vít
->
OSEvítGΩ
 & 0xFFu];

1050 
y
 = 
OSUnM≠Tbl
[(
OS_PRIO
)(
≥vít
->
OSEvítGΩ
 >> 8u) & 0xFFu] + 8u;

1052 
±bl
 = &
≥vít
->
OSEvítTbl
[
y
];

1053 i‡((*
±bl
 & 0xFFu) != 0u) {

1054 
x
 = 
OSUnM≠Tbl
[*
±bl
 & 0xFFu];

1056 
x
 = 
OSUnM≠Tbl
[(
OS_PRIO
)(*
±bl
 >> 8u) & 0xFFu] + 8u;

1058 
¥io
 = (
INT8U
)((
y
 << 4uË+ 
x
);

1061 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

1062 
±cb
->
OSTCBDly
 = 0u;

1063 #i‡((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)Ë|| (
OS_MBOX_EN
 > 0u)

1064 
±cb
->
OSTCBMsg
 = 
pmsg
;

1066 
pmsg
 =Ömsg;

1068 
±cb
->
OSTCBSèt
 &(
INT8U
)~
msk
;

1069 
±cb
->
OSTCBSètPíd
 = 
≥nd_°©
;

1071 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_SUSPEND
Ë=
OS_STAT_RDY
) {

1072 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

1073 
OSRdyTbl
[
y
] |
±cb
->
OSTCBBôX
;

1076 
	`OS_EvítTaskRemove
(
±cb
, 
≥vít
);

1077 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

1078 i‡(
±cb
->
OSTCBEvítMu…iPå
 !(
OS_EVENT
 **)0) {

1079 
	`OS_EvítTaskRemoveMu…i
(
±cb
,Ötcb->
OSTCBEvítMu…iPå
);

1080 
±cb
->
OSTCBEvítPå
 = (
OS_EVENT
 *)
≥vít
;

1084  (
¥io
);

1085 
	}
}

1102 #i‡(
OS_EVENT_EN
)

1103 
	$OS_EvítTaskWaô
 (
OS_EVENT
 *
≥vít
)

1105 
INT8U
 
y
;

1108 
OSTCBCur
->
OSTCBEvítPå
 = 
≥vít
;

1110 
≥vít
->
OSEvítTbl
[
OSTCBCur
->
OSTCBY
] |OSTCBCur->
OSTCBBôX
;

1111 
≥vít
->
OSEvítGΩ
 |
OSTCBCur
->
OSTCBBôY
;

1113 
y
 = 
OSTCBCur
->
OSTCBY
;

1114 
OSRdyTbl
[
y
] &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôX
;

1115 i‡(
OSRdyTbl
[
y
] == 0u) {

1116 
OSRdyGΩ
 &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôY
;

1118 
	}
}

1136 #i‡((
OS_EVENT_EN
Ë&& (
OS_EVENT_MULTI_EN
 > 0u))

1137 
	$OS_EvítTaskWaôMu…i
 (
OS_EVENT
 **
≥víts_waô
)

1139 
OS_EVENT
 **
≥víts
;

1140 
OS_EVENT
 *
≥vít
;

1141 
INT8U
 
y
;

1144 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

1145 
OSTCBCur
->
OSTCBEvítMu…iPå
 = (
OS_EVENT
 **)
≥víts_waô
;

1147 
≥víts
 = 
≥víts_waô
;

1148 
≥vít
 = *
≥víts
;

1149 
≥vít
 !(
OS_EVENT
 *)0) {

1150 
≥vít
->
OSEvítTbl
[
OSTCBCur
->
OSTCBY
] |OSTCBCur->
OSTCBBôX
;

1151 
≥vít
->
OSEvítGΩ
 |
OSTCBCur
->
OSTCBBôY
;

1152 
≥víts
++;

1153 
≥vít
 = *
≥víts
;

1156 
y
 = 
OSTCBCur
->
OSTCBY
;

1157 
OSRdyTbl
[
y
] &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôX
;

1158 i‡(
OSRdyTbl
[
y
] == 0u) {

1159 
OSRdyGΩ
 &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôY
;

1161 
	}
}

1179 #i‡(
OS_EVENT_EN
)

1180 
	$OS_EvítTaskRemove
 (
OS_TCB
 *
±cb
,

1181 
OS_EVENT
 *
≥vít
)

1183 
INT8U
 
y
;

1186 
y
 = 
±cb
->
OSTCBY
;

1187 
≥vít
->
OSEvítTbl
[
y
] &(
OS_PRIO
)~
±cb
->
OSTCBBôX
;

1188 i‡(
≥vít
->
OSEvítTbl
[
y
] == 0u) {

1189 
≥vít
->
OSEvítGΩ
 &(
OS_PRIO
)~
±cb
->
OSTCBBôY
;

1191 
	}
}

1209 #i‡((
OS_EVENT_EN
Ë&& (
OS_EVENT_MULTI_EN
 > 0u))

1210 
	$OS_EvítTaskRemoveMu…i
 (
OS_TCB
 *
±cb
,

1211 
OS_EVENT
 **
≥víts_mu…i
)

1213 
OS_EVENT
 **
≥víts
;

1214 
OS_EVENT
 *
≥vít
;

1215 
INT8U
 
y
;

1216 
OS_PRIO
 
bôy
;

1217 
OS_PRIO
 
bôx
;

1220 
y
 = 
±cb
->
OSTCBY
;

1221 
bôy
 = 
±cb
->
OSTCBBôY
;

1222 
bôx
 = 
±cb
->
OSTCBBôX
;

1223 
≥víts
 = 
≥víts_mu…i
;

1224 
≥vít
 = *
≥víts
;

1225 
≥vít
 !(
OS_EVENT
 *)0) {

1226 
≥vít
->
OSEvítTbl
[
y
] &(
OS_PRIO
)~
bôx
;

1227 i‡(
≥vít
->
OSEvítTbl
[
y
] == 0u) {

1228 
≥vít
->
OSEvítGΩ
 &(
OS_PRIO
)~
bôy
;

1230 
≥víts
++;

1231 
≥vít
 = *
≥víts
;

1233 
	}
}

1249 #i‡(
OS_EVENT_EN
)

1250 
	$OS_EvítWaôLi°Inô
 (
OS_EVENT
 *
≥vít
)

1252 
INT8U
 
i
;

1255 
≥vít
->
OSEvítGΩ
 = 0u;

1256 
i
 = 0u; i < 
OS_EVENT_TBL_SIZE
; i++) {

1257 
≥vít
->
OSEvítTbl
[
i
] = 0u;

1259 
	}
}

1275 
	$OS_InôEvítLi°
 ()

1277 #i‡(
OS_EVENT_EN
Ë&& (
OS_MAX_EVENTS
 > 0u)

1278 #i‡(
OS_MAX_EVENTS
 > 1u)

1279 
INT16U
 
ix
;

1280 
INT16U
 
ix_√xt
;

1281 
OS_EVENT
 *
≥vít1
;

1282 
OS_EVENT
 *
≥vít2
;

1285 
	`OS_MemCÃ
((
INT8U
 *)&
OSEvítTbl
[0], (OSEventTbl));

1286 
ix
 = 0u; ix < (
OS_MAX_EVENTS
 - 1u); ix++) {

1287 
ix_√xt
 = 
ix
 + 1u;

1288 
≥vít1
 = &
OSEvítTbl
[
ix
];

1289 
≥vít2
 = &
OSEvítTbl
[
ix_√xt
];

1290 
≥vít1
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1291 
≥vít1
->
OSEvítPå
 = 
≥vít2
;

1292 #i‡
OS_EVENT_NAME_EN
 > 0u

1293 
≥vít1
->
OSEvítName
 = (
INT8U
 *)(*)"?";

1296 
≥vít1
 = &
OSEvítTbl
[
ix
];

1297 
≥vít1
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1298 
≥vít1
->
OSEvítPå
 = (
OS_EVENT
 *)0;

1299 #i‡
OS_EVENT_NAME_EN
 > 0u

1300 
≥vít1
->
OSEvítName
 = (
INT8U
 *)(*)"?";

1302 
OSEvítFªeLi°
 = &
OSEvítTbl
[0];

1304 
OSEvítFªeLi°
 = &
OSEvítTbl
[0];

1305 
OSEvítFªeLi°
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1306 
OSEvítFªeLi°
->
OSEvítPå
 = (
OS_EVENT
 *)0;

1307 #i‡
OS_EVENT_NAME_EN
 > 0u

1308 
OSEvítFªeLi°
->
OSEvítName
 = (
INT8U
 *)"?";

1312 
	}
}

1327 
	$OS_InôMisc
 ()

1329 #i‡
OS_TIME_GET_SET_EN
 > 0u

1330 
OSTime
 = 0uL;

1333 
OSI¡Ne°ög
 = 0u;

1334 
OSLockNe°ög
 = 0u;

1336 
OSTaskCå
 = 0u;

1338 
OSRu¬ög
 = 
OS_FALSE
;

1340 
OSCtxSwCå
 = 0u;

1341 
OSIdÀCå
 = 0uL;

1343 #i‡
OS_TASK_STAT_EN
 > 0u

1344 
OSIdÀCåRun
 = 0uL;

1345 
OSIdÀCåMax
 = 0uL;

1346 
OSSètRdy
 = 
OS_FALSE
;

1349 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1350 
OSSa„tyCrôiˇlSèπFœg
 = 
OS_FALSE
;

1352 
	}
}

1367 
	$OS_InôRdyLi°
 ()

1369 
INT8U
 
i
;

1372 
OSRdyGΩ
 = 0u;

1373 
i
 = 0u; i < 
OS_RDY_TBL_SIZE
; i++) {

1374 
OSRdyTbl
[
i
] = 0u;

1377 
OSPrioCur
 = 0u;

1378 
OSPrioHighRdy
 = 0u;

1380 
OSTCBHighRdy
 = (
OS_TCB
 *)0;

1381 
OSTCBCur
 = (
OS_TCB
 *)0;

1382 
	}
}

1398 
	$OS_InôTaskIdÀ
 ()

1400 #i‡
OS_TASK_NAME_EN
 > 0u

1401 
INT8U
 
îr
;

1405 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

1406 #i‡
OS_STK_GROWTH
 == 1u

1407 ()
	`OSTaskCª©eExt
(
OS_TaskIdÀ
,

1409 &
OSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
 - 1u],

1410 
OS_TASK_IDLE_PRIO
,

1411 
OS_TASK_IDLE_ID
,

1412 &
OSTaskIdÀStk
[0],

1413 
OS_TASK_IDLE_STK_SIZE
,

1415 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1417 ()
	`OSTaskCª©eExt
(
OS_TaskIdÀ
,

1419 &
OSTaskIdÀStk
[0],

1420 
OS_TASK_IDLE_PRIO
,

1421 
OS_TASK_IDLE_ID
,

1422 &
OSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
 - 1u],

1423 
OS_TASK_IDLE_STK_SIZE
,

1425 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1428 #i‡
OS_STK_GROWTH
 == 1u

1429 ()
	`OSTaskCª©e
(
OS_TaskIdÀ
,

1431 &
OSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
 - 1u],

1432 
OS_TASK_IDLE_PRIO
);

1434 ()
	`OSTaskCª©e
(
OS_TaskIdÀ
,

1436 &
OSTaskIdÀStk
[0],

1437 
OS_TASK_IDLE_PRIO
);

1441 #i‡
OS_TASK_NAME_EN
 > 0u

1442 
	`OSTaskNameSë
(
OS_TASK_IDLE_PRIO
, (
INT8U
 *)(*)"uC/OS-II IdÀ", &
îr
);

1444 
	}
}

1459 #i‡
OS_TASK_STAT_EN
 > 0u

1460 
	$OS_InôTaskSèt
 ()

1462 #i‡
OS_TASK_NAME_EN
 > 0u

1463 
INT8U
 
îr
;

1467 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

1468 #i‡
OS_STK_GROWTH
 == 1u

1469 ()
	`OSTaskCª©eExt
(
OS_TaskSèt
,

1471 &
OSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
 - 1u],

1472 
OS_TASK_STAT_PRIO
,

1473 
OS_TASK_STAT_ID
,

1474 &
OSTaskSètStk
[0],

1475 
OS_TASK_STAT_STK_SIZE
,

1477 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1479 ()
	`OSTaskCª©eExt
(
OS_TaskSèt
,

1481 &
OSTaskSètStk
[0],

1482 
OS_TASK_STAT_PRIO
,

1483 
OS_TASK_STAT_ID
,

1484 &
OSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
 - 1u],

1485 
OS_TASK_STAT_STK_SIZE
,

1487 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1490 #i‡
OS_STK_GROWTH
 == 1u

1491 ()
	`OSTaskCª©e
(
OS_TaskSèt
,

1493 &
OSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
 - 1u],

1494 
OS_TASK_STAT_PRIO
);

1496 ()
	`OSTaskCª©e
(
OS_TaskSèt
,

1498 &
OSTaskSètStk
[0],

1499 
OS_TASK_STAT_PRIO
);

1503 #i‡
OS_TASK_NAME_EN
 > 0u

1504 
	`OSTaskNameSë
(
OS_TASK_STAT_PRIO
, (
INT8U
 *)(*)"uC/OS-II Sèt", &
îr
);

1506 
	}
}

1522 
	$OS_InôTCBLi°
 ()

1524 
INT8U
 
ix
;

1525 
INT8U
 
ix_√xt
;

1526 
OS_TCB
 *
±cb1
;

1527 
OS_TCB
 *
±cb2
;

1530 
	`OS_MemCÃ
((
INT8U
 *)&
OSTCBTbl
[0], (OSTCBTbl));

1531 
	`OS_MemCÃ
((
INT8U
 *)&
OSTCBPrioTbl
[0], (OSTCBPrioTbl));

1532 
ix
 = 0u; ix < (
OS_MAX_TASKS
 + 
OS_N_SYS_TASKS
 - 1u); ix++) {

1533 
ix_√xt
 = 
ix
 + 1u;

1534 
±cb1
 = &
OSTCBTbl
[
ix
];

1535 
±cb2
 = &
OSTCBTbl
[
ix_√xt
];

1536 
±cb1
->
OSTCBNext
 = 
±cb2
;

1537 #i‡
OS_TASK_NAME_EN
 > 0u

1538 
±cb1
->
OSTCBTaskName
 = (
INT8U
 *)(*)"?";

1541 
±cb1
 = &
OSTCBTbl
[
ix
];

1542 
±cb1
->
OSTCBNext
 = (
OS_TCB
 *)0;

1543 #i‡
OS_TASK_NAME_EN
 > 0u

1544 
±cb1
->
OSTCBTaskName
 = (
INT8U
 *)(*)"?";

1546 
OSTCBLi°
 = (
OS_TCB
 *)0;

1547 
OSTCBFªeLi°
 = &
OSTCBTbl
[0];

1548 
	}
}

1570 
	$OS_MemCÃ
 (
INT8U
 *
pde°
,

1571 
INT16U
 
size
)

1573 
size
 > 0u) {

1574 *
pde°
++ = (
INT8U
)0;

1575 
size
--;

1577 
	}
}

1603 
	$OS_MemC›y
 (
INT8U
 *
pde°
,

1604 
INT8U
 *
p§c
,

1605 
INT16U
 
size
)

1607 
size
 > 0u) {

1608 *
pde°
++ = *
p§c
++;

1609 
size
--;

1611 
	}
}

1630 
	$OS_Sched
 ()

1632 #i‡
OS_CRITICAL_METHOD
 == 3u

1633 
OS_CPU_SR
 
˝u_§
 = 0u;

1638 
	`OS_ENTER_CRITICAL
();

1639 i‡(
OSI¡Ne°ög
 == 0u) {

1640 i‡(
OSLockNe°ög
 == 0u) {

1641 
	`OS_SchedNew
();

1642 
OSTCBHighRdy
 = 
OSTCBPrioTbl
[
OSPrioHighRdy
];

1643 i‡(
OSPrioHighRdy
 !
OSPrioCur
) {

1644 #i‡
OS_TASK_PROFILE_EN
 > 0u

1645 
OSTCBHighRdy
->
OSTCBCtxSwCå
++;

1647 
OSCtxSwCå
++;

1648 
	`OS_TASK_SW
();

1652 
	`OS_EXIT_CRITICAL
();

1653 
	}
}

1672 
	$OS_SchedNew
 ()

1674 #i‡
OS_LOWEST_PRIO
 <= 63u

1675 
INT8U
 
y
;

1678 
y
 = 
OSUnM≠Tbl
[
OSRdyGΩ
];

1679 
OSPrioHighRdy
 = (
INT8U
)((
y
 << 3uË+ 
OSUnM≠Tbl
[
OSRdyTbl
[y]]);

1681 
INT8U
 
y
;

1682 
OS_PRIO
 *
±bl
;

1685 i‡((
OSRdyGΩ
 & 0xFFu) != 0u) {

1686 
y
 = 
OSUnM≠Tbl
[
OSRdyGΩ
 & 0xFFu];

1688 
y
 = 
OSUnM≠Tbl
[(
OS_PRIO
)(
OSRdyGΩ
 >> 8u) & 0xFFu] + 8u;

1690 
±bl
 = &
OSRdyTbl
[
y
];

1691 i‡((*
±bl
 & 0xFFu) != 0u) {

1692 
OSPrioHighRdy
 = (
INT8U
)((
y
 << 4uË+ 
OSUnM≠Tbl
[(*
±bl
 & 0xFFu)]);

1694 
OSPrioHighRdy
 = (
INT8U
)((
y
 << 4uË+ 
OSUnM≠Tbl
[(
OS_PRIO
)(*
±bl
 >> 8u) & 0xFFu] + 8u);

1697 
	}
}

1716 #i‡(
OS_EVENT_NAME_EN
 > 0uË|| (
OS_FLAG_NAME_EN
 > 0uË|| (
OS_MEM_NAME_EN
 > 0uË|| (
OS_TASK_NAME_EN
 > 0uË|| (
OS_TMR_CFG_NAME_EN
 > 0u)

1717 
INT8U
 
	$OS_SåLí
 (
INT8U
 *
p§c
)

1719 
INT8U
 
Àn
;

1722 
Àn
 = 0u;

1723 *
p§c
 !
OS_ASCII_NUL
) {

1724 
p§c
++;

1725 
Àn
++;

1727  (
Àn
);

1728 
	}
}

1752 
	$OS_TaskIdÀ
 (*
p_¨g
)

1754 #i‡
OS_CRITICAL_METHOD
 == 3u

1755 
OS_CPU_SR
 
˝u_§
 = 0u;

1760 
p_¨g
 =Ö_arg;

1762 
	`OS_ENTER_CRITICAL
();

1763 
OSIdÀCå
++;

1764 
	`OS_EXIT_CRITICAL
();

1765 
	`OSTaskIdÀHook
();

1767 
	}
}

1793 #i‡
OS_TASK_STAT_EN
 > 0u

1794 
	$OS_TaskSèt
 (*
p_¨g
)

1796 #i‡
OS_CRITICAL_METHOD
 == 3u

1797 
OS_CPU_SR
 
˝u_§
 = 0u;

1802 
p_¨g
 =Ö_arg;

1803 
OSSètRdy
 =
OS_FALSE
) {

1804 
	`OSTimeDly
(2u * 
OS_TICKS_PER_SEC
 / 10u);

1806 
OSIdÀCåMax
 /= 100uL;

1807 i‡(
OSIdÀCåMax
 == 0uL) {

1808 
OSCPUUßge
 = 0u;

1809 #i‡
OS_TASK_SUSPEND_EN
 > 0u

1810 ()
	`OSTaskSu•íd
(
OS_PRIO_SELF
);

1813 
	`OSTimeDly
(
OS_TICKS_PER_SEC
);

1818 
	`OS_ENTER_CRITICAL
();

1819 
OSIdÀCåRun
 = 
OSIdÀCå
;

1820 
OSIdÀCå
 = 0uL;

1821 
	`OS_EXIT_CRITICAL
();

1822 
OSCPUUßge
 = (
INT8U
)(100uL - 
OSIdÀCåRun
 / 
OSIdÀCåMax
);

1823 
	`OSTaskSètHook
();

1824 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0uË&& (
OS_TASK_CREATE_EXT_EN
 > 0u)

1825 
	`OS_TaskSètStkChk
();

1827 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 10u);

1829 
	}
}

1844 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0uË&& (
OS_TASK_CREATE_EXT_EN
 > 0u)

1845 
	$OS_TaskSètStkChk
 ()

1847 
OS_TCB
 *
±cb
;

1848 
OS_STK_DATA
 
°k_d©a
;

1849 
INT8U
 
îr
;

1850 
INT8U
 
¥io
;

1853 
¥io
 = 0u;Öriÿ<
OS_TASK_IDLE_PRIO
;Örio++) {

1854 
îr
 = 
	`OSTaskStkChk
(
¥io
, &
°k_d©a
);

1855 i‡(
îr
 =
OS_ERR_NONE
) {

1856 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

1857 i‡(
±cb
 !(
OS_TCB
 *)0) {

1858 i‡(
±cb
 !
OS_TCB_RESERVED
) {

1859 #i‡
OS_TASK_PROFILE_EN
 > 0u

1860 #i‡
OS_STK_GROWTH
 == 1u

1861 
±cb
->
OSTCBStkBa£
 =Ötcb->
OSTCBStkBŸtom
 +Ötcb->
OSTCBStkSize
;

1863 
±cb
->
OSTCBStkBa£
 =Ötcb->
OSTCBStkBŸtom
 -Ötcb->
OSTCBStkSize
;

1865 
±cb
->
OSTCBStkU£d
 = 
°k_d©a
.
OSU£d
;

1871 
	}
}

1917 
INT8U
 
	$OS_TCBInô
 (
INT8U
 
¥io
,

1918 
OS_STK
 *
±os
,

1919 
OS_STK
 *
pbos
,

1920 
INT16U
 
id
,

1921 
INT32U
 
°k_size
,

1922 *
≥xt
,

1923 
INT16U
 
›t
)

1925 
OS_TCB
 *
±cb
;

1926 #i‡
OS_CRITICAL_METHOD
 == 3u

1927 
OS_CPU_SR
 
˝u_§
 = 0u;

1929 #i‡
OS_TASK_REG_TBL_SIZE
 > 0u

1930 
INT8U
 
i
;

1934 
	`OS_ENTER_CRITICAL
();

1935 
±cb
 = 
OSTCBFªeLi°
;

1936 i‡(
±cb
 !(
OS_TCB
 *)0) {

1937 
OSTCBFªeLi°
 = 
±cb
->
OSTCBNext
;

1938 
	`OS_EXIT_CRITICAL
();

1939 
±cb
->
OSTCBStkPå
 = 
±os
;

1940 
±cb
->
OSTCBPrio
 = 
¥io
;

1941 
±cb
->
OSTCBSèt
 = 
OS_STAT_RDY
;

1942 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

1943 
±cb
->
OSTCBDly
 = 0u;

1945 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

1946 
±cb
->
OSTCBExtPå
 = 
≥xt
;

1947 
±cb
->
OSTCBStkSize
 = 
°k_size
;

1948 
±cb
->
OSTCBStkBŸtom
 = 
pbos
;

1949 
±cb
->
OSTCBO±
 = 
›t
;

1950 
±cb
->
OSTCBId
 = 
id
;

1952 
≥xt
 =Öext;

1953 
°k_size
 = stk_size;

1954 
pbos
 =Öbos;

1955 
›t
 = opt;

1956 
id
 = id;

1959 #i‡
OS_TASK_DEL_EN
 > 0u

1960 
±cb
->
OSTCBDñReq
 = 
OS_ERR_NONE
;

1963 #i‡
OS_LOWEST_PRIO
 <= 63u

1964 
±cb
->
OSTCBY
 = (
INT8U
)(
¥io
 >> 3u);

1965 
±cb
->
OSTCBX
 = (
INT8U
)(
¥io
 & 0x07u);

1967 
±cb
->
OSTCBY
 = (
INT8U
)((INT8U)(
¥io
 >> 4u) & 0xFFu);

1968 
±cb
->
OSTCBX
 = (
INT8U
Ë(
¥io
 & 0x0Fu);

1971 
±cb
->
OSTCBBôY
 = (
OS_PRIO
)(1uL <<Ötcb->
OSTCBY
);

1972 
±cb
->
OSTCBBôX
 = (
OS_PRIO
)(1uL <<Ötcb->
OSTCBX
);

1974 #i‡(
OS_EVENT_EN
)

1975 
±cb
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

1976 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

1977 
±cb
->
OSTCBEvítMu…iPå
 = (
OS_EVENT
 **)0;

1981 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0uË&& (
OS_TASK_DEL_EN
 > 0u)

1982 
±cb
->
OSTCBFœgNode
 = (
OS_FLAG_NODE
 *)0;

1985 #i‡(
OS_MBOX_EN
 > 0uË|| ((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u))

1986 
±cb
->
OSTCBMsg
 = (*)0;

1989 #i‡
OS_TASK_PROFILE_EN
 > 0u

1990 
±cb
->
OSTCBCtxSwCå
 = 0uL;

1991 
±cb
->
OSTCBCy˛esSèπ
 = 0uL;

1992 
±cb
->
OSTCBCy˛esTŸ
 = 0uL;

1993 
±cb
->
OSTCBStkBa£
 = (
OS_STK
 *)0;

1994 
±cb
->
OSTCBStkU£d
 = 0uL;

1997 #i‡
OS_TASK_NAME_EN
 > 0u

1998 
±cb
->
OSTCBTaskName
 = (
INT8U
 *)(*)"?";

2001 #i‡
OS_TASK_REG_TBL_SIZE
 > 0u

2002 
i
 = 0u; i < 
OS_TASK_REG_TBL_SIZE
; i++) {

2003 
±cb
->
OSTCBRegTbl
[
i
] = 0u;

2007 
	`OSTCBInôHook
(
±cb
);

2009 
	`OSTaskCª©eHook
(
±cb
);

2011 
	`OS_ENTER_CRITICAL
();

2012 
OSTCBPrioTbl
[
¥io
] = 
±cb
;

2013 
±cb
->
OSTCBNext
 = 
OSTCBLi°
;

2014 
±cb
->
OSTCBPªv
 = (
OS_TCB
 *)0;

2015 i‡(
OSTCBLi°
 !(
OS_TCB
 *)0) {

2016 
OSTCBLi°
->
OSTCBPªv
 = 
±cb
;

2018 
OSTCBLi°
 = 
±cb
;

2019 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

2020 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

2021 
OSTaskCå
++;

2022 
	`OS_EXIT_CRITICAL
();

2023  (
OS_ERR_NONE
);

2025 
	`OS_EXIT_CRITICAL
();

2026  (
OS_ERR_TASK_NO_MORE_TCB
);

2027 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_flag.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

28 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

35 
OS_FœgBlock
(
OS_FLAG_GRP
 *
pgΩ
, 
OS_FLAG_NODE
 *
≤ode
, 
OS_FLAGS
 
Êags
, 
INT8U
 
waô_ty≥
, 
INT32U
 
timeout
);

36 
BOOLEAN
 
OS_FœgTaskRdy
(
OS_FLAG_NODE
 *
≤ode
, 
OS_FLAGS
 
Êags_rdy
);

91 #i‡
OS_FLAG_ACCEPT_EN
 > 0u

92 
OS_FLAGS
 
	$OSFœgAc˚±
 (
OS_FLAG_GRP
 *
pgΩ
,

93 
OS_FLAGS
 
Êags
,

94 
INT8U
 
waô_ty≥
,

95 
INT8U
 *
≥º
)

97 
OS_FLAGS
 
Êags_rdy
;

98 
INT8U
 
ªsu…
;

99 
BOOLEAN
 
c⁄sume
;

100 #i‡
OS_CRITICAL_METHOD
 == 3u

101 
OS_CPU_SR
 
˝u_§
 = 0u;

106 #ifde‡
OS_SAFETY_CRITICAL


107 i‡(
≥º
 =(
INT8U
 *)0) {

108 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

112 #i‡
OS_ARG_CHK_EN
 > 0u

113 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

114 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

115  ((
OS_FLAGS
)0);

118 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

119 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

120  ((
OS_FLAGS
)0);

122 
ªsu…
 = (
INT8U
)(
waô_ty≥
 & 
OS_FLAG_CONSUME
);

123 i‡(
ªsu…
 !(
INT8U
)0) {

124 
waô_ty≥
 &~
OS_FLAG_CONSUME
;

125 
c⁄sume
 = 
OS_TRUE
;

127 
c⁄sume
 = 
OS_FALSE
;

130 *
≥º
 = 
OS_ERR_NONE
;

131 
	`OS_ENTER_CRITICAL
();

132 
waô_ty≥
) {

133 
OS_FLAG_WAIT_SET_ALL
:

134 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

135 i‡(
Êags_rdy
 =
Êags
) {

136 i‡(
c⁄sume
 =
OS_TRUE
) {

137 
pgΩ
->
OSFœgFœgs
 &(
OS_FLAGS
)~
Êags_rdy
;

140 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

142 
	`OS_EXIT_CRITICAL
();

145 
OS_FLAG_WAIT_SET_ANY
:

146 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

147 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

148 i‡(
c⁄sume
 =
OS_TRUE
) {

149 
pgΩ
->
OSFœgFœgs
 &(
OS_FLAGS
)~
Êags_rdy
;

152 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

154 
	`OS_EXIT_CRITICAL
();

157 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0u

158 
OS_FLAG_WAIT_CLR_ALL
:

159 
Êags_rdy
 = (
OS_FLAGS
)~
pgΩ
->
OSFœgFœgs
 & 
Êags
;

160 i‡(
Êags_rdy
 =
Êags
) {

161 i‡(
c⁄sume
 =
OS_TRUE
) {

162 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

165 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

167 
	`OS_EXIT_CRITICAL
();

170 
OS_FLAG_WAIT_CLR_ANY
:

171 
Êags_rdy
 = (
OS_FLAGS
)~
pgΩ
->
OSFœgFœgs
 & 
Êags
;

172 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

173 i‡(
c⁄sume
 =
OS_TRUE
) {

174 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

177 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

179 
	`OS_EXIT_CRITICAL
();

184 
	`OS_EXIT_CRITICAL
();

185 
Êags_rdy
 = (
OS_FLAGS
)0;

186 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

189  (
Êags_rdy
);

190 
	}
}

214 
OS_FLAG_GRP
 *
	$OSFœgCª©e
 (
OS_FLAGS
 
Êags
,

215 
INT8U
 *
≥º
)

217 
OS_FLAG_GRP
 *
pgΩ
;

218 #i‡
OS_CRITICAL_METHOD
 == 3u

219 
OS_CPU_SR
 
˝u_§
 = 0u;

224 #ifde‡
OS_SAFETY_CRITICAL


225 i‡(
≥º
 =(
INT8U
 *)0) {

226 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

230 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


231 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

232 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

236 i‡(
OSI¡Ne°ög
 > 0u) {

237 *
≥º
 = 
OS_ERR_CREATE_ISR
;

238  ((
OS_FLAG_GRP
 *)0);

240 
	`OS_ENTER_CRITICAL
();

241 
pgΩ
 = 
OSFœgFªeLi°
;

242 i‡(
pgΩ
 !(
OS_FLAG_GRP
 *)0) {

244 
OSFœgFªeLi°
 = (
OS_FLAG_GRP
 *)OSFœgFªeLi°->
OSFœgWaôLi°
;

245 
pgΩ
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_FLAG
;

246 
pgΩ
->
OSFœgFœgs
 = 
Êags
;

247 
pgΩ
->
OSFœgWaôLi°
 = (*)0;

248 #i‡
OS_FLAG_NAME_EN
 > 0u

249 
pgΩ
->
OSFœgName
 = (
INT8U
 *)(*)"?";

251 
	`OS_EXIT_CRITICAL
();

252 *
≥º
 = 
OS_ERR_NONE
;

254 
	`OS_EXIT_CRITICAL
();

255 *
≥º
 = 
OS_ERR_FLAG_GRP_DEPLETED
;

257  (
pgΩ
);

258 
	}
}

297 #i‡
OS_FLAG_DEL_EN
 > 0u

298 
OS_FLAG_GRP
 *
	$OSFœgDñ
 (
OS_FLAG_GRP
 *
pgΩ
,

299 
INT8U
 
›t
,

300 
INT8U
 *
≥º
)

302 
BOOLEAN
 
èsks_waôög
;

303 
OS_FLAG_NODE
 *
≤ode
;

304 
OS_FLAG_GRP
 *
pgΩ_ªtu∫
;

305 #i‡
OS_CRITICAL_METHOD
 == 3u

306 
OS_CPU_SR
 
˝u_§
 = 0u;

311 #ifde‡
OS_SAFETY_CRITICAL


312 i‡(
≥º
 =(
INT8U
 *)0) {

313 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

317 #i‡
OS_ARG_CHK_EN
 > 0u

318 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

319 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

320  (
pgΩ
);

323 i‡(
OSI¡Ne°ög
 > 0u) {

324 *
≥º
 = 
OS_ERR_DEL_ISR
;

325  (
pgΩ
);

327 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

328 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

329  (
pgΩ
);

331 
	`OS_ENTER_CRITICAL
();

332 i‡(
pgΩ
->
OSFœgWaôLi°
 != (*)0) {

333 
èsks_waôög
 = 
OS_TRUE
;

335 
èsks_waôög
 = 
OS_FALSE
;

337 
›t
) {

338 
OS_DEL_NO_PEND
:

339 i‡(
èsks_waôög
 =
OS_FALSE
) {

340 #i‡
OS_FLAG_NAME_EN
 > 0u

341 
pgΩ
->
OSFœgName
 = (
INT8U
 *)(*)"?";

343 
pgΩ
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

344 
pgΩ
->
OSFœgWaôLi°
 = (*)
OSFœgFªeLi°
;

345 
pgΩ
->
OSFœgFœgs
 = (
OS_FLAGS
)0;

346 
OSFœgFªeLi°
 = 
pgΩ
;

347 
	`OS_EXIT_CRITICAL
();

348 *
≥º
 = 
OS_ERR_NONE
;

349 
pgΩ_ªtu∫
 = (
OS_FLAG_GRP
 *)0;

351 
	`OS_EXIT_CRITICAL
();

352 *
≥º
 = 
OS_ERR_TASK_WAITING
;

353 
pgΩ_ªtu∫
 = 
pgΩ
;

357 
OS_DEL_ALWAYS
:

358 
≤ode
 = (
OS_FLAG_NODE
 *)
pgΩ
->
OSFœgWaôLi°
;

359 
≤ode
 !(
OS_FLAG_NODE
 *)0) {

360 ()
	`OS_FœgTaskRdy
(
≤ode
, (
OS_FLAGS
)0);

361 
≤ode
 = (
OS_FLAG_NODE
 *Ìnode->
OSFœgNodeNext
;

363 #i‡
OS_FLAG_NAME_EN
 > 0u

364 
pgΩ
->
OSFœgName
 = (
INT8U
 *)(*)"?";

366 
pgΩ
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

367 
pgΩ
->
OSFœgWaôLi°
 = (*)
OSFœgFªeLi°
;

368 
pgΩ
->
OSFœgFœgs
 = (
OS_FLAGS
)0;

369 
OSFœgFªeLi°
 = 
pgΩ
;

370 
	`OS_EXIT_CRITICAL
();

371 i‡(
èsks_waôög
 =
OS_TRUE
) {

372 
	`OS_Sched
();

374 *
≥º
 = 
OS_ERR_NONE
;

375 
pgΩ_ªtu∫
 = (
OS_FLAG_GRP
 *)0;

379 
	`OS_EXIT_CRITICAL
();

380 *
≥º
 = 
OS_ERR_INVALID_OPT
;

381 
pgΩ_ªtu∫
 = 
pgΩ
;

384  (
pgΩ_ªtu∫
);

385 
	}
}

411 #i‡
OS_FLAG_NAME_EN
 > 0u

412 
INT8U
 
	$OSFœgNameGë
 (
OS_FLAG_GRP
 *
pgΩ
,

413 
INT8U
 **
≤ame
,

414 
INT8U
 *
≥º
)

416 
INT8U
 
Àn
;

417 #i‡
OS_CRITICAL_METHOD
 == 3u

418 
OS_CPU_SR
 
˝u_§
 = 0u;

423 #ifde‡
OS_SAFETY_CRITICAL


424 i‡(
≥º
 =(
INT8U
 *)0) {

425 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

429 #i‡
OS_ARG_CHK_EN
 > 0u

430 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

431 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

434 i‡(
≤ame
 =(
INT8U
 **)0) {

435 *
≥º
 = 
OS_ERR_PNAME_NULL
;

439 i‡(
OSI¡Ne°ög
 > 0u) {

440 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

443 
	`OS_ENTER_CRITICAL
();

444 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

445 
	`OS_EXIT_CRITICAL
();

446 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

449 *
≤ame
 = 
pgΩ
->
OSFœgName
;

450 
Àn
 = 
	`OS_SåLí
(*
≤ame
);

451 
	`OS_EXIT_CRITICAL
();

452 *
≥º
 = 
OS_ERR_NONE
;

453  (
Àn
);

454 
	}
}

481 #i‡
OS_FLAG_NAME_EN
 > 0u

482 
	$OSFœgNameSë
 (
OS_FLAG_GRP
 *
pgΩ
,

483 
INT8U
 *
≤ame
,

484 
INT8U
 *
≥º
)

486 #i‡
OS_CRITICAL_METHOD
 == 3u

487 
OS_CPU_SR
 
˝u_§
 = 0u;

492 #ifde‡
OS_SAFETY_CRITICAL


493 i‡(
≥º
 =(
INT8U
 *)0) {

494 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

498 #i‡
OS_ARG_CHK_EN
 > 0u

499 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

500 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

503 i‡(
≤ame
 =(
INT8U
 *)0) {

504 *
≥º
 = 
OS_ERR_PNAME_NULL
;

508 i‡(
OSI¡Ne°ög
 > 0u) {

509 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

512 
	`OS_ENTER_CRITICAL
();

513 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

514 
	`OS_EXIT_CRITICAL
();

515 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

518 
pgΩ
->
OSFœgName
 = 
≤ame
;

519 
	`OS_EXIT_CRITICAL
();

520 *
≥º
 = 
OS_ERR_NONE
;

522 
	}
}

580 
OS_FLAGS
 
	$OSFœgPíd
 (
OS_FLAG_GRP
 *
pgΩ
,

581 
OS_FLAGS
 
Êags
,

582 
INT8U
 
waô_ty≥
,

583 
INT32U
 
timeout
,

584 
INT8U
 *
≥º
)

586 
OS_FLAG_NODE
 
node
;

587 
OS_FLAGS
 
Êags_rdy
;

588 
INT8U
 
ªsu…
;

589 
INT8U
 
≥nd_°©
;

590 
BOOLEAN
 
c⁄sume
;

591 #i‡
OS_CRITICAL_METHOD
 == 3u

592 
OS_CPU_SR
 
˝u_§
 = 0u;

597 #ifde‡
OS_SAFETY_CRITICAL


598 i‡(
≥º
 =(
INT8U
 *)0) {

599 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

603 #i‡
OS_ARG_CHK_EN
 > 0u

604 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

605 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

606  ((
OS_FLAGS
)0);

609 i‡(
OSI¡Ne°ög
 > 0u) {

610 *
≥º
 = 
OS_ERR_PEND_ISR
;

611  ((
OS_FLAGS
)0);

613 i‡(
OSLockNe°ög
 > 0u) {

614 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

615  ((
OS_FLAGS
)0);

617 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

618 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

619  ((
OS_FLAGS
)0);

621 
ªsu…
 = (
INT8U
)(
waô_ty≥
 & 
OS_FLAG_CONSUME
);

622 i‡(
ªsu…
 !(
INT8U
)0) {

623 
waô_ty≥
 &(
INT8U
)~(INT8U)
OS_FLAG_CONSUME
;

624 
c⁄sume
 = 
OS_TRUE
;

626 
c⁄sume
 = 
OS_FALSE
;

629 
	`OS_ENTER_CRITICAL
();

630 
waô_ty≥
) {

631 
OS_FLAG_WAIT_SET_ALL
:

632 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

633 i‡(
Êags_rdy
 =
Êags
) {

634 i‡(
c⁄sume
 =
OS_TRUE
) {

635 
pgΩ
->
OSFœgFœgs
 &(
OS_FLAGS
)~
Êags_rdy
;

637 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

638 
	`OS_EXIT_CRITICAL
();

639 *
≥º
 = 
OS_ERR_NONE
;

640  (
Êags_rdy
);

642 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

643 
	`OS_EXIT_CRITICAL
();

647 
OS_FLAG_WAIT_SET_ANY
:

648 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

649 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

650 i‡(
c⁄sume
 =
OS_TRUE
) {

651 
pgΩ
->
OSFœgFœgs
 &(
OS_FLAGS
)~
Êags_rdy
;

653 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

654 
	`OS_EXIT_CRITICAL
();

655 *
≥º
 = 
OS_ERR_NONE
;

656  (
Êags_rdy
);

658 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

659 
	`OS_EXIT_CRITICAL
();

663 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0u

664 
OS_FLAG_WAIT_CLR_ALL
:

665 
Êags_rdy
 = (
OS_FLAGS
)~
pgΩ
->
OSFœgFœgs
 & 
Êags
;

666 i‡(
Êags_rdy
 =
Êags
) {

667 i‡(
c⁄sume
 =
OS_TRUE
) {

668 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

670 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

671 
	`OS_EXIT_CRITICAL
();

672 *
≥º
 = 
OS_ERR_NONE
;

673  (
Êags_rdy
);

675 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

676 
	`OS_EXIT_CRITICAL
();

680 
OS_FLAG_WAIT_CLR_ANY
:

681 
Êags_rdy
 = (
OS_FLAGS
)~
pgΩ
->
OSFœgFœgs
 & 
Êags
;

682 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

683 i‡(
c⁄sume
 =
OS_TRUE
) {

684 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

686 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

687 
	`OS_EXIT_CRITICAL
();

688 *
≥º
 = 
OS_ERR_NONE
;

689  (
Êags_rdy
);

691 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

692 
	`OS_EXIT_CRITICAL
();

698 
	`OS_EXIT_CRITICAL
();

699 
Êags_rdy
 = (
OS_FLAGS
)0;

700 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

701  (
Êags_rdy
);

704 
	`OS_Sched
();

705 
	`OS_ENTER_CRITICAL
();

706 i‡(
OSTCBCur
->
OSTCBSètPíd
 !
OS_STAT_PEND_OK
) {

707 
≥nd_°©
 = 
OSTCBCur
->
OSTCBSètPíd
;

708 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

709 
	`OS_FœgU∆ök
(&
node
);

710 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

711 
	`OS_EXIT_CRITICAL
();

712 
Êags_rdy
 = (
OS_FLAGS
)0;

713 
≥nd_°©
) {

714 
OS_STAT_PEND_ABORT
:

715 *
≥º
 = 
OS_ERR_PEND_ABORT
;

718 
OS_STAT_PEND_TO
:

720 *
≥º
 = 
OS_ERR_TIMEOUT
;

723  (
Êags_rdy
);

725 
Êags_rdy
 = 
OSTCBCur
->
OSTCBFœgsRdy
;

726 i‡(
c⁄sume
 =
OS_TRUE
) {

727 
waô_ty≥
) {

728 
OS_FLAG_WAIT_SET_ALL
:

729 
OS_FLAG_WAIT_SET_ANY
:

730 
pgΩ
->
OSFœgFœgs
 &(
OS_FLAGS
)~
Êags_rdy
;

733 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0u

734 
OS_FLAG_WAIT_CLR_ALL
:

735 
OS_FLAG_WAIT_CLR_ANY
:

736 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

740 
	`OS_EXIT_CRITICAL
();

741 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

742  ((
OS_FLAGS
)0);

745 
	`OS_EXIT_CRITICAL
();

746 *
≥º
 = 
OS_ERR_NONE
;

747  (
Êags_rdy
);

748 
	}
}

765 
OS_FLAGS
 
	$OSFœgPídGëFœgsRdy
 ()

767 
OS_FLAGS
 
Êags
;

768 #i‡
OS_CRITICAL_METHOD
 == 3u

769 
OS_CPU_SR
 
˝u_§
 = 0u;

774 
	`OS_ENTER_CRITICAL
();

775 
Êags
 = 
OSTCBCur
->
OSTCBFœgsRdy
;

776 
	`OS_EXIT_CRITICAL
();

777  (
Êags
);

778 
	}
}

822 
OS_FLAGS
 
	$OSFœgPo°
 (
OS_FLAG_GRP
 *
pgΩ
,

823 
OS_FLAGS
 
Êags
,

824 
INT8U
 
›t
,

825 
INT8U
 *
≥º
)

827 
OS_FLAG_NODE
 *
≤ode
;

828 
BOOLEAN
 
sched
;

829 
OS_FLAGS
 
Êags_cur
;

830 
OS_FLAGS
 
Êags_rdy
;

831 
BOOLEAN
 
rdy
;

832 #i‡
OS_CRITICAL_METHOD
 == 3u

833 
OS_CPU_SR
 
˝u_§
 = 0u;

838 #ifde‡
OS_SAFETY_CRITICAL


839 i‡(
≥º
 =(
INT8U
 *)0) {

840 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

844 #i‡
OS_ARG_CHK_EN
 > 0u

845 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

846 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

847  ((
OS_FLAGS
)0);

850 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

851 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

852  ((
OS_FLAGS
)0);

855 
	`OS_ENTER_CRITICAL
();

856 
›t
) {

857 
OS_FLAG_CLR
:

858 
pgΩ
->
OSFœgFœgs
 &(
OS_FLAGS
)~
Êags
;

861 
OS_FLAG_SET
:

862 
pgΩ
->
OSFœgFœgs
 |
Êags
;

866 
	`OS_EXIT_CRITICAL
();

867 *
≥º
 = 
OS_ERR_FLAG_INVALID_OPT
;

868  ((
OS_FLAGS
)0);

870 
sched
 = 
OS_FALSE
;

871 
≤ode
 = (
OS_FLAG_NODE
 *)
pgΩ
->
OSFœgWaôLi°
;

872 
≤ode
 !(
OS_FLAG_NODE
 *)0) {

873 
≤ode
->
OSFœgNodeWaôTy≥
) {

874 
OS_FLAG_WAIT_SET_ALL
:

875 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
);

876 i‡(
Êags_rdy
 =
≤ode
->
OSFœgNodeFœgs
) {

877 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

878 i‡(
rdy
 =
OS_TRUE
) {

879 
sched
 = 
OS_TRUE
;

884 
OS_FLAG_WAIT_SET_ANY
:

885 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
);

886 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

887 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

888 i‡(
rdy
 =
OS_TRUE
) {

889 
sched
 = 
OS_TRUE
;

894 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0u

895 
OS_FLAG_WAIT_CLR_ALL
:

896 
Êags_rdy
 = (
OS_FLAGS
)~
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
;

897 i‡(
Êags_rdy
 =
≤ode
->
OSFœgNodeFœgs
) {

898 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

899 i‡(
rdy
 =
OS_TRUE
) {

900 
sched
 = 
OS_TRUE
;

905 
OS_FLAG_WAIT_CLR_ANY
:

906 
Êags_rdy
 = (
OS_FLAGS
)~
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
;

907 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

908 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

909 i‡(
rdy
 =
OS_TRUE
) {

910 
sched
 = 
OS_TRUE
;

916 
	`OS_EXIT_CRITICAL
();

917 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

918  ((
OS_FLAGS
)0);

920 
≤ode
 = (
OS_FLAG_NODE
 *Ìnode->
OSFœgNodeNext
;

922 
	`OS_EXIT_CRITICAL
();

923 i‡(
sched
 =
OS_TRUE
) {

924 
	`OS_Sched
();

926 
	`OS_ENTER_CRITICAL
();

927 
Êags_cur
 = 
pgΩ
->
OSFœgFœgs
;

928 
	`OS_EXIT_CRITICAL
();

929 *
≥º
 = 
OS_ERR_NONE
;

930  (
Êags_cur
);

931 
	}
}

952 #i‡
OS_FLAG_QUERY_EN
 > 0u

953 
OS_FLAGS
 
	$OSFœgQuîy
 (
OS_FLAG_GRP
 *
pgΩ
,

954 
INT8U
 *
≥º
)

956 
OS_FLAGS
 
Êags
;

957 #i‡
OS_CRITICAL_METHOD
 == 3u

958 
OS_CPU_SR
 
˝u_§
 = 0u;

963 #ifde‡
OS_SAFETY_CRITICAL


964 i‡(
≥º
 =(
INT8U
 *)0) {

965 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

969 #i‡
OS_ARG_CHK_EN
 > 0u

970 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

971 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

972  ((
OS_FLAGS
)0);

975 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

976 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

977  ((
OS_FLAGS
)0);

979 
	`OS_ENTER_CRITICAL
();

980 
Êags
 = 
pgΩ
->
OSFœgFœgs
;

981 
	`OS_EXIT_CRITICAL
();

982 *
≥º
 = 
OS_ERR_NONE
;

983  (
Êags
);

984 
	}
}

1025 
	$OS_FœgBlock
 (
OS_FLAG_GRP
 *
pgΩ
,

1026 
OS_FLAG_NODE
 *
≤ode
,

1027 
OS_FLAGS
 
Êags
,

1028 
INT8U
 
waô_ty≥
,

1029 
INT32U
 
timeout
)

1031 
OS_FLAG_NODE
 *
≤ode_√xt
;

1032 
INT8U
 
y
;

1035 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_FLAG
;

1036 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

1037 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

1038 #i‡
OS_TASK_DEL_EN
 > 0u

1039 
OSTCBCur
->
OSTCBFœgNode
 = 
≤ode
;

1041 
≤ode
->
OSFœgNodeFœgs
 = 
Êags
;

1042 
≤ode
->
OSFœgNodeWaôTy≥
 = 
waô_ty≥
;

1043 
≤ode
->
OSFœgNodeTCB
 = (*)
OSTCBCur
;

1044 
≤ode
->
OSFœgNodeNext
 = 
pgΩ
->
OSFœgWaôLi°
;

1045 
≤ode
->
OSFœgNodePªv
 = (*)0;

1046 
≤ode
->
OSFœgNodeFœgGΩ
 = (*)
pgΩ
;

1047 
≤ode_√xt
 = (
OS_FLAG_NODE
 *)
pgΩ
->
OSFœgWaôLi°
;

1048 i‡(
≤ode_√xt
 != (*)0) {

1049 
≤ode_√xt
->
OSFœgNodePªv
 = 
≤ode
;

1051 
pgΩ
->
OSFœgWaôLi°
 = (*)
≤ode
;

1053 
y
 = 
OSTCBCur
->
OSTCBY
;

1054 
OSRdyTbl
[
y
] &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôX
;

1055 i‡(
OSRdyTbl
[
y
] == 0x00u) {

1056 
OSRdyGΩ
 &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôY
;

1058 
	}
}

1076 
	$OS_FœgInô
 ()

1078 #i‡
OS_MAX_FLAGS
 == 1u

1079 
OSFœgFªeLi°
 = (
OS_FLAG_GRP
 *)&
OSFœgTbl
[0];

1080 
OSFœgFªeLi°
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1081 
OSFœgFªeLi°
->
OSFœgWaôLi°
 = (*)0;

1082 
OSFœgFªeLi°
->
OSFœgFœgs
 = (
OS_FLAGS
)0;

1083 #i‡
OS_FLAG_NAME_EN
 > 0u

1084 
OSFœgFªeLi°
->
OSFœgName
 = (
INT8U
 *)"?";

1088 #i‡
OS_MAX_FLAGS
 >= 2u

1089 
INT16U
 
ix
;

1090 
INT16U
 
ix_√xt
;

1091 
OS_FLAG_GRP
 *
pgΩ1
;

1092 
OS_FLAG_GRP
 *
pgΩ2
;

1095 
	`OS_MemCÃ
((
INT8U
 *)&
OSFœgTbl
[0], (OSFlagTbl));

1096 
ix
 = 0u; ix < (
OS_MAX_FLAGS
 - 1u); ix++) {

1097 
ix_√xt
 = 
ix
 + 1u;

1098 
pgΩ1
 = &
OSFœgTbl
[
ix
];

1099 
pgΩ2
 = &
OSFœgTbl
[
ix_√xt
];

1100 
pgΩ1
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1101 
pgΩ1
->
OSFœgWaôLi°
 = (*)
pgΩ2
;

1102 #i‡
OS_FLAG_NAME_EN
 > 0u

1103 
pgΩ1
->
OSFœgName
 = (
INT8U
 *)(*)"?";

1106 
pgΩ1
 = &
OSFœgTbl
[
ix
];

1107 
pgΩ1
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1108 
pgΩ1
->
OSFœgWaôLi°
 = (*)0;

1109 #i‡
OS_FLAG_NAME_EN
 > 0u

1110 
pgΩ1
->
OSFœgName
 = (
INT8U
 *)(*)"?";

1112 
OSFœgFªeLi°
 = &
OSFœgTbl
[0];

1114 
	}
}

1140 
BOOLEAN
 
	$OS_FœgTaskRdy
 (
OS_FLAG_NODE
 *
≤ode
,

1141 
OS_FLAGS
 
Êags_rdy
)

1143 
OS_TCB
 *
±cb
;

1144 
BOOLEAN
 
sched
;

1147 
±cb
 = (
OS_TCB
 *)
≤ode
->
OSFœgNodeTCB
;

1148 
±cb
->
OSTCBDly
 = 0u;

1149 
±cb
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

1150 
±cb
->
OSTCBSèt
 &(
INT8U
)~(INT8U)
OS_STAT_FLAG
;

1151 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

1152 i‡(
±cb
->
OSTCBSèt
 =
OS_STAT_RDY
) {

1153 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

1154 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

1155 
sched
 = 
OS_TRUE
;

1157 
sched
 = 
OS_FALSE
;

1159 
	`OS_FœgU∆ök
(
≤ode
);

1160  (
sched
);

1161 
	}
}

1185 
	$OS_FœgU∆ök
 (
OS_FLAG_NODE
 *
≤ode
)

1187 #i‡
OS_TASK_DEL_EN
 > 0u

1188 
OS_TCB
 *
±cb
;

1190 
OS_FLAG_GRP
 *
pgΩ
;

1191 
OS_FLAG_NODE
 *
≤ode_¥ev
;

1192 
OS_FLAG_NODE
 *
≤ode_√xt
;

1195 
≤ode_¥ev
 = (
OS_FLAG_NODE
 *)
≤ode
->
OSFœgNodePªv
;

1196 
≤ode_√xt
 = (
OS_FLAG_NODE
 *)
≤ode
->
OSFœgNodeNext
;

1197 i‡(
≤ode_¥ev
 =(
OS_FLAG_NODE
 *)0) {

1198 
pgΩ
 = (
OS_FLAG_GRP
 *)
≤ode
->
OSFœgNodeFœgGΩ
;

1199 
pgΩ
->
OSFœgWaôLi°
 = (*)
≤ode_√xt
;

1200 i‡(
≤ode_√xt
 !(
OS_FLAG_NODE
 *)0) {

1201 
≤ode_√xt
->
OSFœgNodePªv
 = (
OS_FLAG_NODE
 *)0;

1204 
≤ode_¥ev
->
OSFœgNodeNext
 = 
≤ode_√xt
;

1205 i‡(
≤ode_√xt
 !(
OS_FLAG_NODE
 *)0) {

1206 
≤ode_√xt
->
OSFœgNodePªv
 = 
≤ode_¥ev
;

1209 #i‡
OS_TASK_DEL_EN
 > 0u

1210 
±cb
 = (
OS_TCB
 *)
≤ode
->
OSFœgNodeTCB
;

1211 
±cb
->
OSTCBFœgNode
 = (
OS_FLAG_NODE
 *)0;

1213 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_mbox.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

28 #i‡
OS_MBOX_EN
 > 0u

46 #i‡
OS_MBOX_ACCEPT_EN
 > 0u

47 *
	$OSMboxAc˚±
 (
OS_EVENT
 *
≥vít
)

49 *
pmsg
;

50 #i‡
OS_CRITICAL_METHOD
 == 3u

51 
OS_CPU_SR
 
˝u_§
 = 0u;

56 #i‡
OS_ARG_CHK_EN
 > 0u

57 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

61 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

64 
	`OS_ENTER_CRITICAL
();

65 
pmsg
 = 
≥vít
->
OSEvítPå
;

66 
≥vít
->
OSEvítPå
 = (*)0;

67 
	`OS_EXIT_CRITICAL
();

68  (
pmsg
);

69 
	}
}

88 
OS_EVENT
 *
	$OSMboxCª©e
 (*
pmsg
)

90 
OS_EVENT
 *
≥vít
;

91 #i‡
OS_CRITICAL_METHOD
 == 3u

92 
OS_CPU_SR
 
˝u_§
 = 0u;

97 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


98 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

99 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

103 i‡(
OSI¡Ne°ög
 > 0u) {

104  ((
OS_EVENT
 *)0);

106 
	`OS_ENTER_CRITICAL
();

107 
≥vít
 = 
OSEvítFªeLi°
;

108 i‡(
OSEvítFªeLi°
 !(
OS_EVENT
 *)0) {

109 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

111 
	`OS_EXIT_CRITICAL
();

112 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

113 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_MBOX
;

114 
≥vít
->
OSEvítC¡
 = 0u;

115 
≥vít
->
OSEvítPå
 = 
pmsg
;

116 #i‡
OS_EVENT_NAME_EN
 > 0u

117 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

119 
	`OS_EvítWaôLi°Inô
(
≥vít
);

121  (
≥vít
);

122 
	}
}

160 #i‡
OS_MBOX_DEL_EN
 > 0u

161 
OS_EVENT
 *
	$OSMboxDñ
 (
OS_EVENT
 *
≥vít
,

162 
INT8U
 
›t
,

163 
INT8U
 *
≥º
)

165 
BOOLEAN
 
èsks_waôög
;

166 
OS_EVENT
 *
≥vít_ªtu∫
;

167 #i‡
OS_CRITICAL_METHOD
 == 3u

168 
OS_CPU_SR
 
˝u_§
 = 0u;

173 #ifde‡
OS_SAFETY_CRITICAL


174 i‡(
≥º
 =(
INT8U
 *)0) {

175 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

179 #i‡
OS_ARG_CHK_EN
 > 0u

180 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

181 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

182  (
≥vít
);

185 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

186 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

187  (
≥vít
);

189 i‡(
OSI¡Ne°ög
 > 0u) {

190 *
≥º
 = 
OS_ERR_DEL_ISR
;

191  (
≥vít
);

193 
	`OS_ENTER_CRITICAL
();

194 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

195 
èsks_waôög
 = 
OS_TRUE
;

197 
èsks_waôög
 = 
OS_FALSE
;

199 
›t
) {

200 
OS_DEL_NO_PEND
:

201 i‡(
èsks_waôög
 =
OS_FALSE
) {

202 #i‡
OS_EVENT_NAME_EN
 > 0u

203 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

205 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

206 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

207 
≥vít
->
OSEvítC¡
 = 0u;

208 
OSEvítFªeLi°
 = 
≥vít
;

209 
	`OS_EXIT_CRITICAL
();

210 *
≥º
 = 
OS_ERR_NONE
;

211 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

213 
	`OS_EXIT_CRITICAL
();

214 *
≥º
 = 
OS_ERR_TASK_WAITING
;

215 
≥vít_ªtu∫
 = 
≥vít
;

219 
OS_DEL_ALWAYS
:

220 
≥vít
->
OSEvítGΩ
 != 0u) {

221 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

223 #i‡
OS_EVENT_NAME_EN
 > 0u

224 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

226 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

227 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

228 
≥vít
->
OSEvítC¡
 = 0u;

229 
OSEvítFªeLi°
 = 
≥vít
;

230 
	`OS_EXIT_CRITICAL
();

231 i‡(
èsks_waôög
 =
OS_TRUE
) {

232 
	`OS_Sched
();

234 *
≥º
 = 
OS_ERR_NONE
;

235 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

239 
	`OS_EXIT_CRITICAL
();

240 *
≥º
 = 
OS_ERR_INVALID_OPT
;

241 
≥vít_ªtu∫
 = 
≥vít
;

244  (
≥vít_ªtu∫
);

245 
	}
}

282 *
	$OSMboxPíd
 (
OS_EVENT
 *
≥vít
,

283 
INT32U
 
timeout
,

284 
INT8U
 *
≥º
)

286 *
pmsg
;

287 #i‡
OS_CRITICAL_METHOD
 == 3u

288 
OS_CPU_SR
 
˝u_§
 = 0u;

293 #ifde‡
OS_SAFETY_CRITICAL


294 i‡(
≥º
 =(
INT8U
 *)0) {

295 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

299 #i‡
OS_ARG_CHK_EN
 > 0u

300 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

301 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

305 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

306 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

309 i‡(
OSI¡Ne°ög
 > 0u) {

310 *
≥º
 = 
OS_ERR_PEND_ISR
;

313 i‡(
OSLockNe°ög
 > 0u) {

314 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

317 
	`OS_ENTER_CRITICAL
();

318 
pmsg
 = 
≥vít
->
OSEvítPå
;

319 i‡(
pmsg
 != (*)0) {

320 
≥vít
->
OSEvítPå
 = (*)0;

321 
	`OS_EXIT_CRITICAL
();

322 *
≥º
 = 
OS_ERR_NONE
;

323  (
pmsg
);

325 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_MBOX
;

326 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

327 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

328 
	`OS_EvítTaskWaô
(
≥vít
);

329 
	`OS_EXIT_CRITICAL
();

330 
	`OS_Sched
();

331 
	`OS_ENTER_CRITICAL
();

332 
OSTCBCur
->
OSTCBSètPíd
) {

333 
OS_STAT_PEND_OK
:

334 
pmsg
 = 
OSTCBCur
->
OSTCBMsg
;

335 *
≥º
 = 
OS_ERR_NONE
;

338 
OS_STAT_PEND_ABORT
:

339 
pmsg
 = (*)0;

340 *
≥º
 = 
OS_ERR_PEND_ABORT
;

343 
OS_STAT_PEND_TO
:

345 
	`OS_EvítTaskRemove
(
OSTCBCur
, 
≥vít
);

346 
pmsg
 = (*)0;

347 *
≥º
 = 
OS_ERR_TIMEOUT
;

350 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

351 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

352 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

353 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

354 
OSTCBCur
->
OSTCBEvítMu…iPå
 = (
OS_EVENT
 **)0;

356 
OSTCBCur
->
OSTCBMsg
 = (*)0;

357 
	`OS_EXIT_CRITICAL
();

358  (
pmsg
);

359 
	}
}

393 #i‡
OS_MBOX_PEND_ABORT_EN
 > 0u

394 
INT8U
 
	$OSMboxPídAb‹t
 (
OS_EVENT
 *
≥vít
,

395 
INT8U
 
›t
,

396 
INT8U
 *
≥º
)

398 
INT8U
 
nbr_èsks
;

399 #i‡
OS_CRITICAL_METHOD
 == 3u

400 
OS_CPU_SR
 
˝u_§
 = 0u;

405 #ifde‡
OS_SAFETY_CRITICAL


406 i‡(
≥º
 =(
INT8U
 *)0) {

407 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

411 #i‡
OS_ARG_CHK_EN
 > 0u

412 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

413 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

417 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

418 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

421 
	`OS_ENTER_CRITICAL
();

422 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

423 
nbr_èsks
 = 0u;

424 
›t
) {

425 
OS_PEND_OPT_BROADCAST
:

426 
≥vít
->
OSEvítGΩ
 != 0u) {

427 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MBOX
, 
OS_STAT_PEND_ABORT
);

428 
nbr_èsks
++;

432 
OS_PEND_OPT_NONE
:

434 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MBOX
, 
OS_STAT_PEND_ABORT
);

435 
nbr_èsks
++;

438 
	`OS_EXIT_CRITICAL
();

439 
	`OS_Sched
();

440 *
≥º
 = 
OS_ERR_PEND_ABORT
;

441  (
nbr_èsks
);

443 
	`OS_EXIT_CRITICAL
();

444 *
≥º
 = 
OS_ERR_NONE
;

446 
	}
}

472 #i‡
OS_MBOX_POST_EN
 > 0u

473 
INT8U
 
	$OSMboxPo°
 (
OS_EVENT
 *
≥vít
,

474 *
pmsg
)

476 #i‡
OS_CRITICAL_METHOD
 == 3u

477 
OS_CPU_SR
 
˝u_§
 = 0u;

482 #i‡
OS_ARG_CHK_EN
 > 0u

483 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

484  (
OS_ERR_PEVENT_NULL
);

486 i‡(
pmsg
 == (*)0) {

487  (
OS_ERR_POST_NULL_PTR
);

490 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

491  (
OS_ERR_EVENT_TYPE
);

493 
	`OS_ENTER_CRITICAL
();

494 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

496 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

497 
	`OS_EXIT_CRITICAL
();

498 
	`OS_Sched
();

499  (
OS_ERR_NONE
);

501 i‡(
≥vít
->
OSEvítPå
 != (*)0) {

502 
	`OS_EXIT_CRITICAL
();

503  (
OS_ERR_MBOX_FULL
);

505 
≥vít
->
OSEvítPå
 = 
pmsg
;

506 
	`OS_EXIT_CRITICAL
();

507  (
OS_ERR_NONE
);

508 
	}
}

544 #i‡
OS_MBOX_POST_OPT_EN
 > 0u

545 
INT8U
 
	$OSMboxPo°O±
 (
OS_EVENT
 *
≥vít
,

546 *
pmsg
,

547 
INT8U
 
›t
)

549 #i‡
OS_CRITICAL_METHOD
 == 3u

550 
OS_CPU_SR
 
˝u_§
 = 0u;

555 #i‡
OS_ARG_CHK_EN
 > 0u

556 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

557  (
OS_ERR_PEVENT_NULL
);

559 i‡(
pmsg
 == (*)0) {

560  (
OS_ERR_POST_NULL_PTR
);

563 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

564  (
OS_ERR_EVENT_TYPE
);

566 
	`OS_ENTER_CRITICAL
();

567 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

568 i‡((
›t
 & 
OS_POST_OPT_BROADCAST
) != 0x00u) {

569 
≥vít
->
OSEvítGΩ
 != 0u) {

570 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

573 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

575 
	`OS_EXIT_CRITICAL
();

576 i‡((
›t
 & 
OS_POST_OPT_NO_SCHED
) == 0u) {

577 
	`OS_Sched
();

579  (
OS_ERR_NONE
);

581 i‡(
≥vít
->
OSEvítPå
 != (*)0) {

582 
	`OS_EXIT_CRITICAL
();

583  (
OS_ERR_MBOX_FULL
);

585 
≥vít
->
OSEvítPå
 = 
pmsg
;

586 
	`OS_EXIT_CRITICAL
();

587  (
OS_ERR_NONE
);

588 
	}
}

610 #i‡
OS_MBOX_QUERY_EN
 > 0u

611 
INT8U
 
	$OSMboxQuîy
 (
OS_EVENT
 *
≥vít
,

612 
OS_MBOX_DATA
 *
p_mbox_d©a
)

614 
INT8U
 
i
;

615 
OS_PRIO
 *
p§c
;

616 
OS_PRIO
 *
pde°
;

617 #i‡
OS_CRITICAL_METHOD
 == 3u

618 
OS_CPU_SR
 
˝u_§
 = 0u;

623 #i‡
OS_ARG_CHK_EN
 > 0u

624 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

625  (
OS_ERR_PEVENT_NULL
);

627 i‡(
p_mbox_d©a
 =(
OS_MBOX_DATA
 *)0) {

628  (
OS_ERR_PDATA_NULL
);

631 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

632  (
OS_ERR_EVENT_TYPE
);

634 
	`OS_ENTER_CRITICAL
();

635 
p_mbox_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

636 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

637 
pde°
 = &
p_mbox_d©a
->
OSEvítTbl
[0];

638 
i
 = 0u; i < 
OS_EVENT_TBL_SIZE
; i++) {

639 *
pde°
++ = *
p§c
++;

641 
p_mbox_d©a
->
OSMsg
 = 
≥vít
->
OSEvítPå
;

642 
	`OS_EXIT_CRITICAL
();

643  (
OS_ERR_NONE
);

644 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_mem.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

28 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

59 
OS_MEM
 *
	$OSMemCª©e
 (*
addr
,

60 
INT32U
 
nblks
,

61 
INT32U
 
blksize
,

62 
INT8U
 *
≥º
)

64 
OS_MEM
 *
pmem
;

65 
INT8U
 *
pblk
;

66 **
∂ök
;

67 
INT32U
 
lo›s
;

68 
INT32U
 
i
;

69 #i‡
OS_CRITICAL_METHOD
 == 3u

70 
OS_CPU_SR
 
˝u_§
 = 0u;

75 #ifde‡
OS_SAFETY_CRITICAL


76 i‡(
≥º
 =(
INT8U
 *)0) {

77 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

81 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


82 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

83 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

87 #i‡
OS_ARG_CHK_EN
 > 0u

88 i‡(
addr
 == (*)0) {

89 *
≥º
 = 
OS_ERR_MEM_INVALID_ADDR
;

90  ((
OS_MEM
 *)0);

92 i‡(((
INT32U
)
addr
 & ((*) - 1u)) != 0u){

93 *
≥º
 = 
OS_ERR_MEM_INVALID_ADDR
;

94  ((
OS_MEM
 *)0);

96 i‡(
nblks
 < 2u) {

97 *
≥º
 = 
OS_ERR_MEM_INVALID_BLKS
;

98  ((
OS_MEM
 *)0);

100 i‡(
blksize
 < (*)) {

101 *
≥º
 = 
OS_ERR_MEM_INVALID_SIZE
;

102  ((
OS_MEM
 *)0);

105 
	`OS_ENTER_CRITICAL
();

106 
pmem
 = 
OSMemFªeLi°
;

107 i‡(
OSMemFªeLi°
 !(
OS_MEM
 *)0) {

108 
OSMemFªeLi°
 = (
OS_MEM
 *)OSMemFreeList->OSMemFreeList;

110 
	`OS_EXIT_CRITICAL
();

111 i‡(
pmem
 =(
OS_MEM
 *)0) {

112 *
≥º
 = 
OS_ERR_MEM_INVALID_PART
;

113  ((
OS_MEM
 *)0);

115 
∂ök
 = (**)
addr
;

116 
pblk
 = (
INT8U
 *)
addr
;

117 
lo›s
 = 
nblks
 - 1u;

118 
i
 = 0u; i < 
lo›s
; i++) {

119 
pblk
 +
blksize
;

120 *
∂ök
 = (*)
pblk
;

121 
∂ök
 = (**)
pblk
;

123 *
∂ök
 = (*)0;

124 
pmem
->
OSMemAddr
 = 
addr
;

125 
pmem
->
OSMemFªeLi°
 = 
addr
;

126 
pmem
->
OSMemNFªe
 = 
nblks
;

127 
pmem
->
OSMemNBlks
 = 
nblks
;

128 
pmem
->
OSMemBlkSize
 = 
blksize
;

129 *
≥º
 = 
OS_ERR_NONE
;

130  (
pmem
);

131 
	}
}

153 *
	$OSMemGë
 (
OS_MEM
 *
pmem
,

154 
INT8U
 *
≥º
)

156 *
pblk
;

157 #i‡
OS_CRITICAL_METHOD
 == 3u

158 
OS_CPU_SR
 
˝u_§
 = 0u;

163 #ifde‡
OS_SAFETY_CRITICAL


164 i‡(
≥º
 =(
INT8U
 *)0) {

165 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

169 #i‡
OS_ARG_CHK_EN
 > 0u

170 i‡(
pmem
 =(
OS_MEM
 *)0) {

171 *
≥º
 = 
OS_ERR_MEM_INVALID_PMEM
;

175 
	`OS_ENTER_CRITICAL
();

176 i‡(
pmem
->
OSMemNFªe
 > 0u) {

177 
pblk
 = 
pmem
->
OSMemFªeLi°
;

178 
pmem
->
OSMemFªeLi°
 = *(**)
pblk
;

179 
pmem
->
OSMemNFªe
--;

180 
	`OS_EXIT_CRITICAL
();

181 *
≥º
 = 
OS_ERR_NONE
;

182  (
pblk
);

184 
	`OS_EXIT_CRITICAL
();

185 *
≥º
 = 
OS_ERR_MEM_NO_FREE_BLKS
;

187 
	}
}

210 #i‡
OS_MEM_NAME_EN
 > 0u

211 
INT8U
 
	$OSMemNameGë
 (
OS_MEM
 *
pmem
,

212 
INT8U
 **
≤ame
,

213 
INT8U
 *
≥º
)

215 
INT8U
 
Àn
;

216 #i‡
OS_CRITICAL_METHOD
 == 3u

217 
OS_CPU_SR
 
˝u_§
 = 0u;

222 #ifde‡
OS_SAFETY_CRITICAL


223 i‡(
≥º
 =(
INT8U
 *)0) {

224 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

228 #i‡
OS_ARG_CHK_EN
 > 0u

229 i‡(
pmem
 =(
OS_MEM
 *)0) {

230 *
≥º
 = 
OS_ERR_MEM_INVALID_PMEM
;

233 i‡(
≤ame
 =(
INT8U
 **)0) {

234 *
≥º
 = 
OS_ERR_PNAME_NULL
;

238 i‡(
OSI¡Ne°ög
 > 0u) {

239 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

242 
	`OS_ENTER_CRITICAL
();

243 *
≤ame
 = 
pmem
->
OSMemName
;

244 
Àn
 = 
	`OS_SåLí
(*
≤ame
);

245 
	`OS_EXIT_CRITICAL
();

246 *
≥º
 = 
OS_ERR_NONE
;

247  (
Àn
);

248 
	}
}

274 #i‡
OS_MEM_NAME_EN
 > 0u

275 
	$OSMemNameSë
 (
OS_MEM
 *
pmem
,

276 
INT8U
 *
≤ame
,

277 
INT8U
 *
≥º
)

279 #i‡
OS_CRITICAL_METHOD
 == 3u

280 
OS_CPU_SR
 
˝u_§
 = 0u;

285 #ifde‡
OS_SAFETY_CRITICAL


286 i‡(
≥º
 =(
INT8U
 *)0) {

287 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

291 #i‡
OS_ARG_CHK_EN
 > 0u

292 i‡(
pmem
 =(
OS_MEM
 *)0) {

293 *
≥º
 = 
OS_ERR_MEM_INVALID_PMEM
;

296 i‡(
≤ame
 =(
INT8U
 *)0) {

297 *
≥º
 = 
OS_ERR_PNAME_NULL
;

301 i‡(
OSI¡Ne°ög
 > 0u) {

302 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

305 
	`OS_ENTER_CRITICAL
();

306 
pmem
->
OSMemName
 = 
≤ame
;

307 
	`OS_EXIT_CRITICAL
();

308 *
≥º
 = 
OS_ERR_NONE
;

309 
	}
}

331 
INT8U
 
	$OSMemPut
 (
OS_MEM
 *
pmem
,

332 *
pblk
)

334 #i‡
OS_CRITICAL_METHOD
 == 3u

335 
OS_CPU_SR
 
˝u_§
 = 0u;

340 #i‡
OS_ARG_CHK_EN
 > 0u

341 i‡(
pmem
 =(
OS_MEM
 *)0) {

342  (
OS_ERR_MEM_INVALID_PMEM
);

344 i‡(
pblk
 == (*)0) {

345  (
OS_ERR_MEM_INVALID_PBLK
);

348 
	`OS_ENTER_CRITICAL
();

349 i‡(
pmem
->
OSMemNFªe
 >pmem->
OSMemNBlks
) {

350 
	`OS_EXIT_CRITICAL
();

351  (
OS_ERR_MEM_FULL
);

353 *(**)
pblk
 = 
pmem
->
OSMemFªeLi°
;

354 
pmem
->
OSMemFªeLi°
 = 
pblk
;

355 
pmem
->
OSMemNFªe
++;

356 
	`OS_EXIT_CRITICAL
();

357  (
OS_ERR_NONE
);

358 
	}
}

378 #i‡
OS_MEM_QUERY_EN
 > 0u

379 
INT8U
 
	$OSMemQuîy
 (
OS_MEM
 *
pmem
,

380 
OS_MEM_DATA
 *
p_mem_d©a
)

382 #i‡
OS_CRITICAL_METHOD
 == 3u

383 
OS_CPU_SR
 
˝u_§
 = 0u;

388 #i‡
OS_ARG_CHK_EN
 > 0u

389 i‡(
pmem
 =(
OS_MEM
 *)0) {

390  (
OS_ERR_MEM_INVALID_PMEM
);

392 i‡(
p_mem_d©a
 =(
OS_MEM_DATA
 *)0) {

393  (
OS_ERR_MEM_INVALID_PDATA
);

396 
	`OS_ENTER_CRITICAL
();

397 
p_mem_d©a
->
OSAddr
 = 
pmem
->
OSMemAddr
;

398 
p_mem_d©a
->
OSFªeLi°
 = 
pmem
->
OSMemFªeLi°
;

399 
p_mem_d©a
->
OSBlkSize
 = 
pmem
->
OSMemBlkSize
;

400 
p_mem_d©a
->
OSNBlks
 = 
pmem
->
OSMemNBlks
;

401 
p_mem_d©a
->
OSNFªe
 = 
pmem
->
OSMemNFªe
;

402 
	`OS_EXIT_CRITICAL
();

403 
p_mem_d©a
->
OSNU£d
 =Ö_mem_d©a->
OSNBlks
 -Ö_mem_d©a->
OSNFªe
;

404  (
OS_ERR_NONE
);

405 
	}
}

423 
	$OS_MemInô
 ()

425 #i‡
OS_MAX_MEM_PART
 == 1u

426 
	`OS_MemCÃ
((
INT8U
 *)&
OSMemTbl
[0], (OSMemTbl));

427 
OSMemFªeLi°
 = (
OS_MEM
 *)&
OSMemTbl
[0];

428 #i‡
OS_MEM_NAME_EN
 > 0u

429 
OSMemFªeLi°
->
OSMemName
 = (
INT8U
 *)"?";

433 #i‡
OS_MAX_MEM_PART
 >= 2u

434 
OS_MEM
 *
pmem
;

435 
INT16U
 
i
;

438 
	`OS_MemCÃ
((
INT8U
 *)&
OSMemTbl
[0], (OSMemTbl));

439 
i
 = 0u; i < (
OS_MAX_MEM_PART
 - 1u); i++) {

440 
pmem
 = &
OSMemTbl
[
i
];

441 
pmem
->
OSMemFªeLi°
 = (*)&
OSMemTbl
[
i
 + 1u];

442 #i‡
OS_MEM_NAME_EN
 > 0u

443 
pmem
->
OSMemName
 = (
INT8U
 *)(*)"?";

446 
pmem
 = &
OSMemTbl
[
i
];

447 
pmem
->
OSMemFªeLi°
 = (*)0;

448 #i‡
OS_MEM_NAME_EN
 > 0u

449 
pmem
->
OSMemName
 = (
INT8U
 *)(*)"?";

452 
OSMemFªeLi°
 = &
OSMemTbl
[0];

454 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_mutex.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

29 #i‡
OS_MUTEX_EN
 > 0u

36 
	#OS_MUTEX_KEEP_LOWER_8
 ((
INT16U
)0x00FFu)

	)

37 
	#OS_MUTEX_KEEP_UPPER_8
 ((
INT16U
)0xFF00u)

	)

39 
	#OS_MUTEX_AVAILABLE
 ((
INT16U
)0x00FFu)

	)

47 
OSMuãx_RdyAtPrio
(
OS_TCB
 *
±cb
, 
INT8U
 
¥io
);

83 #i‡
OS_MUTEX_ACCEPT_EN
 > 0u

84 
BOOLEAN
 
	$OSMuãxAc˚±
 (
OS_EVENT
 *
≥vít
,

85 
INT8U
 *
≥º
)

87 
INT8U
 
pù
;

88 #i‡
OS_CRITICAL_METHOD
 == 3u

89 
OS_CPU_SR
 
˝u_§
 = 0u;

94 #ifde‡
OS_SAFETY_CRITICAL


95 i‡(
≥º
 =(
INT8U
 *)0) {

96 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

100 #i‡
OS_ARG_CHK_EN
 > 0u

101 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

102 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

103  (
OS_FALSE
);

106 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

107 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

108  (
OS_FALSE
);

110 i‡(
OSI¡Ne°ög
 > 0u) {

111 *
≥º
 = 
OS_ERR_PEND_ISR
;

112  (
OS_FALSE
);

114 
	`OS_ENTER_CRITICAL
();

115 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8u);

116 i‡((
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
Ë=
OS_MUTEX_AVAILABLE
) {

117 
≥vít
->
OSEvítC¡
 &
OS_MUTEX_KEEP_UPPER_8
;

118 
≥vít
->
OSEvítC¡
 |
OSTCBCur
->
OSTCBPrio
;

119 
≥vít
->
OSEvítPå
 = (*)
OSTCBCur
;

120 i‡(
OSTCBCur
->
OSTCBPrio
 <
pù
) {

121 
	`OS_EXIT_CRITICAL
();

122 *
≥º
 = 
OS_ERR_PIP_LOWER
;

124 
	`OS_EXIT_CRITICAL
();

125 *
≥º
 = 
OS_ERR_NONE
;

127  (
OS_TRUE
);

129 
	`OS_EXIT_CRITICAL
();

130 *
≥º
 = 
OS_ERR_NONE
;

131  (
OS_FALSE
);

132 
	}
}

170 
OS_EVENT
 *
	$OSMuãxCª©e
 (
INT8U
 
¥io
,

171 
INT8U
 *
≥º
)

173 
OS_EVENT
 *
≥vít
;

174 #i‡
OS_CRITICAL_METHOD
 == 3u

175 
OS_CPU_SR
 
˝u_§
 = 0u;

180 #ifde‡
OS_SAFETY_CRITICAL


181 i‡(
≥º
 =(
INT8U
 *)0) {

182 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

186 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


187 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

188 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

192 #i‡
OS_ARG_CHK_EN
 > 0u

193 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

194 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

195  ((
OS_EVENT
 *)0);

198 i‡(
OSI¡Ne°ög
 > 0u) {

199 *
≥º
 = 
OS_ERR_CREATE_ISR
;

200  ((
OS_EVENT
 *)0);

202 
	`OS_ENTER_CRITICAL
();

203 i‡(
OSTCBPrioTbl
[
¥io
] !(
OS_TCB
 *)0) {

204 
	`OS_EXIT_CRITICAL
();

205 *
≥º
 = 
OS_ERR_PRIO_EXIST
;

206  ((
OS_EVENT
 *)0);

208 
OSTCBPrioTbl
[
¥io
] = 
OS_TCB_RESERVED
;

209 
≥vít
 = 
OSEvítFªeLi°
;

210 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

211 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

212 
	`OS_EXIT_CRITICAL
();

213 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

214  (
≥vít
);

216 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

217 
	`OS_EXIT_CRITICAL
();

218 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_MUTEX
;

219 
≥vít
->
OSEvítC¡
 = (
INT16U
)((INT16U)
¥io
 << 8uË| 
OS_MUTEX_AVAILABLE
;

220 
≥vít
->
OSEvítPå
 = (*)0;

221 #i‡
OS_EVENT_NAME_EN
 > 0u

222 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

224 
	`OS_EvítWaôLi°Inô
(
≥vít
);

225 *
≥º
 = 
OS_ERR_NONE
;

226  (
≥vít
);

227 
	}
}

270 #i‡
OS_MUTEX_DEL_EN
 > 0u

271 
OS_EVENT
 *
	$OSMuãxDñ
 (
OS_EVENT
 *
≥vít
,

272 
INT8U
 
›t
,

273 
INT8U
 *
≥º
)

275 
BOOLEAN
 
èsks_waôög
;

276 
OS_EVENT
 *
≥vít_ªtu∫
;

277 
INT8U
 
pù
;

278 
INT8U
 
¥io
;

279 
OS_TCB
 *
±cb
;

280 #i‡
OS_CRITICAL_METHOD
 == 3u

281 
OS_CPU_SR
 
˝u_§
 = 0u;

286 #ifde‡
OS_SAFETY_CRITICAL


287 i‡(
≥º
 =(
INT8U
 *)0) {

288 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

292 #i‡
OS_ARG_CHK_EN
 > 0u

293 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

294 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

295  (
≥vít
);

298 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

299 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

300  (
≥vít
);

302 i‡(
OSI¡Ne°ög
 > 0u) {

303 *
≥º
 = 
OS_ERR_DEL_ISR
;

304  (
≥vít
);

306 
	`OS_ENTER_CRITICAL
();

307 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

308 
èsks_waôög
 = 
OS_TRUE
;

310 
èsks_waôög
 = 
OS_FALSE
;

312 
›t
) {

313 
OS_DEL_NO_PEND
:

314 i‡(
èsks_waôög
 =
OS_FALSE
) {

315 #i‡
OS_EVENT_NAME_EN
 > 0u

316 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

318 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8u);

319 
OSTCBPrioTbl
[
pù
] = (
OS_TCB
 *)0;

320 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

321 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

322 
≥vít
->
OSEvítC¡
 = 0u;

323 
OSEvítFªeLi°
 = 
≥vít
;

324 
	`OS_EXIT_CRITICAL
();

325 *
≥º
 = 
OS_ERR_NONE
;

326 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

328 
	`OS_EXIT_CRITICAL
();

329 *
≥º
 = 
OS_ERR_TASK_WAITING
;

330 
≥vít_ªtu∫
 = 
≥vít
;

334 
OS_DEL_ALWAYS
:

335 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8u);

336 
¥io
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

337 
±cb
 = (
OS_TCB
 *)
≥vít
->
OSEvítPå
;

338 i‡(
±cb
 !(
OS_TCB
 *)0) {

339 i‡(
±cb
->
OSTCBPrio
 =
pù
) {

340 
	`OSMuãx_RdyAtPrio
(
±cb
, 
¥io
);

343 
≥vít
->
OSEvítGΩ
 != 0u) {

344 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MUTEX
, 
OS_STAT_PEND_OK
);

346 #i‡
OS_EVENT_NAME_EN
 > 0u

347 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

349 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8u);

350 
OSTCBPrioTbl
[
pù
] = (
OS_TCB
 *)0;

351 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

352 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

353 
≥vít
->
OSEvítC¡
 = 0u;

354 
OSEvítFªeLi°
 = 
≥vít
;

355 
	`OS_EXIT_CRITICAL
();

356 i‡(
èsks_waôög
 =
OS_TRUE
) {

357 
	`OS_Sched
();

359 *
≥º
 = 
OS_ERR_NONE
;

360 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

364 
	`OS_EXIT_CRITICAL
();

365 *
≥º
 = 
OS_ERR_INVALID_OPT
;

366 
≥vít_ªtu∫
 = 
≥vít
;

369  (
≥vít_ªtu∫
);

370 
	}
}

414 
	$OSMuãxPíd
 (
OS_EVENT
 *
≥vít
,

415 
INT32U
 
timeout
,

416 
INT8U
 *
≥º
)

418 
INT8U
 
pù
;

419 
INT8U
 
m¥io
;

420 
BOOLEAN
 
rdy
;

421 
OS_TCB
 *
±cb
;

422 
OS_EVENT
 *
≥vít2
;

423 
INT8U
 
y
;

424 #i‡
OS_CRITICAL_METHOD
 == 3u

425 
OS_CPU_SR
 
˝u_§
 = 0u;

430 #ifde‡
OS_SAFETY_CRITICAL


431 i‡(
≥º
 =(
INT8U
 *)0) {

432 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

436 #i‡
OS_ARG_CHK_EN
 > 0u

437 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

438 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

442 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

443 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

446 i‡(
OSI¡Ne°ög
 > 0u) {

447 *
≥º
 = 
OS_ERR_PEND_ISR
;

450 i‡(
OSLockNe°ög
 > 0u) {

451 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

455 
	`OS_ENTER_CRITICAL
();

456 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8u);

458 i‡((
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
Ë=
OS_MUTEX_AVAILABLE
) {

459 
≥vít
->
OSEvítC¡
 &
OS_MUTEX_KEEP_UPPER_8
;

460 
≥vít
->
OSEvítC¡
 |
OSTCBCur
->
OSTCBPrio
;

461 
≥vít
->
OSEvítPå
 = (*)
OSTCBCur
;

462 i‡(
OSTCBCur
->
OSTCBPrio
 <
pù
) {

463 
	`OS_EXIT_CRITICAL
();

464 *
≥º
 = 
OS_ERR_PIP_LOWER
;

466 
	`OS_EXIT_CRITICAL
();

467 *
≥º
 = 
OS_ERR_NONE
;

471 
m¥io
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

472 
±cb
 = (
OS_TCB
 *)(
≥vít
->
OSEvítPå
);

473 i‡(
±cb
->
OSTCBPrio
 > 
pù
) {

474 i‡(
m¥io
 > 
OSTCBCur
->
OSTCBPrio
) {

475 
y
 = 
±cb
->
OSTCBY
;

476 i‡((
OSRdyTbl
[
y
] & 
±cb
->
OSTCBBôX
) != 0u) {

477 
OSRdyTbl
[
y
] &(
OS_PRIO
)~
±cb
->
OSTCBBôX
;

478 i‡(
OSRdyTbl
[
y
] == 0u) {

479 
OSRdyGΩ
 &(
OS_PRIO
)~
±cb
->
OSTCBBôY
;

481 
rdy
 = 
OS_TRUE
;

483 
≥vít2
 = 
±cb
->
OSTCBEvítPå
;

484 i‡(
≥vít2
 !(
OS_EVENT
 *)0) {

485 
y
 = 
±cb
->
OSTCBY
;

486 
≥vít2
->
OSEvítTbl
[
y
] &(
OS_PRIO
)~
±cb
->
OSTCBBôX
;

487 i‡(
≥vít2
->
OSEvítTbl
[
y
] == 0u) {

488 
≥vít2
->
OSEvítGΩ
 &(
OS_PRIO
)~
±cb
->
OSTCBBôY
;

491 
rdy
 = 
OS_FALSE
;

493 
±cb
->
OSTCBPrio
 = 
pù
;

494 #i‡
OS_LOWEST_PRIO
 <= 63u

495 
±cb
->
OSTCBY
 = (
INT8U
)–±cb->
OSTCBPrio
 >> 3u);

496 
±cb
->
OSTCBX
 = (
INT8U
)–±cb->
OSTCBPrio
 & 0x07u);

498 
±cb
->
OSTCBY
 = (
INT8U
)((INT8U)’tcb->
OSTCBPrio
 >> 4u) & 0xFFu);

499 
±cb
->
OSTCBX
 = (
INT8U
)–±cb->
OSTCBPrio
 & 0x0Fu);

501 
±cb
->
OSTCBBôY
 = (
OS_PRIO
)(1uL <<Ötcb->
OSTCBY
);

502 
±cb
->
OSTCBBôX
 = (
OS_PRIO
)(1uL <<Ötcb->
OSTCBX
);

504 i‡(
rdy
 =
OS_TRUE
) {

505 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

506 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

508 
≥vít2
 = 
±cb
->
OSTCBEvítPå
;

509 i‡(
≥vít2
 !(
OS_EVENT
 *)0) {

510 
≥vít2
->
OSEvítGΩ
 |
±cb
->
OSTCBBôY
;

511 
≥vít2
->
OSEvítTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

514 
OSTCBPrioTbl
[
pù
] = 
±cb
;

517 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_MUTEX
;

518 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

519 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

520 
	`OS_EvítTaskWaô
(
≥vít
);

521 
	`OS_EXIT_CRITICAL
();

522 
	`OS_Sched
();

523 
	`OS_ENTER_CRITICAL
();

524 
OSTCBCur
->
OSTCBSètPíd
) {

525 
OS_STAT_PEND_OK
:

526 *
≥º
 = 
OS_ERR_NONE
;

529 
OS_STAT_PEND_ABORT
:

530 *
≥º
 = 
OS_ERR_PEND_ABORT
;

533 
OS_STAT_PEND_TO
:

535 
	`OS_EvítTaskRemove
(
OSTCBCur
, 
≥vít
);

536 *
≥º
 = 
OS_ERR_TIMEOUT
;

539 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

540 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

541 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

542 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

543 
OSTCBCur
->
OSTCBEvítMu…iPå
 = (
OS_EVENT
 **)0;

545 
	`OS_EXIT_CRITICAL
();

546 
	}
}

572 
INT8U
 
	$OSMuãxPo°
 (
OS_EVENT
 *
≥vít
)

574 
INT8U
 
pù
;

575 
INT8U
 
¥io
;

576 #i‡
OS_CRITICAL_METHOD
 == 3u

577 
OS_CPU_SR
 
˝u_§
 = 0u;

582 i‡(
OSI¡Ne°ög
 > 0u) {

583  (
OS_ERR_POST_ISR
);

585 #i‡
OS_ARG_CHK_EN
 > 0u

586 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

587  (
OS_ERR_PEVENT_NULL
);

590 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

591  (
OS_ERR_EVENT_TYPE
);

593 
	`OS_ENTER_CRITICAL
();

594 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8u);

595 
¥io
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

596 i‡(
OSTCBCur
 !(
OS_TCB
 *)
≥vít
->
OSEvítPå
) {

597 
	`OS_EXIT_CRITICAL
();

598  (
OS_ERR_NOT_MUTEX_OWNER
);

600 i‡(
OSTCBCur
->
OSTCBPrio
 =
pù
) {

601 
	`OSMuãx_RdyAtPrio
(
OSTCBCur
, 
¥io
);

603 
OSTCBPrioTbl
[
pù
] = 
OS_TCB_RESERVED
;

604 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

606 
¥io
 = 
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MUTEX
, 
OS_STAT_PEND_OK
);

607 
≥vít
->
OSEvítC¡
 &
OS_MUTEX_KEEP_UPPER_8
;

608 
≥vít
->
OSEvítC¡
 |
¥io
;

609 
≥vít
->
OSEvítPå
 = 
OSTCBPrioTbl
[
¥io
];

610 i‡(
¥io
 <
pù
) {

611 
	`OS_EXIT_CRITICAL
();

612 
	`OS_Sched
();

613  (
OS_ERR_PIP_LOWER
);

615 
	`OS_EXIT_CRITICAL
();

616 
	`OS_Sched
();

617  (
OS_ERR_NONE
);

620 
≥vít
->
OSEvítC¡
 |
OS_MUTEX_AVAILABLE
;

621 
≥vít
->
OSEvítPå
 = (*)0;

622 
	`OS_EXIT_CRITICAL
();

623  (
OS_ERR_NONE
);

624 
	}
}

644 #i‡
OS_MUTEX_QUERY_EN
 > 0u

645 
INT8U
 
	$OSMuãxQuîy
 (
OS_EVENT
 *
≥vít
,

646 
OS_MUTEX_DATA
 *
p_muãx_d©a
)

648 
INT8U
 
i
;

649 
OS_PRIO
 *
p§c
;

650 
OS_PRIO
 *
pde°
;

651 #i‡
OS_CRITICAL_METHOD
 == 3u

652 
OS_CPU_SR
 
˝u_§
 = 0u;

657 i‡(
OSI¡Ne°ög
 > 0u) {

658  (
OS_ERR_QUERY_ISR
);

660 #i‡
OS_ARG_CHK_EN
 > 0u

661 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

662  (
OS_ERR_PEVENT_NULL
);

664 i‡(
p_muãx_d©a
 =(
OS_MUTEX_DATA
 *)0) {

665  (
OS_ERR_PDATA_NULL
);

668 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

669  (
OS_ERR_EVENT_TYPE
);

671 
	`OS_ENTER_CRITICAL
();

672 
p_muãx_d©a
->
OSMuãxPIP
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8u);

673 
p_muãx_d©a
->
OSOw√rPrio
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

674 i‡(
p_muãx_d©a
->
OSOw√rPrio
 == 0xFFu) {

675 
p_muãx_d©a
->
OSVÆue
 = 
OS_TRUE
;

677 
p_muãx_d©a
->
OSVÆue
 = 
OS_FALSE
;

679 
p_muãx_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

680 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

681 
pde°
 = &
p_muãx_d©a
->
OSEvítTbl
[0];

682 
i
 = 0u; i < 
OS_EVENT_TBL_SIZE
; i++) {

683 *
pde°
++ = *
p§c
++;

685 
	`OS_EXIT_CRITICAL
();

686  (
OS_ERR_NONE
);

687 
	}
}

705 
	$OSMuãx_RdyAtPrio
 (
OS_TCB
 *
±cb
,

706 
INT8U
 
¥io
)

708 
INT8U
 
y
;

711 
y
 = 
±cb
->
OSTCBY
;

712 
OSRdyTbl
[
y
] &(
OS_PRIO
)~
±cb
->
OSTCBBôX
;

713 i‡(
OSRdyTbl
[
y
] == 0u) {

714 
OSRdyGΩ
 &(
OS_PRIO
)~
±cb
->
OSTCBBôY
;

716 
±cb
->
OSTCBPrio
 = 
¥io
;

717 
OSPrioCur
 = 
¥io
;

718 #i‡
OS_LOWEST_PRIO
 <= 63u

719 
±cb
->
OSTCBY
 = (
INT8U
)((INT8U)(
¥io
 >> 3u) & 0x07u);

720 
±cb
->
OSTCBX
 = (
INT8U
)(
¥io
 & 0x07u);

722 
±cb
->
OSTCBY
 = (
INT8U
)((INT8U)(
¥io
 >> 4u) & 0x0Fu);

723 
±cb
->
OSTCBX
 = (
INT8U
Ë(
¥io
 & 0x0Fu);

725 
±cb
->
OSTCBBôY
 = (
OS_PRIO
)(1uL <<Ötcb->
OSTCBY
);

726 
±cb
->
OSTCBBôX
 = (
OS_PRIO
)(1uL <<Ötcb->
OSTCBX
);

727 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

728 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

729 
OSTCBPrioTbl
[
¥io
] = 
±cb
;

731 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_q.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

28 #i‡(
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)

60 #i‡
OS_Q_ACCEPT_EN
 > 0u

61 *
	$OSQAc˚±
 (
OS_EVENT
 *
≥vít
,

62 
INT8U
 *
≥º
)

64 *
pmsg
;

65 
OS_Q
 *
pq
;

66 #i‡
OS_CRITICAL_METHOD
 == 3u

67 
OS_CPU_SR
 
˝u_§
 = 0u;

72 #ifde‡
OS_SAFETY_CRITICAL


73 i‡(
≥º
 =(
INT8U
 *)0) {

74 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

78 #i‡
OS_ARG_CHK_EN
 > 0u

79 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

80 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

84 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

85 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

88 
	`OS_ENTER_CRITICAL
();

89 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

90 i‡(
pq
->
OSQE¡rõs
 > 0u) {

91 
pmsg
 = *
pq
->
OSQOut
++;

92 
pq
->
OSQE¡rõs
--;

93 i‡(
pq
->
OSQOut
 =pq->
OSQEnd
) {

94 
pq
->
OSQOut
 =Öq->
OSQSèπ
;

96 *
≥º
 = 
OS_ERR_NONE
;

98 *
≥º
 = 
OS_ERR_Q_EMPTY
;

99 
pmsg
 = (*)0;

101 
	`OS_EXIT_CRITICAL
();

102  (
pmsg
);

103 
	}
}

125 
OS_EVENT
 *
	$OSQCª©e
 (**
°¨t
,

126 
INT16U
 
size
)

128 
OS_EVENT
 *
≥vít
;

129 
OS_Q
 *
pq
;

130 #i‡
OS_CRITICAL_METHOD
 == 3u

131 
OS_CPU_SR
 
˝u_§
 = 0u;

136 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


137 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

138 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

142 i‡(
OSI¡Ne°ög
 > 0u) {

143  ((
OS_EVENT
 *)0);

145 
	`OS_ENTER_CRITICAL
();

146 
≥vít
 = 
OSEvítFªeLi°
;

147 i‡(
OSEvítFªeLi°
 !(
OS_EVENT
 *)0) {

148 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

150 
	`OS_EXIT_CRITICAL
();

151 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

152 
	`OS_ENTER_CRITICAL
();

153 
pq
 = 
OSQFªeLi°
;

154 i‡(
pq
 !(
OS_Q
 *)0) {

155 
OSQFªeLi°
 = OSQFªeLi°->
OSQPå
;

156 
	`OS_EXIT_CRITICAL
();

157 
pq
->
OSQSèπ
 = 
°¨t
;

158 
pq
->
OSQEnd
 = &
°¨t
[
size
];

159 
pq
->
OSQIn
 = 
°¨t
;

160 
pq
->
OSQOut
 = 
°¨t
;

161 
pq
->
OSQSize
 = 
size
;

162 
pq
->
OSQE¡rõs
 = 0u;

163 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_Q
;

164 
≥vít
->
OSEvítC¡
 = 0u;

165 
≥vít
->
OSEvítPå
 = 
pq
;

166 #i‡
OS_EVENT_NAME_EN
 > 0u

167 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

169 
	`OS_EvítWaôLi°Inô
(
≥vít
);

171 
≥vít
->
OSEvítPå
 = (*)
OSEvítFªeLi°
;

172 
OSEvítFªeLi°
 = 
≥vít
;

173 
	`OS_EXIT_CRITICAL
();

174 
≥vít
 = (
OS_EVENT
 *)0;

177  (
≥vít
);

178 
	}
}

221 #i‡
OS_Q_DEL_EN
 > 0u

222 
OS_EVENT
 *
	$OSQDñ
 (
OS_EVENT
 *
≥vít
,

223 
INT8U
 
›t
,

224 
INT8U
 *
≥º
)

226 
BOOLEAN
 
èsks_waôög
;

227 
OS_EVENT
 *
≥vít_ªtu∫
;

228 
OS_Q
 *
pq
;

229 #i‡
OS_CRITICAL_METHOD
 == 3u

230 
OS_CPU_SR
 
˝u_§
 = 0u;

235 #ifde‡
OS_SAFETY_CRITICAL


236 i‡(
≥º
 =(
INT8U
 *)0) {

237 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

241 #i‡
OS_ARG_CHK_EN
 > 0u

242 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

243 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

244  (
≥vít
);

247 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

248 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

249  (
≥vít
);

251 i‡(
OSI¡Ne°ög
 > 0u) {

252 *
≥º
 = 
OS_ERR_DEL_ISR
;

253  (
≥vít
);

255 
	`OS_ENTER_CRITICAL
();

256 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

257 
èsks_waôög
 = 
OS_TRUE
;

259 
èsks_waôög
 = 
OS_FALSE
;

261 
›t
) {

262 
OS_DEL_NO_PEND
:

263 i‡(
èsks_waôög
 =
OS_FALSE
) {

264 #i‡
OS_EVENT_NAME_EN
 > 0u

265 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

267 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

268 
pq
->
OSQPå
 = 
OSQFªeLi°
;

269 
OSQFªeLi°
 = 
pq
;

270 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

271 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

272 
≥vít
->
OSEvítC¡
 = 0u;

273 
OSEvítFªeLi°
 = 
≥vít
;

274 
	`OS_EXIT_CRITICAL
();

275 *
≥º
 = 
OS_ERR_NONE
;

276 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

278 
	`OS_EXIT_CRITICAL
();

279 *
≥º
 = 
OS_ERR_TASK_WAITING
;

280 
≥vít_ªtu∫
 = 
≥vít
;

284 
OS_DEL_ALWAYS
:

285 
≥vít
->
OSEvítGΩ
 != 0u) {

286 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

288 #i‡
OS_EVENT_NAME_EN
 > 0u

289 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

291 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

292 
pq
->
OSQPå
 = 
OSQFªeLi°
;

293 
OSQFªeLi°
 = 
pq
;

294 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

295 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

296 
≥vít
->
OSEvítC¡
 = 0u;

297 
OSEvítFªeLi°
 = 
≥vít
;

298 
	`OS_EXIT_CRITICAL
();

299 i‡(
èsks_waôög
 =
OS_TRUE
) {

300 
	`OS_Sched
();

302 *
≥º
 = 
OS_ERR_NONE
;

303 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

307 
	`OS_EXIT_CRITICAL
();

308 *
≥º
 = 
OS_ERR_INVALID_OPT
;

309 
≥vít_ªtu∫
 = 
≥vít
;

312  (
≥vít_ªtu∫
);

313 
	}
}

336 #i‡
OS_Q_FLUSH_EN
 > 0u

337 
INT8U
 
	$OSQFlush
 (
OS_EVENT
 *
≥vít
)

339 
OS_Q
 *
pq
;

340 #i‡
OS_CRITICAL_METHOD
 == 3u

341 
OS_CPU_SR
 
˝u_§
 = 0u;

346 #i‡
OS_ARG_CHK_EN
 > 0u

347 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

348  (
OS_ERR_PEVENT_NULL
);

350 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

351  (
OS_ERR_EVENT_TYPE
);

354 
	`OS_ENTER_CRITICAL
();

355 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

356 
pq
->
OSQIn
 =Öq->
OSQSèπ
;

357 
pq
->
OSQOut
 =Öq->
OSQSèπ
;

358 
pq
->
OSQE¡rõs
 = 0u;

359 
	`OS_EXIT_CRITICAL
();

360  (
OS_ERR_NONE
);

361 
	}
}

401 *
	$OSQPíd
 (
OS_EVENT
 *
≥vít
,

402 
INT32U
 
timeout
,

403 
INT8U
 *
≥º
)

405 *
pmsg
;

406 
OS_Q
 *
pq
;

407 #i‡
OS_CRITICAL_METHOD
 == 3u

408 
OS_CPU_SR
 
˝u_§
 = 0u;

413 #ifde‡
OS_SAFETY_CRITICAL


414 i‡(
≥º
 =(
INT8U
 *)0) {

415 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

419 #i‡
OS_ARG_CHK_EN
 > 0u

420 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

421 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

425 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

426 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

429 i‡(
OSI¡Ne°ög
 > 0u) {

430 *
≥º
 = 
OS_ERR_PEND_ISR
;

433 i‡(
OSLockNe°ög
 > 0u) {

434 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

437 
	`OS_ENTER_CRITICAL
();

438 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

439 i‡(
pq
->
OSQE¡rõs
 > 0u) {

440 
pmsg
 = *
pq
->
OSQOut
++;

441 
pq
->
OSQE¡rõs
--;

442 i‡(
pq
->
OSQOut
 =pq->
OSQEnd
) {

443 
pq
->
OSQOut
 =Öq->
OSQSèπ
;

445 
	`OS_EXIT_CRITICAL
();

446 *
≥º
 = 
OS_ERR_NONE
;

447  (
pmsg
);

449 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_Q
;

450 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

451 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

452 
	`OS_EvítTaskWaô
(
≥vít
);

453 
	`OS_EXIT_CRITICAL
();

454 
	`OS_Sched
();

455 
	`OS_ENTER_CRITICAL
();

456 
OSTCBCur
->
OSTCBSètPíd
) {

457 
OS_STAT_PEND_OK
:

458 
pmsg
 = 
OSTCBCur
->
OSTCBMsg
;

459 *
≥º
 = 
OS_ERR_NONE
;

462 
OS_STAT_PEND_ABORT
:

463 
pmsg
 = (*)0;

464 *
≥º
 = 
OS_ERR_PEND_ABORT
;

467 
OS_STAT_PEND_TO
:

469 
	`OS_EvítTaskRemove
(
OSTCBCur
, 
≥vít
);

470 
pmsg
 = (*)0;

471 *
≥º
 = 
OS_ERR_TIMEOUT
;

474 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

475 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

476 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

477 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

478 
OSTCBCur
->
OSTCBEvítMu…iPå
 = (
OS_EVENT
 **)0;

480 
OSTCBCur
->
OSTCBMsg
 = (*)0;

481 
	`OS_EXIT_CRITICAL
();

482  (
pmsg
);

483 
	}
}

517 #i‡
OS_Q_PEND_ABORT_EN
 > 0u

518 
INT8U
 
	$OSQPídAb‹t
 (
OS_EVENT
 *
≥vít
,

519 
INT8U
 
›t
,

520 
INT8U
 *
≥º
)

522 
INT8U
 
nbr_èsks
;

523 #i‡
OS_CRITICAL_METHOD
 == 3u

524 
OS_CPU_SR
 
˝u_§
 = 0u;

529 #ifde‡
OS_SAFETY_CRITICAL


530 i‡(
≥º
 =(
INT8U
 *)0) {

531 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

535 #i‡
OS_ARG_CHK_EN
 > 0u

536 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

537 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

541 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

542 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

545 
	`OS_ENTER_CRITICAL
();

546 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

547 
nbr_èsks
 = 0u;

548 
›t
) {

549 
OS_PEND_OPT_BROADCAST
:

550 
≥vít
->
OSEvítGΩ
 != 0u) {

551 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_Q
, 
OS_STAT_PEND_ABORT
);

552 
nbr_èsks
++;

556 
OS_PEND_OPT_NONE
:

558 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_Q
, 
OS_STAT_PEND_ABORT
);

559 
nbr_èsks
++;

562 
	`OS_EXIT_CRITICAL
();

563 
	`OS_Sched
();

564 *
≥º
 = 
OS_ERR_PEND_ABORT
;

565  (
nbr_èsks
);

567 
	`OS_EXIT_CRITICAL
();

568 *
≥º
 = 
OS_ERR_NONE
;

570 
	}
}

593 #i‡
OS_Q_POST_EN
 > 0u

594 
INT8U
 
	$OSQPo°
 (
OS_EVENT
 *
≥vít
,

595 *
pmsg
)

597 
OS_Q
 *
pq
;

598 #i‡
OS_CRITICAL_METHOD
 == 3u

599 
OS_CPU_SR
 
˝u_§
 = 0u;

604 #i‡
OS_ARG_CHK_EN
 > 0u

605 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

606  (
OS_ERR_PEVENT_NULL
);

609 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

610  (
OS_ERR_EVENT_TYPE
);

612 
	`OS_ENTER_CRITICAL
();

613 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

615 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

616 
	`OS_EXIT_CRITICAL
();

617 
	`OS_Sched
();

618  (
OS_ERR_NONE
);

620 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

621 i‡(
pq
->
OSQE¡rõs
 >pq->
OSQSize
) {

622 
	`OS_EXIT_CRITICAL
();

623  (
OS_ERR_Q_FULL
);

625 *
pq
->
OSQIn
++ = 
pmsg
;

626 
pq
->
OSQE¡rõs
++;

627 i‡(
pq
->
OSQIn
 =pq->
OSQEnd
) {

628 
pq
->
OSQIn
 =Öq->
OSQSèπ
;

630 
	`OS_EXIT_CRITICAL
();

631  (
OS_ERR_NONE
);

632 
	}
}

656 #i‡
OS_Q_POST_FRONT_EN
 > 0u

657 
INT8U
 
	$OSQPo°Fr⁄t
 (
OS_EVENT
 *
≥vít
,

658 *
pmsg
)

660 
OS_Q
 *
pq
;

661 #i‡
OS_CRITICAL_METHOD
 == 3u

662 
OS_CPU_SR
 
˝u_§
 = 0u;

667 #i‡
OS_ARG_CHK_EN
 > 0u

668 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

669  (
OS_ERR_PEVENT_NULL
);

672 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

673  (
OS_ERR_EVENT_TYPE
);

675 
	`OS_ENTER_CRITICAL
();

676 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

678 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

679 
	`OS_EXIT_CRITICAL
();

680 
	`OS_Sched
();

681  (
OS_ERR_NONE
);

683 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

684 i‡(
pq
->
OSQE¡rõs
 >pq->
OSQSize
) {

685 
	`OS_EXIT_CRITICAL
();

686  (
OS_ERR_Q_FULL
);

688 i‡(
pq
->
OSQOut
 =pq->
OSQSèπ
) {

689 
pq
->
OSQOut
 =Öq->
OSQEnd
;

691 
pq
->
OSQOut
--;

692 *
pq
->
OSQOut
 = 
pmsg
;

693 
pq
->
OSQE¡rõs
++;

694 
	`OS_EXIT_CRITICAL
();

695  (
OS_ERR_NONE
);

696 
	}
}

728 #i‡
OS_Q_POST_OPT_EN
 > 0u

729 
INT8U
 
	$OSQPo°O±
 (
OS_EVENT
 *
≥vít
,

730 *
pmsg
,

731 
INT8U
 
›t
)

733 
OS_Q
 *
pq
;

734 #i‡
OS_CRITICAL_METHOD
 == 3u

735 
OS_CPU_SR
 
˝u_§
 = 0u;

740 #i‡
OS_ARG_CHK_EN
 > 0u

741 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

742  (
OS_ERR_PEVENT_NULL
);

745 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

746  (
OS_ERR_EVENT_TYPE
);

748 
	`OS_ENTER_CRITICAL
();

749 i‡(
≥vít
->
OSEvítGΩ
 != 0x00u) {

750 i‡((
›t
 & 
OS_POST_OPT_BROADCAST
) != 0x00u) {

751 
≥vít
->
OSEvítGΩ
 != 0u) {

752 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

755 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

757 
	`OS_EXIT_CRITICAL
();

758 i‡((
›t
 & 
OS_POST_OPT_NO_SCHED
) == 0u) {

759 
	`OS_Sched
();

761  (
OS_ERR_NONE
);

763 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

764 i‡(
pq
->
OSQE¡rõs
 >pq->
OSQSize
) {

765 
	`OS_EXIT_CRITICAL
();

766  (
OS_ERR_Q_FULL
);

768 i‡((
›t
 & 
OS_POST_OPT_FRONT
) != 0x00u) {

769 i‡(
pq
->
OSQOut
 =pq->
OSQSèπ
) {

770 
pq
->
OSQOut
 =Öq->
OSQEnd
;

772 
pq
->
OSQOut
--;

773 *
pq
->
OSQOut
 = 
pmsg
;

775 *
pq
->
OSQIn
++ = 
pmsg
;

776 i‡(
pq
->
OSQIn
 =pq->
OSQEnd
) {

777 
pq
->
OSQIn
 =Öq->
OSQSèπ
;

780 
pq
->
OSQE¡rõs
++;

781 
	`OS_EXIT_CRITICAL
();

782  (
OS_ERR_NONE
);

783 
	}
}

804 #i‡
OS_Q_QUERY_EN
 > 0u

805 
INT8U
 
	$OSQQuîy
 (
OS_EVENT
 *
≥vít
,

806 
OS_Q_DATA
 *
p_q_d©a
)

808 
OS_Q
 *
pq
;

809 
INT8U
 
i
;

810 
OS_PRIO
 *
p§c
;

811 
OS_PRIO
 *
pde°
;

812 #i‡
OS_CRITICAL_METHOD
 == 3u

813 
OS_CPU_SR
 
˝u_§
 = 0u;

818 #i‡
OS_ARG_CHK_EN
 > 0u

819 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

820  (
OS_ERR_PEVENT_NULL
);

822 i‡(
p_q_d©a
 =(
OS_Q_DATA
 *)0) {

823  (
OS_ERR_PDATA_NULL
);

826 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

827  (
OS_ERR_EVENT_TYPE
);

829 
	`OS_ENTER_CRITICAL
();

830 
p_q_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

831 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

832 
pde°
 = &
p_q_d©a
->
OSEvítTbl
[0];

833 
i
 = 0u; i < 
OS_EVENT_TBL_SIZE
; i++) {

834 *
pde°
++ = *
p§c
++;

836 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

837 i‡(
pq
->
OSQE¡rõs
 > 0u) {

838 
p_q_d©a
->
OSMsg
 = *
pq
->
OSQOut
;

840 
p_q_d©a
->
OSMsg
 = (*)0;

842 
p_q_d©a
->
OSNMsgs
 = 
pq
->
OSQE¡rõs
;

843 
p_q_d©a
->
OSQSize
 = 
pq
->OSQSize;

844 
	`OS_EXIT_CRITICAL
();

845  (
OS_ERR_NONE
);

846 
	}
}

865 
	$OS_QInô
 ()

867 #i‡
OS_MAX_QS
 == 1u

868 
OSQFªeLi°
 = &
OSQTbl
[0];

869 
OSQFªeLi°
->
OSQPå
 = (
OS_Q
 *)0;

872 #i‡
OS_MAX_QS
 >= 2u

873 
INT16U
 
ix
;

874 
INT16U
 
ix_√xt
;

875 
OS_Q
 *
pq1
;

876 
OS_Q
 *
pq2
;

880 
	`OS_MemCÃ
((
INT8U
 *)&
OSQTbl
[0], (OSQTbl));

881 
ix
 = 0u; ix < (
OS_MAX_QS
 - 1u); ix++) {

882 
ix_√xt
 = 
ix
 + 1u;

883 
pq1
 = &
OSQTbl
[
ix
];

884 
pq2
 = &
OSQTbl
[
ix_√xt
];

885 
pq1
->
OSQPå
 = 
pq2
;

887 
pq1
 = &
OSQTbl
[
ix
];

888 
pq1
->
OSQPå
 = (
OS_Q
 *)0;

889 
OSQFªeLi°
 = &
OSQTbl
[0];

891 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_sem.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

28 #i‡
OS_SEM_EN
 > 0u

48 #i‡
OS_SEM_ACCEPT_EN
 > 0u

49 
INT16U
 
	$OSSemAc˚±
 (
OS_EVENT
 *
≥vít
)

51 
INT16U
 
˙t
;

52 #i‡
OS_CRITICAL_METHOD
 == 3u

53 
OS_CPU_SR
 
˝u_§
 = 0u;

58 #i‡
OS_ARG_CHK_EN
 > 0u

59 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

63 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

66 
	`OS_ENTER_CRITICAL
();

67 
˙t
 = 
≥vít
->
OSEvítC¡
;

68 i‡(
˙t
 > 0u) {

69 
≥vít
->
OSEvítC¡
--;

71 
	`OS_EXIT_CRITICAL
();

72  (
˙t
);

73 
	}
}

94 
OS_EVENT
 *
	$OSSemCª©e
 (
INT16U
 
˙t
)

96 
OS_EVENT
 *
≥vít
;

97 #i‡
OS_CRITICAL_METHOD
 == 3u

98 
OS_CPU_SR
 
˝u_§
 = 0u;

103 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


104 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

105 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

109 i‡(
OSI¡Ne°ög
 > 0u) {

110  ((
OS_EVENT
 *)0);

112 
	`OS_ENTER_CRITICAL
();

113 
≥vít
 = 
OSEvítFªeLi°
;

114 i‡(
OSEvítFªeLi°
 !(
OS_EVENT
 *)0) {

115 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

117 
	`OS_EXIT_CRITICAL
();

118 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

119 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_SEM
;

120 
≥vít
->
OSEvítC¡
 = 
˙t
;

121 
≥vít
->
OSEvítPå
 = (*)0;

122 #i‡
OS_EVENT_NAME_EN
 > 0u

123 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

125 
	`OS_EvítWaôLi°Inô
(
≥vít
);

127  (
≥vít
);

128 
	}
}

168 #i‡
OS_SEM_DEL_EN
 > 0u

169 
OS_EVENT
 *
	$OSSemDñ
 (
OS_EVENT
 *
≥vít
,

170 
INT8U
 
›t
,

171 
INT8U
 *
≥º
)

173 
BOOLEAN
 
èsks_waôög
;

174 
OS_EVENT
 *
≥vít_ªtu∫
;

175 #i‡
OS_CRITICAL_METHOD
 == 3u

176 
OS_CPU_SR
 
˝u_§
 = 0u;

181 #ifde‡
OS_SAFETY_CRITICAL


182 i‡(
≥º
 =(
INT8U
 *)0) {

183 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

187 #i‡
OS_ARG_CHK_EN
 > 0u

188 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

189 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

190  (
≥vít
);

193 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

194 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

195  (
≥vít
);

197 i‡(
OSI¡Ne°ög
 > 0u) {

198 *
≥º
 = 
OS_ERR_DEL_ISR
;

199  (
≥vít
);

201 
	`OS_ENTER_CRITICAL
();

202 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

203 
èsks_waôög
 = 
OS_TRUE
;

205 
èsks_waôög
 = 
OS_FALSE
;

207 
›t
) {

208 
OS_DEL_NO_PEND
:

209 i‡(
èsks_waôög
 =
OS_FALSE
) {

210 #i‡
OS_EVENT_NAME_EN
 > 0u

211 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

213 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

214 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

215 
≥vít
->
OSEvítC¡
 = 0u;

216 
OSEvítFªeLi°
 = 
≥vít
;

217 
	`OS_EXIT_CRITICAL
();

218 *
≥º
 = 
OS_ERR_NONE
;

219 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

221 
	`OS_EXIT_CRITICAL
();

222 *
≥º
 = 
OS_ERR_TASK_WAITING
;

223 
≥vít_ªtu∫
 = 
≥vít
;

227 
OS_DEL_ALWAYS
:

228 
≥vít
->
OSEvítGΩ
 != 0u) {

229 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_OK
);

231 #i‡
OS_EVENT_NAME_EN
 > 0u

232 
≥vít
->
OSEvítName
 = (
INT8U
 *)(*)"?";

234 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

235 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

236 
≥vít
->
OSEvítC¡
 = 0u;

237 
OSEvítFªeLi°
 = 
≥vít
;

238 
	`OS_EXIT_CRITICAL
();

239 i‡(
èsks_waôög
 =
OS_TRUE
) {

240 
	`OS_Sched
();

242 *
≥º
 = 
OS_ERR_NONE
;

243 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

247 
	`OS_EXIT_CRITICAL
();

248 *
≥º
 = 
OS_ERR_INVALID_OPT
;

249 
≥vít_ªtu∫
 = 
≥vít
;

252  (
≥vít_ªtu∫
);

253 
	}
}

289 
	$OSSemPíd
 (
OS_EVENT
 *
≥vít
,

290 
INT32U
 
timeout
,

291 
INT8U
 *
≥º
)

293 #i‡
OS_CRITICAL_METHOD
 == 3u

294 
OS_CPU_SR
 
˝u_§
 = 0u;

299 #ifde‡
OS_SAFETY_CRITICAL


300 i‡(
≥º
 =(
INT8U
 *)0) {

301 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

305 #i‡
OS_ARG_CHK_EN
 > 0u

306 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

307 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

311 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

312 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

315 i‡(
OSI¡Ne°ög
 > 0u) {

316 *
≥º
 = 
OS_ERR_PEND_ISR
;

319 i‡(
OSLockNe°ög
 > 0u) {

320 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

323 
	`OS_ENTER_CRITICAL
();

324 i‡(
≥vít
->
OSEvítC¡
 > 0u) {

325 
≥vít
->
OSEvítC¡
--;

326 
	`OS_EXIT_CRITICAL
();

327 *
≥º
 = 
OS_ERR_NONE
;

331 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_SEM
;

332 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

333 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

334 
	`OS_EvítTaskWaô
(
≥vít
);

335 
	`OS_EXIT_CRITICAL
();

336 
	`OS_Sched
();

337 
	`OS_ENTER_CRITICAL
();

338 
OSTCBCur
->
OSTCBSètPíd
) {

339 
OS_STAT_PEND_OK
:

340 *
≥º
 = 
OS_ERR_NONE
;

343 
OS_STAT_PEND_ABORT
:

344 *
≥º
 = 
OS_ERR_PEND_ABORT
;

347 
OS_STAT_PEND_TO
:

349 
	`OS_EvítTaskRemove
(
OSTCBCur
, 
≥vít
);

350 *
≥º
 = 
OS_ERR_TIMEOUT
;

353 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

354 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

355 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

356 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

357 
OSTCBCur
->
OSTCBEvítMu…iPå
 = (
OS_EVENT
 **)0;

359 
	`OS_EXIT_CRITICAL
();

360 
	}
}

396 #i‡
OS_SEM_PEND_ABORT_EN
 > 0u

397 
INT8U
 
	$OSSemPídAb‹t
 (
OS_EVENT
 *
≥vít
,

398 
INT8U
 
›t
,

399 
INT8U
 *
≥º
)

401 
INT8U
 
nbr_èsks
;

402 #i‡
OS_CRITICAL_METHOD
 == 3u

403 
OS_CPU_SR
 
˝u_§
 = 0u;

408 #ifde‡
OS_SAFETY_CRITICAL


409 i‡(
≥º
 =(
INT8U
 *)0) {

410 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

414 #i‡
OS_ARG_CHK_EN
 > 0u

415 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

416 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

420 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

421 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

424 
	`OS_ENTER_CRITICAL
();

425 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

426 
nbr_èsks
 = 0u;

427 
›t
) {

428 
OS_PEND_OPT_BROADCAST
:

429 
≥vít
->
OSEvítGΩ
 != 0u) {

430 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_ABORT
);

431 
nbr_èsks
++;

435 
OS_PEND_OPT_NONE
:

437 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_ABORT
);

438 
nbr_èsks
++;

441 
	`OS_EXIT_CRITICAL
();

442 
	`OS_Sched
();

443 *
≥º
 = 
OS_ERR_PEND_ABORT
;

444  (
nbr_èsks
);

446 
	`OS_EXIT_CRITICAL
();

447 *
≥º
 = 
OS_ERR_NONE
;

449 
	}
}

471 
INT8U
 
	$OSSemPo°
 (
OS_EVENT
 *
≥vít
)

473 #i‡
OS_CRITICAL_METHOD
 == 3u

474 
OS_CPU_SR
 
˝u_§
 = 0u;

479 #i‡
OS_ARG_CHK_EN
 > 0u

480 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

481  (
OS_ERR_PEVENT_NULL
);

484 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

485  (
OS_ERR_EVENT_TYPE
);

487 
	`OS_ENTER_CRITICAL
();

488 i‡(
≥vít
->
OSEvítGΩ
 != 0u) {

490 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_OK
);

491 
	`OS_EXIT_CRITICAL
();

492 
	`OS_Sched
();

493  (
OS_ERR_NONE
);

495 i‡(
≥vít
->
OSEvítC¡
 < 65535u) {

496 
≥vít
->
OSEvítC¡
++;

497 
	`OS_EXIT_CRITICAL
();

498  (
OS_ERR_NONE
);

500 
	`OS_EXIT_CRITICAL
();

501  (
OS_ERR_SEM_OVF
);

502 
	}
}

524 #i‡
OS_SEM_QUERY_EN
 > 0u

525 
INT8U
 
	$OSSemQuîy
 (
OS_EVENT
 *
≥vít
,

526 
OS_SEM_DATA
 *
p_£m_d©a
)

528 
INT8U
 
i
;

529 
OS_PRIO
 *
p§c
;

530 
OS_PRIO
 *
pde°
;

531 #i‡
OS_CRITICAL_METHOD
 == 3u

532 
OS_CPU_SR
 
˝u_§
 = 0u;

537 #i‡
OS_ARG_CHK_EN
 > 0u

538 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

539  (
OS_ERR_PEVENT_NULL
);

541 i‡(
p_£m_d©a
 =(
OS_SEM_DATA
 *)0) {

542  (
OS_ERR_PDATA_NULL
);

545 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

546  (
OS_ERR_EVENT_TYPE
);

548 
	`OS_ENTER_CRITICAL
();

549 
p_£m_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

550 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

551 
pde°
 = &
p_£m_d©a
->
OSEvítTbl
[0];

552 
i
 = 0u; i < 
OS_EVENT_TBL_SIZE
; i++) {

553 *
pde°
++ = *
p§c
++;

555 
p_£m_d©a
->
OSC¡
 = 
≥vít
->
OSEvítC¡
;

556 
	`OS_EXIT_CRITICAL
();

557  (
OS_ERR_NONE
);

558 
	}
}

586 #i‡
OS_SEM_SET_EN
 > 0u

587 
	$OSSemSë
 (
OS_EVENT
 *
≥vít
,

588 
INT16U
 
˙t
,

589 
INT8U
 *
≥º
)

591 #i‡
OS_CRITICAL_METHOD
 == 3u

592 
OS_CPU_SR
 
˝u_§
 = 0u;

597 #ifde‡
OS_SAFETY_CRITICAL


598 i‡(
≥º
 =(
INT8U
 *)0) {

599 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

603 #i‡
OS_ARG_CHK_EN
 > 0u

604 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

605 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

609 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

610 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

613 
	`OS_ENTER_CRITICAL
();

614 *
≥º
 = 
OS_ERR_NONE
;

615 i‡(
≥vít
->
OSEvítC¡
 > 0u) {

616 
≥vít
->
OSEvítC¡
 = 
˙t
;

618 i‡(
≥vít
->
OSEvítGΩ
 == 0u) {

619 
≥vít
->
OSEvítC¡
 = 
˙t
;

621 *
≥º
 = 
OS_ERR_TASK_WAITING
;

624 
	`OS_EXIT_CRITICAL
();

625 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_task.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

50 #i‡
OS_TASK_CHANGE_PRIO_EN
 > 0u

51 
INT8U
 
	$OSTaskCh™gePrio
 (
INT8U
 
ﬁd¥io
,

52 
INT8U
 
√w¥io
)

54 #i‡(
OS_EVENT_EN
)

55 
OS_EVENT
 *
≥vít
;

56 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

57 
OS_EVENT
 **
≥víts
;

60 
OS_TCB
 *
±cb
;

61 
INT8U
 
y_√w
;

62 
INT8U
 
x_√w
;

63 
INT8U
 
y_ﬁd
;

64 
OS_PRIO
 
bôy_√w
;

65 
OS_PRIO
 
bôx_√w
;

66 
OS_PRIO
 
bôy_ﬁd
;

67 
OS_PRIO
 
bôx_ﬁd
;

68 #i‡
OS_CRITICAL_METHOD
 == 3u

69 
OS_CPU_SR
 
˝u_§
 = 0u;

74 #i‡
OS_ARG_CHK_EN
 > 0u

75 i‡(
ﬁd¥io
 >
OS_LOWEST_PRIO
) {

76 i‡(
ﬁd¥io
 !
OS_PRIO_SELF
) {

77  (
OS_ERR_PRIO_INVALID
);

80 i‡(
√w¥io
 >
OS_LOWEST_PRIO
) {

81  (
OS_ERR_PRIO_INVALID
);

84 
	`OS_ENTER_CRITICAL
();

85 i‡(
OSTCBPrioTbl
[
√w¥io
] !(
OS_TCB
 *)0) {

86 
	`OS_EXIT_CRITICAL
();

87  (
OS_ERR_PRIO_EXIST
);

89 i‡(
ﬁd¥io
 =
OS_PRIO_SELF
) {

90 
ﬁd¥io
 = 
OSTCBCur
->
OSTCBPrio
;

92 
±cb
 = 
OSTCBPrioTbl
[
ﬁd¥io
];

93 i‡(
±cb
 =(
OS_TCB
 *)0) {

94 
	`OS_EXIT_CRITICAL
();

95  (
OS_ERR_PRIO
);

97 i‡(
±cb
 =
OS_TCB_RESERVED
) {

98 
	`OS_EXIT_CRITICAL
();

99  (
OS_ERR_TASK_NOT_EXIST
);

101 #i‡
OS_LOWEST_PRIO
 <= 63u

102 
y_√w
 = (
INT8U
)(
√w¥io
 >> 3u);

103 
x_√w
 = (
INT8U
)(
√w¥io
 & 0x07u);

105 
y_√w
 = (
INT8U
)((INT8U)(
√w¥io
 >> 4u) & 0x0Fu);

106 
x_√w
 = (
INT8U
)(
√w¥io
 & 0x0Fu);

108 
bôy_√w
 = (
OS_PRIO
)(1uL << 
y_√w
);

109 
bôx_√w
 = (
OS_PRIO
)(1uL << 
x_√w
);

111 
OSTCBPrioTbl
[
ﬁd¥io
] = (
OS_TCB
 *)0;

112 
OSTCBPrioTbl
[
√w¥io
] = 
±cb
;

113 
y_ﬁd
 = 
±cb
->
OSTCBY
;

114 
bôy_ﬁd
 = 
±cb
->
OSTCBBôY
;

115 
bôx_ﬁd
 = 
±cb
->
OSTCBBôX
;

116 i‡((
OSRdyTbl
[
y_ﬁd
] & 
bôx_ﬁd
) != 0u) {

117 
OSRdyTbl
[
y_ﬁd
] &(
OS_PRIO
)~
bôx_ﬁd
;

118 i‡(
OSRdyTbl
[
y_ﬁd
] == 0u) {

119 
OSRdyGΩ
 &(
OS_PRIO
)~
bôy_ﬁd
;

121 
OSRdyGΩ
 |
bôy_√w
;

122 
OSRdyTbl
[
y_√w
] |
bôx_√w
;

125 #i‡(
OS_EVENT_EN
)

126 
≥vít
 = 
±cb
->
OSTCBEvítPå
;

127 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

128 
≥vít
->
OSEvítTbl
[
y_ﬁd
] &(
OS_PRIO
)~
bôx_ﬁd
;

129 i‡(
≥vít
->
OSEvítTbl
[
y_ﬁd
] == 0u) {

130 
≥vít
->
OSEvítGΩ
 &(
OS_PRIO
)~
bôy_ﬁd
;

132 
≥vít
->
OSEvítGΩ
 |
bôy_√w
;

133 
≥vít
->
OSEvítTbl
[
y_√w
] |
bôx_√w
;

135 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

136 i‡(
±cb
->
OSTCBEvítMu…iPå
 !(
OS_EVENT
 **)0) {

137 
≥víts
 = 
±cb
->
OSTCBEvítMu…iPå
;

138 
≥vít
 = *
≥víts
;

139 
≥vít
 !(
OS_EVENT
 *)0) {

140 
≥vít
->
OSEvítTbl
[
y_ﬁd
] &(
OS_PRIO
)~
bôx_ﬁd
;

141 i‡(
≥vít
->
OSEvítTbl
[
y_ﬁd
] == 0u) {

142 
≥vít
->
OSEvítGΩ
 &(
OS_PRIO
)~
bôy_ﬁd
;

144 
≥vít
->
OSEvítGΩ
 |
bôy_√w
;

145 
≥vít
->
OSEvítTbl
[
y_√w
] |
bôx_√w
;

146 
≥víts
++;

147 
≥vít
 = *
≥víts
;

153 
±cb
->
OSTCBPrio
 = 
√w¥io
;

154 
±cb
->
OSTCBY
 = 
y_√w
;

155 
±cb
->
OSTCBX
 = 
x_√w
;

156 
±cb
->
OSTCBBôY
 = 
bôy_√w
;

157 
±cb
->
OSTCBBôX
 = 
bôx_√w
;

158 
	`OS_EXIT_CRITICAL
();

159 i‡(
OSRu¬ög
 =
OS_TRUE
) {

160 
	`OS_Sched
();

162  (
OS_ERR_NONE
);

163 
	}
}

206 #i‡
OS_TASK_CREATE_EN
 > 0u

207 
INT8U
 
OSTaskCª©e
 ((*
èsk
)(*
p_¨g
),

208 *
p_¨g
,

209 
OS_STK
 *
±os
,

210 
INT8U
 
¥io
)

212 
OS_STK
 *
p•
;

213 
INT8U
 
îr
;

214 #i‡
OS_CRITICAL_METHOD
 == 3u

215 
OS_CPU_SR
 
˝u_§
 = 0u;

220 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


221 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

222 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

226 #i‡
OS_ARG_CHK_EN
 > 0u

227 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

228  (
OS_ERR_PRIO_INVALID
);

231 
	`OS_ENTER_CRITICAL
();

232 i‡(
OSI¡Ne°ög
 > 0u) {

233 
	`OS_EXIT_CRITICAL
();

234  (
OS_ERR_TASK_CREATE_ISR
);

236 i‡(
OSTCBPrioTbl
[
¥io
] =(
OS_TCB
 *)0) {

237 
OSTCBPrioTbl
[
¥io
] = 
OS_TCB_RESERVED
;

239 
	`OS_EXIT_CRITICAL
();

240 
p•
 = 
	`OSTaskStkInô
(
èsk
, 
p_¨g
, 
±os
, 0u);

241 
îr
 = 
	`OS_TCBInô
(
¥io
, 
p•
, (
OS_STK
 *)0, 0u, 0u, (*)0, 0u);

242 i‡(
îr
 =
OS_ERR_NONE
) {

243 i‡(
OSRu¬ög
 =
OS_TRUE
) {

244 
	`OS_Sched
();

247 
	`OS_ENTER_CRITICAL
();

248 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

249 
	`OS_EXIT_CRITICAL
();

251  (
îr
);

253 
	`OS_EXIT_CRITICAL
();

254  (
OS_ERR_PRIO_EXIST
);

255 
	}
}

328 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

329 
INT8U
 
OSTaskCª©eExt
 ((*
èsk
)(*
p_¨g
),

330 *
p_¨g
,

331 
OS_STK
 *
±os
,

332 
INT8U
 
¥io
,

333 
INT16U
 
id
,

334 
OS_STK
 *
pbos
,

335 
INT32U
 
°k_size
,

336 *
≥xt
,

337 
INT16U
 
›t
)

339 
OS_STK
 *
p•
;

340 
INT8U
 
îr
;

341 #i‡
OS_CRITICAL_METHOD
 == 3u

342 
OS_CPU_SR
 
˝u_§
 = 0u;

347 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


348 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

349 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

353 #i‡
OS_ARG_CHK_EN
 > 0u

354 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

355  (
OS_ERR_PRIO_INVALID
);

358 
	`OS_ENTER_CRITICAL
();

359 i‡(
OSI¡Ne°ög
 > 0u) {

360 
	`OS_EXIT_CRITICAL
();

361  (
OS_ERR_TASK_CREATE_ISR
);

363 i‡(
OSTCBPrioTbl
[
¥io
] =(
OS_TCB
 *)0) {

364 
OSTCBPrioTbl
[
¥io
] = 
OS_TCB_RESERVED
;

366 
	`OS_EXIT_CRITICAL
();

368 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0u)

369 
	`OS_TaskStkCÃ
(
pbos
, 
°k_size
, 
›t
);

372 
p•
 = 
	`OSTaskStkInô
(
èsk
, 
p_¨g
, 
±os
, 
›t
);

373 
îr
 = 
	`OS_TCBInô
(
¥io
, 
p•
, 
pbos
, 
id
, 
°k_size
, 
≥xt
, 
›t
);

374 i‡(
îr
 =
OS_ERR_NONE
) {

375 i‡(
OSRu¬ög
 =
OS_TRUE
) {

376 
	`OS_Sched
();

379 
	`OS_ENTER_CRITICAL
();

380 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

381 
	`OS_EXIT_CRITICAL
();

383  (
îr
);

385 
	`OS_EXIT_CRITICAL
();

386  (
OS_ERR_PRIO_EXIST
);

387 
	}
}

426 #i‡
OS_TASK_DEL_EN
 > 0u

427 
INT8U
 
	$OSTaskDñ
 (
INT8U
 
¥io
)

429 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

430 
OS_FLAG_NODE
 *
≤ode
;

432 
OS_TCB
 *
±cb
;

433 #i‡
OS_CRITICAL_METHOD
 == 3u

434 
OS_CPU_SR
 
˝u_§
 = 0u;

439 i‡(
OSI¡Ne°ög
 > 0u) {

440  (
OS_ERR_TASK_DEL_ISR
);

442 i‡(
¥io
 =
OS_TASK_IDLE_PRIO
) {

443  (
OS_ERR_TASK_DEL_IDLE
);

445 #i‡
OS_ARG_CHK_EN
 > 0u

446 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

447 i‡(
¥io
 !
OS_PRIO_SELF
) {

448  (
OS_ERR_PRIO_INVALID
);

454 
	`OS_ENTER_CRITICAL
();

455 i‡(
¥io
 =
OS_PRIO_SELF
) {

456 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

458 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

459 i‡(
±cb
 =(
OS_TCB
 *)0) {

460 
	`OS_EXIT_CRITICAL
();

461  (
OS_ERR_TASK_NOT_EXIST
);

463 i‡(
±cb
 =
OS_TCB_RESERVED
) {

464 
	`OS_EXIT_CRITICAL
();

465  (
OS_ERR_TASK_DEL
);

468 
OSRdyTbl
[
±cb
->
OSTCBY
] &(
OS_PRIO
)~±cb->
OSTCBBôX
;

469 i‡(
OSRdyTbl
[
±cb
->
OSTCBY
] == 0u) {

470 
OSRdyGΩ
 &(
OS_PRIO
)~
±cb
->
OSTCBBôY
;

473 #i‡(
OS_EVENT_EN
)

474 i‡(
±cb
->
OSTCBEvítPå
 !(
OS_EVENT
 *)0) {

475 
	`OS_EvítTaskRemove
(
±cb
,Ötcb->
OSTCBEvítPå
);

477 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

478 i‡(
±cb
->
OSTCBEvítMu…iPå
 !(
OS_EVENT
 **)0) {

479 
	`OS_EvítTaskRemoveMu…i
(
±cb
,Ötcb->
OSTCBEvítMu…iPå
);

484 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

485 
≤ode
 = 
±cb
->
OSTCBFœgNode
;

486 i‡(
≤ode
 !(
OS_FLAG_NODE
 *)0) {

487 
	`OS_FœgU∆ök
(
≤ode
);

491 
±cb
->
OSTCBDly
 = 0u;

492 
±cb
->
OSTCBSèt
 = 
OS_STAT_RDY
;

493 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

494 i‡(
OSLockNe°ög
 < 255u) {

495 
OSLockNe°ög
++;

497 
	`OS_EXIT_CRITICAL
();

498 
	`OS_Dummy
();

499 
	`OS_ENTER_CRITICAL
();

500 i‡(
OSLockNe°ög
 > 0u) {

501 
OSLockNe°ög
--;

503 
	`OSTaskDñHook
(
±cb
);

504 
OSTaskCå
--;

505 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

506 i‡(
±cb
->
OSTCBPªv
 =(
OS_TCB
 *)0) {

507 
±cb
->
OSTCBNext
->
OSTCBPªv
 = (
OS_TCB
 *)0;

508 
OSTCBLi°
 = 
±cb
->
OSTCBNext
;

510 
±cb
->
OSTCBPªv
->
OSTCBNext
 =Ötcb->OSTCBNext;

511 
±cb
->
OSTCBNext
->
OSTCBPªv
 =Ötcb->OSTCBPrev;

513 
±cb
->
OSTCBNext
 = 
OSTCBFªeLi°
;

514 
OSTCBFªeLi°
 = 
±cb
;

515 #i‡
OS_TASK_NAME_EN
 > 0u

516 
±cb
->
OSTCBTaskName
 = (
INT8U
 *)(*)"?";

518 
	`OS_EXIT_CRITICAL
();

519 i‡(
OSRu¬ög
 =
OS_TRUE
) {

520 
	`OS_Sched
();

522  (
OS_ERR_NONE
);

523 
	}
}

572 #i‡
OS_TASK_DEL_EN
 > 0u

573 
INT8U
 
	$OSTaskDñReq
 (
INT8U
 
¥io
)

575 
INT8U
 
°©
;

576 
OS_TCB
 *
±cb
;

577 #i‡
OS_CRITICAL_METHOD
 == 3u

578 
OS_CPU_SR
 
˝u_§
 = 0u;

583 i‡(
¥io
 =
OS_TASK_IDLE_PRIO
) {

584  (
OS_ERR_TASK_DEL_IDLE
);

586 #i‡
OS_ARG_CHK_EN
 > 0u

587 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

588 i‡(
¥io
 !
OS_PRIO_SELF
) {

589  (
OS_ERR_PRIO_INVALID
);

593 i‡(
¥io
 =
OS_PRIO_SELF
) {

594 
	`OS_ENTER_CRITICAL
();

595 
°©
 = 
OSTCBCur
->
OSTCBDñReq
;

596 
	`OS_EXIT_CRITICAL
();

597  (
°©
);

599 
	`OS_ENTER_CRITICAL
();

600 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

601 i‡(
±cb
 =(
OS_TCB
 *)0) {

602 
	`OS_EXIT_CRITICAL
();

603  (
OS_ERR_TASK_NOT_EXIST
);

605 i‡(
±cb
 =
OS_TCB_RESERVED
) {

606 
	`OS_EXIT_CRITICAL
();

607  (
OS_ERR_TASK_DEL
);

609 
±cb
->
OSTCBDñReq
 = 
OS_ERR_TASK_DEL_REQ
;

610 
	`OS_EXIT_CRITICAL
();

611  (
OS_ERR_NONE
);

612 
	}
}

639 #i‡
OS_TASK_NAME_EN
 > 0u

640 
INT8U
 
	$OSTaskNameGë
 (
INT8U
 
¥io
,

641 
INT8U
 **
≤ame
,

642 
INT8U
 *
≥º
)

644 
OS_TCB
 *
±cb
;

645 
INT8U
 
Àn
;

646 #i‡
OS_CRITICAL_METHOD
 == 3u

647 
OS_CPU_SR
 
˝u_§
 = 0u;

652 #ifde‡
OS_SAFETY_CRITICAL


653 i‡(
≥º
 =(
INT8U
 *)0) {

654 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

658 #i‡
OS_ARG_CHK_EN
 > 0u

659 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

660 i‡(
¥io
 !
OS_PRIO_SELF
) {

661 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

665 i‡(
≤ame
 =(
INT8U
 **)0) {

666 *
≥º
 = 
OS_ERR_PNAME_NULL
;

670 i‡(
OSI¡Ne°ög
 > 0u) {

671 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

674 
	`OS_ENTER_CRITICAL
();

675 i‡(
¥io
 =
OS_PRIO_SELF
) {

676 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

678 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

679 i‡(
±cb
 =(
OS_TCB
 *)0) {

680 
	`OS_EXIT_CRITICAL
();

681 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

684 i‡(
±cb
 =
OS_TCB_RESERVED
) {

685 
	`OS_EXIT_CRITICAL
();

686 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

689 *
≤ame
 = 
±cb
->
OSTCBTaskName
;

690 
Àn
 = 
	`OS_SåLí
(*
≤ame
);

691 
	`OS_EXIT_CRITICAL
();

692 *
≥º
 = 
OS_ERR_NONE
;

693  (
Àn
);

694 
	}
}

720 #i‡
OS_TASK_NAME_EN
 > 0u

721 
	$OSTaskNameSë
 (
INT8U
 
¥io
,

722 
INT8U
 *
≤ame
,

723 
INT8U
 *
≥º
)

725 
OS_TCB
 *
±cb
;

726 #i‡
OS_CRITICAL_METHOD
 == 3u

727 
OS_CPU_SR
 
˝u_§
 = 0u;

732 #ifde‡
OS_SAFETY_CRITICAL


733 i‡(
≥º
 =(
INT8U
 *)0) {

734 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

738 #i‡
OS_ARG_CHK_EN
 > 0u

739 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

740 i‡(
¥io
 !
OS_PRIO_SELF
) {

741 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

745 i‡(
≤ame
 =(
INT8U
 *)0) {

746 *
≥º
 = 
OS_ERR_PNAME_NULL
;

750 i‡(
OSI¡Ne°ög
 > 0u) {

751 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

754 
	`OS_ENTER_CRITICAL
();

755 i‡(
¥io
 =
OS_PRIO_SELF
) {

756 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

758 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

759 i‡(
±cb
 =(
OS_TCB
 *)0) {

760 
	`OS_EXIT_CRITICAL
();

761 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

764 i‡(
±cb
 =
OS_TCB_RESERVED
) {

765 
	`OS_EXIT_CRITICAL
();

766 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

769 
±cb
->
OSTCBTaskName
 = 
≤ame
;

770 
	`OS_EXIT_CRITICAL
();

771 *
≥º
 = 
OS_ERR_NONE
;

772 
	}
}

794 #i‡
OS_TASK_SUSPEND_EN
 > 0u

795 
INT8U
 
	$OSTaskResume
 (
INT8U
 
¥io
)

797 
OS_TCB
 *
±cb
;

798 #i‡
OS_CRITICAL_METHOD
 == 3u

799 
OS_CPU_SR
 
˝u_§
 = 0u;

804 #i‡
OS_ARG_CHK_EN
 > 0u

805 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

806  (
OS_ERR_PRIO_INVALID
);

809 
	`OS_ENTER_CRITICAL
();

810 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

811 i‡(
±cb
 =(
OS_TCB
 *)0) {

812 
	`OS_EXIT_CRITICAL
();

813  (
OS_ERR_TASK_RESUME_PRIO
);

815 i‡(
±cb
 =
OS_TCB_RESERVED
) {

816 
	`OS_EXIT_CRITICAL
();

817  (
OS_ERR_TASK_NOT_EXIST
);

819 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_SUSPEND
Ë!
OS_STAT_RDY
) {

820 
±cb
->
OSTCBSèt
 &(
INT8U
)~(INT8U)
OS_STAT_SUSPEND
;

821 i‡(
±cb
->
OSTCBSèt
 =
OS_STAT_RDY
) {

822 i‡(
±cb
->
OSTCBDly
 == 0u) {

823 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

824 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

825 
	`OS_EXIT_CRITICAL
();

826 i‡(
OSRu¬ög
 =
OS_TRUE
) {

827 
	`OS_Sched
();

830 
	`OS_EXIT_CRITICAL
();

833 
	`OS_EXIT_CRITICAL
();

835  (
OS_ERR_NONE
);

837 
	`OS_EXIT_CRITICAL
();

838  (
OS_ERR_TASK_NOT_SUSPENDED
);

839 
	}
}

861 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0uË&& (
OS_TASK_CREATE_EXT_EN
 > 0u)

862 
INT8U
 
	$OSTaskStkChk
 (
INT8U
 
¥io
,

863 
OS_STK_DATA
 *
p_°k_d©a
)

865 
OS_TCB
 *
±cb
;

866 
OS_STK
 *
pchk
;

867 
INT32U
 
n‰ì
;

868 
INT32U
 
size
;

869 #i‡
OS_CRITICAL_METHOD
 == 3u

870 
OS_CPU_SR
 
˝u_§
 = 0u;

875 #i‡
OS_ARG_CHK_EN
 > 0u

876 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

877 i‡(
¥io
 !
OS_PRIO_SELF
) {

878  (
OS_ERR_PRIO_INVALID
);

881 i‡(
p_°k_d©a
 =(
OS_STK_DATA
 *)0) {

882  (
OS_ERR_PDATA_NULL
);

885 
p_°k_d©a
->
OSFªe
 = 0u;

886 
p_°k_d©a
->
OSU£d
 = 0u;

887 
	`OS_ENTER_CRITICAL
();

888 i‡(
¥io
 =
OS_PRIO_SELF
) {

889 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

891 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

892 i‡(
±cb
 =(
OS_TCB
 *)0) {

893 
	`OS_EXIT_CRITICAL
();

894  (
OS_ERR_TASK_NOT_EXIST
);

896 i‡(
±cb
 =
OS_TCB_RESERVED
) {

897 
	`OS_EXIT_CRITICAL
();

898  (
OS_ERR_TASK_NOT_EXIST
);

900 i‡((
±cb
->
OSTCBO±
 & 
OS_TASK_OPT_STK_CHK
) == 0u) {

901 
	`OS_EXIT_CRITICAL
();

902  (
OS_ERR_TASK_OPT
);

904 
n‰ì
 = 0u;

905 
size
 = 
±cb
->
OSTCBStkSize
;

906 
pchk
 = 
±cb
->
OSTCBStkBŸtom
;

907 
	`OS_EXIT_CRITICAL
();

908 #i‡
OS_STK_GROWTH
 == 1u

909 *
pchk
++ =(
OS_STK
)0) {

910 
n‰ì
++;

913 *
pchk
-- =(
OS_STK
)0) {

914 
n‰ì
++;

917 
p_°k_d©a
->
OSFªe
 = 
n‰ì
 * (
OS_STK
);

918 
p_°k_d©a
->
OSU£d
 = (
size
 - 
n‰ì
Ë* (
OS_STK
);

919  (
OS_ERR_NONE
);

920 
	}
}

946 #i‡
OS_TASK_SUSPEND_EN
 > 0u

947 
INT8U
 
	$OSTaskSu•íd
 (
INT8U
 
¥io
)

949 
BOOLEAN
 
£lf
;

950 
OS_TCB
 *
±cb
;

951 
INT8U
 
y
;

952 #i‡
OS_CRITICAL_METHOD
 == 3u

953 
OS_CPU_SR
 
˝u_§
 = 0u;

958 #i‡
OS_ARG_CHK_EN
 > 0u

959 i‡(
¥io
 =
OS_TASK_IDLE_PRIO
) {

960  (
OS_ERR_TASK_SUSPEND_IDLE
);

962 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

963 i‡(
¥io
 !
OS_PRIO_SELF
) {

964  (
OS_ERR_PRIO_INVALID
);

968 
	`OS_ENTER_CRITICAL
();

969 i‡(
¥io
 =
OS_PRIO_SELF
) {

970 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

971 
£lf
 = 
OS_TRUE
;

972 } i‡(
¥io
 =
OSTCBCur
->
OSTCBPrio
) {

973 
£lf
 = 
OS_TRUE
;

975 
£lf
 = 
OS_FALSE
;

977 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

978 i‡(
±cb
 =(
OS_TCB
 *)0) {

979 
	`OS_EXIT_CRITICAL
();

980  (
OS_ERR_TASK_SUSPEND_PRIO
);

982 i‡(
±cb
 =
OS_TCB_RESERVED
) {

983 
	`OS_EXIT_CRITICAL
();

984  (
OS_ERR_TASK_NOT_EXIST
);

986 
y
 = 
±cb
->
OSTCBY
;

987 
OSRdyTbl
[
y
] &(
OS_PRIO
)~
±cb
->
OSTCBBôX
;

988 i‡(
OSRdyTbl
[
y
] == 0u) {

989 
OSRdyGΩ
 &(
OS_PRIO
)~
±cb
->
OSTCBBôY
;

991 
±cb
->
OSTCBSèt
 |
OS_STAT_SUSPEND
;

992 
	`OS_EXIT_CRITICAL
();

993 i‡(
£lf
 =
OS_TRUE
) {

994 
	`OS_Sched
();

996  (
OS_ERR_NONE
);

997 
	}
}

1019 #i‡
OS_TASK_QUERY_EN
 > 0u

1020 
INT8U
 
	$OSTaskQuîy
 (
INT8U
 
¥io
,

1021 
OS_TCB
 *
p_èsk_d©a
)

1023 
OS_TCB
 *
±cb
;

1024 #i‡
OS_CRITICAL_METHOD
 == 3u

1025 
OS_CPU_SR
 
˝u_§
 = 0u;

1030 #i‡
OS_ARG_CHK_EN
 > 0u

1031 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

1032 i‡(
¥io
 !
OS_PRIO_SELF
) {

1033  (
OS_ERR_PRIO_INVALID
);

1036 i‡(
p_èsk_d©a
 =(
OS_TCB
 *)0) {

1037  (
OS_ERR_PDATA_NULL
);

1040 
	`OS_ENTER_CRITICAL
();

1041 i‡(
¥io
 =
OS_PRIO_SELF
) {

1042 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

1044 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

1045 i‡(
±cb
 =(
OS_TCB
 *)0) {

1046 
	`OS_EXIT_CRITICAL
();

1047  (
OS_ERR_PRIO
);

1049 i‡(
±cb
 =
OS_TCB_RESERVED
) {

1050 
	`OS_EXIT_CRITICAL
();

1051  (
OS_ERR_TASK_NOT_EXIST
);

1054 
	`OS_MemC›y
((
INT8U
 *)
p_èsk_d©a
, (INT8U *)
±cb
, (
OS_TCB
));

1055 
	`OS_EXIT_CRITICAL
();

1056  (
OS_ERR_NONE
);

1057 
	}
}

1086 #i‡
OS_TASK_REG_TBL_SIZE
 > 0u

1087 
INT32U
 
	$OSTaskRegGë
 (
INT8U
 
¥io
,

1088 
INT8U
 
id
,

1089 
INT8U
 *
≥º
)

1091 #i‡
OS_CRITICAL_METHOD
 == 3u

1092 
OS_CPU_SR
 
˝u_§
 = 0u;

1094 
INT32U
 
vÆue
;

1095 
OS_TCB
 *
±cb
;

1098 #i‡
OS_ARG_CHK_EN
 > 0u

1099 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

1100 i‡(
¥io
 !
OS_PRIO_SELF
) {

1101 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

1105 i‡(
id
 >
OS_TASK_REG_TBL_SIZE
) {

1106 *
≥º
 = 
OS_ERR_ID_INVALID
;

1110 
	`OS_ENTER_CRITICAL
();

1111 i‡(
¥io
 =
OS_PRIO_SELF
) {

1112 
±cb
 = 
OSTCBCur
;

1114 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

1116 
vÆue
 = 
±cb
->
OSTCBRegTbl
[
id
];

1117 
	`OS_EXIT_CRITICAL
();

1118 *
≥º
 = 
OS_ERR_NONE
;

1119  (
vÆue
);

1120 
	}
}

1152 #i‡
OS_TASK_REG_TBL_SIZE
 > 0u

1153 
	$OSTaskRegSë
 (
INT8U
 
¥io
,

1154 
INT8U
 
id
,

1155 
INT32U
 
vÆue
,

1156 
INT8U
 *
≥º
)

1158 #i‡
OS_CRITICAL_METHOD
 == 3u

1159 
OS_CPU_SR
 
˝u_§
 = 0u;

1161 
OS_TCB
 *
±cb
;

1164 #i‡
OS_ARG_CHK_EN
 > 0u

1165 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

1166 i‡(
¥io
 !
OS_PRIO_SELF
) {

1167 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

1171 i‡(
id
 >
OS_TASK_REG_TBL_SIZE
) {

1172 *
≥º
 = 
OS_ERR_ID_INVALID
;

1176 
	`OS_ENTER_CRITICAL
();

1177 i‡(
¥io
 =
OS_PRIO_SELF
) {

1178 
±cb
 = 
OSTCBCur
;

1180 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

1182 
±cb
->
OSTCBRegTbl
[
id
] = 
vÆue
;

1183 
	`OS_EXIT_CRITICAL
();

1184 *
≥º
 = 
OS_ERR_NONE
;

1185 
	}
}

1204 
	$OS_TaskRëu∫
 ()

1206 
	`OSTaskRëu∫Hook
(
OSTCBCur
);

1208 #i‡
OS_TASK_DEL_EN
 > 0u

1209 ()
	`OSTaskDñ
(
OS_PRIO_SELF
);

1212 
	`OSTimeDly
(
OS_TICKS_PER_SEC
);

1215 
	}
}

1240 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0uË&& (
OS_TASK_CREATE_EXT_EN
 > 0u)

1241 
	$OS_TaskStkCÃ
 (
OS_STK
 *
pbos
,

1242 
INT32U
 
size
,

1243 
INT16U
 
›t
)

1245 i‡((
›t
 & 
OS_TASK_OPT_STK_CHK
) != 0x0000u) {

1246 i‡((
›t
 & 
OS_TASK_OPT_STK_CLR
) != 0x0000u) {

1247 #i‡
OS_STK_GROWTH
 == 1u

1248 
size
 > 0u) {

1249 
size
--;

1250 *
pbos
++ = (
OS_STK
)0;

1253 
size
 > 0u) {

1254 
size
--;

1255 *
pbos
-- = (
OS_STK
)0;

1260 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_time.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	~<ucos_ii.h
>

44 
	$OSTimeDly
 (
INT32U
 
ticks
)

46 
INT8U
 
y
;

47 #i‡
OS_CRITICAL_METHOD
 == 3u

48 
OS_CPU_SR
 
˝u_§
 = 0u;

53 i‡(
OSI¡Ne°ög
 > 0u) {

56 i‡(
OSLockNe°ög
 > 0u) {

59 i‡(
ticks
 > 0u) {

60 
	`OS_ENTER_CRITICAL
();

61 
y
 = 
OSTCBCur
->
OSTCBY
;

62 
OSRdyTbl
[
y
] &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôX
;

63 i‡(
OSRdyTbl
[
y
] == 0u) {

64 
OSRdyGΩ
 &(
OS_PRIO
)~
OSTCBCur
->
OSTCBBôY
;

66 
OSTCBCur
->
OSTCBDly
 = 
ticks
;

67 
	`OS_EXIT_CRITICAL
();

68 
	`OS_Sched
();

70 
	}
}

98 #i‡
OS_TIME_DLY_HMSM_EN
 > 0u

99 
INT8U
 
	$OSTimeDlyHMSM
 (
INT8U
 
hours
,

100 
INT8U
 
möuãs
,

101 
INT8U
 
£c⁄ds
,

102 
INT16U
 
ms
)

104 
INT32U
 
ticks
;

107 i‡(
OSI¡Ne°ög
 > 0u) {

108  (
OS_ERR_TIME_DLY_ISR
);

110 i‡(
OSLockNe°ög
 > 0u) {

111  (
OS_ERR_SCHED_LOCKED
);

113 #i‡
OS_ARG_CHK_EN
 > 0u

114 i‡(
hours
 == 0u) {

115 i‡(
möuãs
 == 0u) {

116 i‡(
£c⁄ds
 == 0u) {

117 i‡(
ms
 == 0u) {

118  (
OS_ERR_TIME_ZERO_DLY
);

123 i‡(
möuãs
 > 59u) {

124  (
OS_ERR_TIME_INVALID_MINUTES
);

126 i‡(
£c⁄ds
 > 59u) {

127  (
OS_ERR_TIME_INVALID_SECONDS
);

129 i‡(
ms
 > 999u) {

130  (
OS_ERR_TIME_INVALID_MS
);

135 
ticks
 = ((
INT32U
)
hours
 * 3600uL + (INT32U)
möuãs
 * 60uL + (INT32U)
£c⁄ds
Ë* 
OS_TICKS_PER_SEC


136 + 
OS_TICKS_PER_SEC
 * ((
INT32U
)
ms
 + 500uL / OS_TICKS_PER_SEC) / 1000uL;

137 
	`OSTimeDly
(
ticks
);

138  (
OS_ERR_NONE
);

139 
	}
}

161 #i‡
OS_TIME_DLY_RESUME_EN
 > 0u

162 
INT8U
 
	$OSTimeDlyResume
 (
INT8U
 
¥io
)

164 
OS_TCB
 *
±cb
;

165 #i‡
OS_CRITICAL_METHOD
 == 3u

166 
OS_CPU_SR
 
˝u_§
 = 0u;

171 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

172  (
OS_ERR_PRIO_INVALID
);

174 
	`OS_ENTER_CRITICAL
();

175 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

176 i‡(
±cb
 =(
OS_TCB
 *)0) {

177 
	`OS_EXIT_CRITICAL
();

178  (
OS_ERR_TASK_NOT_EXIST
);

180 i‡(
±cb
 =
OS_TCB_RESERVED
) {

181 
	`OS_EXIT_CRITICAL
();

182  (
OS_ERR_TASK_NOT_EXIST
);

184 i‡(
±cb
->
OSTCBDly
 == 0u) {

185 
	`OS_EXIT_CRITICAL
();

186  (
OS_ERR_TIME_NOT_DLY
);

189 
±cb
->
OSTCBDly
 = 0u;

190 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_PEND_ANY
Ë!
OS_STAT_RDY
) {

191 
±cb
->
OSTCBSèt
 &~
OS_STAT_PEND_ANY
;

192 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_TO
;

194 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

196 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_SUSPEND
Ë=
OS_STAT_RDY
) {

197 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

198 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

199 
	`OS_EXIT_CRITICAL
();

200 
	`OS_Sched
();

202 
	`OS_EXIT_CRITICAL
();

204  (
OS_ERR_NONE
);

205 
	}
}

221 #i‡
OS_TIME_GET_SET_EN
 > 0u

222 
INT32U
 
	$OSTimeGë
 ()

224 
INT32U
 
ticks
;

225 #i‡
OS_CRITICAL_METHOD
 == 3u

226 
OS_CPU_SR
 
˝u_§
 = 0u;

231 
	`OS_ENTER_CRITICAL
();

232 
ticks
 = 
OSTime
;

233 
	`OS_EXIT_CRITICAL
();

234  (
ticks
);

235 
	}
}

250 #i‡
OS_TIME_GET_SET_EN
 > 0u

251 
	$OSTimeSë
 (
INT32U
 
ticks
)

253 #i‡
OS_CRITICAL_METHOD
 == 3u

254 
OS_CPU_SR
 
˝u_§
 = 0u;

259 
	`OS_ENTER_CRITICAL
();

260 
OSTime
 = 
ticks
;

261 
	`OS_EXIT_CRITICAL
();

262 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_tmr.c

25 
	~<ucos_ii.h
>

46 
	#OS_TMR_LINK_DLY
 0u

	)

47 
	#OS_TMR_LINK_PERIODIC
 1u

	)

55 #i‡
OS_TMR_EN
 > 0u

56 
OS_TMR
 *
OSTmr_AŒoc
 ();

57 
OSTmr_Fªe
 (
OS_TMR
 *
±mr
);

58 
OSTmr_InôTask
 ();

59 
OSTmr_Lök
 (
OS_TMR
 *
±mr
, 
INT8U
 
ty≥
);

60 
OSTmr_U∆ök
 (
OS_TMR
 *
±mr
);

61 
OSTmr_Task
 (*
p_¨g
);

107 #i‡
OS_TMR_EN
 > 0u

108 
OS_TMR
 *
	$OSTmrCª©e
 (
INT32U
 
dly
,

109 
INT32U
 
≥riod
,

110 
INT8U
 
›t
,

111 
OS_TMR_CALLBACK
 
ˇŒback
,

112 *
ˇŒback_¨g
,

113 
INT8U
 *
≤ame
,

114 
INT8U
 *
≥º
)

116 
OS_TMR
 *
±mr
;

119 #ifde‡
OS_SAFETY_CRITICAL


120 i‡(
≥º
 =(
INT8U
 *)0) {

121 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

125 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


126 i‡(
OSSa„tyCrôiˇlSèπFœg
 =
OS_TRUE
) {

127 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

131 #i‡
OS_ARG_CHK_EN
 > 0u

132 
›t
) {

133 
OS_TMR_OPT_PERIODIC
:

134 i‡(
≥riod
 == 0u) {

135 *
≥º
 = 
OS_ERR_TMR_INVALID_PERIOD
;

136  ((
OS_TMR
 *)0);

140 
OS_TMR_OPT_ONE_SHOT
:

141 i‡(
dly
 == 0u) {

142 *
≥º
 = 
OS_ERR_TMR_INVALID_DLY
;

143  ((
OS_TMR
 *)0);

148 *
≥º
 = 
OS_ERR_TMR_INVALID_OPT
;

149  ((
OS_TMR
 *)0);

152 i‡(
OSI¡Ne°ög
 > 0u) {

153 *
≥º
 = 
OS_ERR_TMR_ISR
;

154  ((
OS_TMR
 *)0);

156 
	`OSSchedLock
();

157 
±mr
 = 
	`OSTmr_AŒoc
();

158 i‡(
±mr
 =(
OS_TMR
 *)0) {

159 
	`OSSchedU∆ock
();

160 *
≥º
 = 
OS_ERR_TMR_NON_AVAIL
;

161  ((
OS_TMR
 *)0);

163 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_STOPPED
;

164 
±mr
->
OSTmrDly
 = 
dly
;

165 
±mr
->
OSTmrPîiod
 = 
≥riod
;

166 
±mr
->
OSTmrO±
 = 
›t
;

167 
±mr
->
OSTmrCÆlback
 = 
ˇŒback
;

168 
±mr
->
OSTmrCÆlbackArg
 = 
ˇŒback_¨g
;

169 #i‡
OS_TMR_CFG_NAME_EN
 > 0u

170 
±mr
->
OSTmrName
 = 
≤ame
;

172 
	`OSSchedU∆ock
();

173 *
≥º
 = 
OS_ERR_NONE
;

174  (
±mr
);

175 
	}
}

200 #i‡
OS_TMR_EN
 > 0u

201 
BOOLEAN
 
	$OSTmrDñ
 (
OS_TMR
 *
±mr
,

202 
INT8U
 *
≥º
)

204 #ifde‡
OS_SAFETY_CRITICAL


205 i‡(
≥º
 =(
INT8U
 *)0) {

206 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

210 #i‡
OS_ARG_CHK_EN
 > 0u

211 i‡(
±mr
 =(
OS_TMR
 *)0) {

212 *
≥º
 = 
OS_ERR_TMR_INVALID
;

213  (
OS_FALSE
);

216 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

217 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

218  (
OS_FALSE
);

220 i‡(
OSI¡Ne°ög
 > 0u) {

221 *
≥º
 = 
OS_ERR_TMR_ISR
;

222  (
OS_FALSE
);

224 
	`OSSchedLock
();

225 
±mr
->
OSTmrSèã
) {

226 
OS_TMR_STATE_RUNNING
:

227 
	`OSTmr_U∆ök
(
±mr
);

228 
	`OSTmr_Fªe
(
±mr
);

229 
	`OSSchedU∆ock
();

230 *
≥º
 = 
OS_ERR_NONE
;

231  (
OS_TRUE
);

233 
OS_TMR_STATE_STOPPED
:

234 
OS_TMR_STATE_COMPLETED
:

235 
	`OSTmr_Fªe
(
±mr
);

236 
	`OSSchedU∆ock
();

237 *
≥º
 = 
OS_ERR_NONE
;

238  (
OS_TRUE
);

240 
OS_TMR_STATE_UNUSED
:

241 
	`OSSchedU∆ock
();

242 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

243  (
OS_FALSE
);

246 
	`OSSchedU∆ock
();

247 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

248  (
OS_FALSE
);

250 
	}
}

277 #i‡
OS_TMR_EN
 > 0u && 
OS_TMR_CFG_NAME_EN
 > 0u

278 
INT8U
 
	$OSTmrNameGë
 (
OS_TMR
 *
±mr
,

279 
INT8U
 **
pde°
,

280 
INT8U
 *
≥º
)

282 
INT8U
 
Àn
;

285 #ifde‡
OS_SAFETY_CRITICAL


286 i‡(
≥º
 =(
INT8U
 *)0) {

287 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

291 #i‡
OS_ARG_CHK_EN
 > 0u

292 i‡(
pde°
 =(
INT8U
 **)0) {

293 *
≥º
 = 
OS_ERR_TMR_INVALID_DEST
;

296 i‡(
±mr
 =(
OS_TMR
 *)0) {

297 *
≥º
 = 
OS_ERR_TMR_INVALID
;

301 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

302 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

305 i‡(
OSI¡Ne°ög
 > 0u) {

306 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

309 
	`OSSchedLock
();

310 
±mr
->
OSTmrSèã
) {

311 
OS_TMR_STATE_RUNNING
:

312 
OS_TMR_STATE_STOPPED
:

313 
OS_TMR_STATE_COMPLETED
:

314 *
pde°
 = 
±mr
->
OSTmrName
;

315 
Àn
 = 
	`OS_SåLí
(*
pde°
);

316 
	`OSSchedU∆ock
();

317 *
≥º
 = 
OS_ERR_NONE
;

318  (
Àn
);

320 
OS_TMR_STATE_UNUSED
:

321 
	`OSSchedU∆ock
();

322 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

326 
	`OSSchedU∆ock
();

327 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

330 
	}
}

356 #i‡
OS_TMR_EN
 > 0u

357 
INT32U
 
	$OSTmrRemaöGë
 (
OS_TMR
 *
±mr
,

358 
INT8U
 *
≥º
)

360 
INT32U
 
ªmaö
;

363 #ifde‡
OS_SAFETY_CRITICAL


364 i‡(
≥º
 =(
INT8U
 *)0) {

365 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

369 #i‡
OS_ARG_CHK_EN
 > 0u

370 i‡(
±mr
 =(
OS_TMR
 *)0) {

371 *
≥º
 = 
OS_ERR_TMR_INVALID
;

375 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

376 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

379 i‡(
OSI¡Ne°ög
 > 0u) {

380 *
≥º
 = 
OS_ERR_TMR_ISR
;

383 
	`OSSchedLock
();

384 
±mr
->
OSTmrSèã
) {

385 
OS_TMR_STATE_RUNNING
:

386 
ªmaö
 = 
±mr
->
OSTmrM©ch
 - 
OSTmrTime
;

387 
	`OSSchedU∆ock
();

388 *
≥º
 = 
OS_ERR_NONE
;

389  (
ªmaö
);

391 
OS_TMR_STATE_STOPPED
:

392 
±mr
->
OSTmrO±
) {

393 
OS_TMR_OPT_PERIODIC
:

394 i‡(
±mr
->
OSTmrDly
 == 0u) {

395 
ªmaö
 = 
±mr
->
OSTmrPîiod
;

397 
ªmaö
 = 
±mr
->
OSTmrDly
;

399 
	`OSSchedU∆ock
();

400 *
≥º
 = 
OS_ERR_NONE
;

403 
OS_TMR_OPT_ONE_SHOT
:

405 
ªmaö
 = 
±mr
->
OSTmrDly
;

406 
	`OSSchedU∆ock
();

407 *
≥º
 = 
OS_ERR_NONE
;

410  (
ªmaö
);

412 
OS_TMR_STATE_COMPLETED
:

413 
	`OSSchedU∆ock
();

414 *
≥º
 = 
OS_ERR_NONE
;

417 
OS_TMR_STATE_UNUSED
:

418 
	`OSSchedU∆ock
();

419 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

423 
	`OSSchedU∆ock
();

424 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

427 
	}
}

456 #i‡
OS_TMR_EN
 > 0u

457 
INT8U
 
	$OSTmrSèãGë
 (
OS_TMR
 *
±mr
,

458 
INT8U
 *
≥º
)

460 
INT8U
 
°©e
;

463 #ifde‡
OS_SAFETY_CRITICAL


464 i‡(
≥º
 =(
INT8U
 *)0) {

465 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

469 #i‡
OS_ARG_CHK_EN
 > 0u

470 i‡(
±mr
 =(
OS_TMR
 *)0) {

471 *
≥º
 = 
OS_ERR_TMR_INVALID
;

475 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

476 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

479 i‡(
OSI¡Ne°ög
 > 0u) {

480 *
≥º
 = 
OS_ERR_TMR_ISR
;

483 
	`OSSchedLock
();

484 
°©e
 = 
±mr
->
OSTmrSèã
;

485 
°©e
) {

486 
OS_TMR_STATE_UNUSED
:

487 
OS_TMR_STATE_STOPPED
:

488 
OS_TMR_STATE_COMPLETED
:

489 
OS_TMR_STATE_RUNNING
:

490 *
≥º
 = 
OS_ERR_NONE
;

494 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

497 
	`OSSchedU∆ock
();

498  (
°©e
);

499 
	}
}

524 #i‡
OS_TMR_EN
 > 0u

525 
BOOLEAN
 
	$OSTmrSèπ
 (
OS_TMR
 *
±mr
,

526 
INT8U
 *
≥º
)

528 #ifde‡
OS_SAFETY_CRITICAL


529 i‡(
≥º
 =(
INT8U
 *)0) {

530 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

534 #i‡
OS_ARG_CHK_EN
 > 0u

535 i‡(
±mr
 =(
OS_TMR
 *)0) {

536 *
≥º
 = 
OS_ERR_TMR_INVALID
;

537  (
OS_FALSE
);

540 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

541 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

542  (
OS_FALSE
);

544 i‡(
OSI¡Ne°ög
 > 0u) {

545 *
≥º
 = 
OS_ERR_TMR_ISR
;

546  (
OS_FALSE
);

548 
	`OSSchedLock
();

549 
±mr
->
OSTmrSèã
) {

550 
OS_TMR_STATE_RUNNING
:

551 
	`OSTmr_U∆ök
(
±mr
);

552 
	`OSTmr_Lök
(
±mr
, 
OS_TMR_LINK_DLY
);

553 
	`OSSchedU∆ock
();

554 *
≥º
 = 
OS_ERR_NONE
;

555  (
OS_TRUE
);

557 
OS_TMR_STATE_STOPPED
:

558 
OS_TMR_STATE_COMPLETED
:

559 
	`OSTmr_Lök
(
±mr
, 
OS_TMR_LINK_DLY
);

560 
	`OSSchedU∆ock
();

561 *
≥º
 = 
OS_ERR_NONE
;

562  (
OS_TRUE
);

564 
OS_TMR_STATE_UNUSED
:

565 
	`OSSchedU∆ock
();

566 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

567  (
OS_FALSE
);

570 
	`OSSchedU∆ock
();

571 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

572  (
OS_FALSE
);

574 
	}
}

614 #i‡
OS_TMR_EN
 > 0u

615 
BOOLEAN
 
	$OSTmrSt›
 (
OS_TMR
 *
±mr
,

616 
INT8U
 
›t
,

617 *
ˇŒback_¨g
,

618 
INT8U
 *
≥º
)

620 
OS_TMR_CALLBACK
 
p‚˘
;

623 #ifde‡
OS_SAFETY_CRITICAL


624 i‡(
≥º
 =(
INT8U
 *)0) {

625 
	`OS_SAFETY_CRITICAL_EXCEPTION
();

629 #i‡
OS_ARG_CHK_EN
 > 0u

630 i‡(
±mr
 =(
OS_TMR
 *)0) {

631 *
≥º
 = 
OS_ERR_TMR_INVALID
;

632  (
OS_FALSE
);

635 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

636 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

637  (
OS_FALSE
);

639 i‡(
OSI¡Ne°ög
 > 0u) {

640 *
≥º
 = 
OS_ERR_TMR_ISR
;

641  (
OS_FALSE
);

643 
	`OSSchedLock
();

644 
±mr
->
OSTmrSèã
) {

645 
OS_TMR_STATE_RUNNING
:

646 
	`OSTmr_U∆ök
(
±mr
);

647 *
≥º
 = 
OS_ERR_NONE
;

648 
›t
) {

649 
OS_TMR_OPT_CALLBACK
:

650 
p‚˘
 = 
±mr
->
OSTmrCÆlback
;

651 i‡(
p‚˘
 !(
OS_TMR_CALLBACK
)0) {

652 (*
p‚˘
)((*)
±mr
,Ötmr->
OSTmrCÆlbackArg
);

654 *
≥º
 = 
OS_ERR_TMR_NO_CALLBACK
;

658 
OS_TMR_OPT_CALLBACK_ARG
:

659 
p‚˘
 = 
±mr
->
OSTmrCÆlback
;

660 i‡(
p‚˘
 !(
OS_TMR_CALLBACK
)0) {

661 (*
p‚˘
)((*)
±mr
, 
ˇŒback_¨g
);

663 *
≥º
 = 
OS_ERR_TMR_NO_CALLBACK
;

667 
OS_TMR_OPT_NONE
:

671 *
≥º
 = 
OS_ERR_TMR_INVALID_OPT
;

674 
	`OSSchedU∆ock
();

675  (
OS_TRUE
);

677 
OS_TMR_STATE_COMPLETED
:

678 
OS_TMR_STATE_STOPPED
:

679 
	`OSSchedU∆ock
();

680 *
≥º
 = 
OS_ERR_TMR_STOPPED
;

681  (
OS_TRUE
);

683 
OS_TMR_STATE_UNUSED
:

684 
	`OSSchedU∆ock
();

685 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

686  (
OS_FALSE
);

689 
	`OSSchedU∆ock
();

690 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

691  (
OS_FALSE
);

693 
	}
}

716 #i‡
OS_TMR_EN
 > 0u

717 
INT8U
 
	$OSTmrSig«l
 ()

719 
INT8U
 
îr
;

722 
îr
 = 
	`OSSemPo°
(
OSTmrSemSig«l
);

723  (
îr
);

724 
	}
}

740 #i‡
OS_TMR_EN
 > 0u

741 
OS_TMR
 *
	$OSTmr_AŒoc
 ()

743 
OS_TMR
 *
±mr
;

746 i‡(
OSTmrFªeLi°
 =(
OS_TMR
 *)0) {

747  ((
OS_TMR
 *)0);

749 
±mr
 = (
OS_TMR
 *)
OSTmrFªeLi°
;

750 
OSTmrFªeLi°
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

751 
±mr
->
OSTmrNext
 = (
OS_TCB
 *)0;

752 
±mr
->
OSTmrPªv
 = (
OS_TCB
 *)0;

753 
OSTmrU£d
++;

754 
OSTmrFªe
--;

755  (
±mr
);

756 
	}
}

772 #i‡
OS_TMR_EN
 > 0u

773 
	$OSTmr_Fªe
 (
OS_TMR
 *
±mr
)

775 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_UNUSED
;

776 
±mr
->
OSTmrO±
 = 
OS_TMR_OPT_NONE
;

777 
±mr
->
OSTmrPîiod
 = 0u;

778 
±mr
->
OSTmrM©ch
 = 0u;

779 
±mr
->
OSTmrCÆlback
 = (
OS_TMR_CALLBACK
)0;

780 
±mr
->
OSTmrCÆlbackArg
 = (*)0;

781 #i‡
OS_TMR_CFG_NAME_EN
 > 0u

782 
±mr
->
OSTmrName
 = (
INT8U
 *)(*)"?";

785 
±mr
->
OSTmrPªv
 = (
OS_TCB
 *)0;

786 
±mr
->
OSTmrNext
 = 
OSTmrFªeLi°
;

787 
OSTmrFªeLi°
 = 
±mr
;

789 
OSTmrU£d
--;

790 
OSTmrFªe
++;

791 
	}
}

808 #i‡
OS_TMR_EN
 > 0u

809 
	$OSTmr_Inô
 ()

811 #i‡
OS_EVENT_NAME_EN
 > 0u

812 
INT8U
 
îr
;

814 
INT16U
 
ix
;

815 
INT16U
 
ix_√xt
;

816 
OS_TMR
 *
±mr1
;

817 
OS_TMR
 *
±mr2
;

820 
	`OS_MemCÃ
((
INT8U
 *)&
OSTmrTbl
[0], (OSTmrTbl));

821 
	`OS_MemCÃ
((
INT8U
 *)&
OSTmrWhìlTbl
[0], (OSTmrWheelTbl));

823 
ix
 = 0u; ix < (
OS_TMR_CFG_MAX
 - 1u); ix++) {

824 
ix_√xt
 = 
ix
 + 1u;

825 
±mr1
 = &
OSTmrTbl
[
ix
];

826 
±mr2
 = &
OSTmrTbl
[
ix_√xt
];

827 
±mr1
->
OSTmrTy≥
 = 
OS_TMR_TYPE
;

828 
±mr1
->
OSTmrSèã
 = 
OS_TMR_STATE_UNUSED
;

829 
±mr1
->
OSTmrNext
 = (*)
±mr2
;

830 #i‡
OS_TMR_CFG_NAME_EN
 > 0u

831 
±mr1
->
OSTmrName
 = (
INT8U
 *)(*)"?";

834 
±mr1
 = &
OSTmrTbl
[
ix
];

835 
±mr1
->
OSTmrTy≥
 = 
OS_TMR_TYPE
;

836 
±mr1
->
OSTmrSèã
 = 
OS_TMR_STATE_UNUSED
;

837 
±mr1
->
OSTmrNext
 = (*)0;

838 #i‡
OS_TMR_CFG_NAME_EN
 > 0u

839 
±mr1
->
OSTmrName
 = (
INT8U
 *)(*)"?";

841 
OSTmrTime
 = 0u;

842 
OSTmrU£d
 = 0u;

843 
OSTmrFªe
 = 
OS_TMR_CFG_MAX
;

844 
OSTmrFªeLi°
 = &
OSTmrTbl
[0];

845 
OSTmrSem
 = 
	`OSSemCª©e
(1u);

846 
OSTmrSemSig«l
 = 
	`OSSemCª©e
(0u);

848 #i‡
OS_EVENT_NAME_EN
 > 0u

849 
	`OSEvítNameSë
(
OSTmrSem
, (
INT8U
 *)(*)"uC/OS-II TmrLock", &
îr
);

850 
	`OSEvítNameSë
(
OSTmrSemSig«l
, (
INT8U
 *)(*)"uC/OS-II TmrSig«l", &
îr
);

853 
	`OSTmr_InôTask
();

854 
	}
}

869 #i‡
OS_TMR_EN
 > 0u

870 
	$OSTmr_InôTask
 ()

872 #i‡
OS_TASK_NAME_EN
 > 0u

873 
INT8U
 
îr
;

877 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

878 #i‡
OS_STK_GROWTH
 == 1u

879 ()
	`OSTaskCª©eExt
(
OSTmr_Task
,

881 &
OSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
 - 1u],

882 
OS_TASK_TMR_PRIO
,

883 
OS_TASK_TMR_ID
,

884 &
OSTmrTaskStk
[0],

885 
OS_TASK_TMR_STK_SIZE
,

887 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

889 ()
	`OSTaskCª©eExt
(
OSTmr_Task
,

891 &
OSTmrTaskStk
[0],

892 
OS_TASK_TMR_PRIO
,

893 
OS_TASK_TMR_ID
,

894 &
OSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
 - 1u],

895 
OS_TASK_TMR_STK_SIZE
,

897 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

900 #i‡
OS_STK_GROWTH
 == 1u

901 ()
	`OSTaskCª©e
(
OSTmr_Task
,

903 &
OSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
 - 1u],

904 
OS_TASK_TMR_PRIO
);

906 ()
	`OSTaskCª©e
(
OSTmr_Task
,

908 &
OSTmrTaskStk
[0],

909 
OS_TASK_TMR_PRIO
);

913 #i‡
OS_TASK_NAME_EN
 > 0u

914 
	`OSTaskNameSë
(
OS_TASK_TMR_PRIO
, (
INT8U
 *)(*)"uC/OS-II Tmr", &
îr
);

916 
	}
}

937 #i‡
OS_TMR_EN
 > 0u

938 
	$OSTmr_Lök
 (
OS_TMR
 *
±mr
,

939 
INT8U
 
ty≥
)

941 
OS_TMR
 *
±mr1
;

942 
OS_TMR_WHEEL
 *
p•oke
;

943 
INT16U
 
•oke
;

946 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_RUNNING
;

947 i‡(
ty≥
 =
OS_TMR_LINK_PERIODIC
) {

948 
±mr
->
OSTmrM©ch
 =Ötmr->
OSTmrPîiod
 + 
OSTmrTime
;

950 i‡(
±mr
->
OSTmrDly
 == 0u) {

951 
±mr
->
OSTmrM©ch
 =Ötmr->
OSTmrPîiod
 + 
OSTmrTime
;

953 
±mr
->
OSTmrM©ch
 =Ötmr->
OSTmrDly
 + 
OSTmrTime
;

956 
•oke
 = (
INT16U
)(
±mr
->
OSTmrM©ch
 % 
OS_TMR_CFG_WHEEL_SIZE
);

957 
p•oke
 = &
OSTmrWhìlTbl
[
•oke
];

959 i‡(
p•oke
->
OSTmrFú°
 =(
OS_TMR
 *)0) {

960 
p•oke
->
OSTmrFú°
 = 
±mr
;

961 
±mr
->
OSTmrNext
 = (
OS_TMR
 *)0;

962 
p•oke
->
OSTmrE¡rõs
 = 1u;

964 
±mr1
 = 
p•oke
->
OSTmrFú°
;

965 
p•oke
->
OSTmrFú°
 = 
±mr
;

966 
±mr
->
OSTmrNext
 = (*)
±mr1
;

967 
±mr1
->
OSTmrPªv
 = (*)
±mr
;

968 
p•oke
->
OSTmrE¡rõs
++;

970 
±mr
->
OSTmrPªv
 = (*)0;

971 
	}
}

987 #i‡
OS_TMR_EN
 > 0u

988 
	$OSTmr_U∆ök
 (
OS_TMR
 *
±mr
)

990 
OS_TMR
 *
±mr1
;

991 
OS_TMR
 *
±mr2
;

992 
OS_TMR_WHEEL
 *
p•oke
;

993 
INT16U
 
•oke
;

996 
•oke
 = (
INT16U
)(
±mr
->
OSTmrM©ch
 % 
OS_TMR_CFG_WHEEL_SIZE
);

997 
p•oke
 = &
OSTmrWhìlTbl
[
•oke
];

999 i‡(
p•oke
->
OSTmrFú°
 =
±mr
) {

1000 
±mr1
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

1001 
p•oke
->
OSTmrFú°
 = (
OS_TMR
 *)
±mr1
;

1002 i‡(
±mr1
 !(
OS_TMR
 *)0) {

1003 
±mr1
->
OSTmrPªv
 = (*)0;

1006 
±mr1
 = (
OS_TMR
 *)
±mr
->
OSTmrPªv
;

1007 
±mr2
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

1008 
±mr1
->
OSTmrNext
 = 
±mr2
;

1009 i‡(
±mr2
 !(
OS_TMR
 *)0) {

1010 
±mr2
->
OSTmrPªv
 = (*)
±mr1
;

1013 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_STOPPED
;

1014 
±mr
->
OSTmrNext
 = (*)0;

1015 
±mr
->
OSTmrPªv
 = (*)0;

1016 
p•oke
->
OSTmrE¡rõs
--;

1017 
	}
}

1033 #i‡
OS_TMR_EN
 > 0u

1034 
	$OSTmr_Task
 (*
p_¨g
)

1036 
INT8U
 
îr
;

1037 
OS_TMR
 *
±mr
;

1038 
OS_TMR
 *
±mr_√xt
;

1039 
OS_TMR_CALLBACK
 
p‚˘
;

1040 
OS_TMR_WHEEL
 *
p•oke
;

1041 
INT16U
 
•oke
;

1044 
p_¨g
 =Ö_arg;

1046 
	`OSSemPíd
(
OSTmrSemSig«l
, 0u, &
îr
);

1047 
	`OSSchedLock
();

1048 
OSTmrTime
++;

1049 
•oke
 = (
INT16U
)(
OSTmrTime
 % 
OS_TMR_CFG_WHEEL_SIZE
);

1050 
p•oke
 = &
OSTmrWhìlTbl
[
•oke
];

1051 
±mr
 = 
p•oke
->
OSTmrFú°
;

1052 
±mr
 !(
OS_TMR
 *)0) {

1053 
±mr_√xt
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

1055 i‡(
OSTmrTime
 =
±mr
->
OSTmrM©ch
) {

1056 
	`OSTmr_U∆ök
(
±mr
);

1057 i‡(
±mr
->
OSTmrO±
 =
OS_TMR_OPT_PERIODIC
) {

1058 
	`OSTmr_Lök
(
±mr
, 
OS_TMR_LINK_PERIODIC
);

1060 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_COMPLETED
;

1062 
p‚˘
 = 
±mr
->
OSTmrCÆlback
;

1063 i‡(
p‚˘
 !(
OS_TMR_CALLBACK
)0) {

1064 (*
p‚˘
)((*)
±mr
,Ötmr->
OSTmrCÆlbackArg
);

1067 
±mr
 = 
±mr_√xt
;

1069 
	`OSSchedU∆ock
();

1071 
	}
}

	@G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\ucos_ii.h

23 #i‚de‡ 
OS_uCOS_II_H


24 
	#OS_uCOS_II_H


	)

26 #ifde‡
__˝lu•lus


36 
	#OS_VERSION
 291u

	)

44 
	~<≠p_cfg.h
>

45 
	~<os_cfg.h
>

46 
	~<os_˝u.h
>

54 #ifde‡ 
OS_GLOBALS


55 
	#OS_EXT


	)

57 
	#OS_EXT
 

	)

60 #i‚de‡ 
OS_FALSE


61 
	#OS_FALSE
 0u

	)

64 #i‚de‡ 
OS_TRUE


65 
	#OS_TRUE
 1u

	)

68 
	#OS_ASCII_NUL
 (
INT8U
)0

	)

70 
	#OS_PRIO_SELF
 0xFFu

	)

72 #i‡
OS_TASK_STAT_EN
 > 0u

73 
	#OS_N_SYS_TASKS
 2u

	)

75 
	#OS_N_SYS_TASKS
 1u

	)

78 
	#OS_TASK_STAT_PRIO
 (
OS_LOWEST_PRIO
 - 1uË

	)

79 
	#OS_TASK_IDLE_PRIO
 (
OS_LOWEST_PRIO
Ë

	)

81 #i‡
OS_LOWEST_PRIO
 <= 63u

82 
	#OS_EVENT_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 8u + 1uË

	)

83 
	#OS_RDY_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 8u + 1uË

	)

85 
	#OS_EVENT_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 16u + 1u)

	)

86 
	#OS_RDY_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 16u + 1u)

	)

89 
	#OS_TASK_IDLE_ID
 65535u

	)

90 
	#OS_TASK_STAT_ID
 65534u

	)

91 
	#OS_TASK_TMR_ID
 65533u

	)

93 
	#OS_EVENT_EN
 (((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)Ë|| (
OS_MBOX_EN
 > 0uË|| (
OS_SEM_EN
 > 0uË|| (
OS_MUTEX_EN
 > 0u))

	)

95 
	#OS_TCB_RESERVED
 ((
OS_TCB
 *)1)

	)

103 
	#OS_STAT_RDY
 0x00u

	)

104 
	#OS_STAT_SEM
 0x01u

	)

105 
	#OS_STAT_MBOX
 0x02u

	)

106 
	#OS_STAT_Q
 0x04u

	)

107 
	#OS_STAT_SUSPEND
 0x08u

	)

108 
	#OS_STAT_MUTEX
 0x10u

	)

109 
	#OS_STAT_FLAG
 0x20u

	)

110 
	#OS_STAT_MULTI
 0x80u

	)

112 
	#OS_STAT_PEND_ANY
 (
OS_STAT_SEM
 | 
OS_STAT_MBOX
 | 
OS_STAT_Q
 | 
OS_STAT_MUTEX
 | 
OS_STAT_FLAG
)

	)

119 
	#OS_STAT_PEND_OK
 0u

	)

120 
	#OS_STAT_PEND_TO
 1u

	)

121 
	#OS_STAT_PEND_ABORT
 2u

	)

128 
	#OS_EVENT_TYPE_UNUSED
 0u

	)

129 
	#OS_EVENT_TYPE_MBOX
 1u

	)

130 
	#OS_EVENT_TYPE_Q
 2u

	)

131 
	#OS_EVENT_TYPE_SEM
 3u

	)

132 
	#OS_EVENT_TYPE_MUTEX
 4u

	)

133 
	#OS_EVENT_TYPE_FLAG
 5u

	)

135 
	#OS_TMR_TYPE
 100u

	)

143 
	#OS_FLAG_WAIT_CLR_ALL
 0u

	)

144 
	#OS_FLAG_WAIT_CLR_AND
 0u

	)

146 
	#OS_FLAG_WAIT_CLR_ANY
 1u

	)

147 
	#OS_FLAG_WAIT_CLR_OR
 1u

	)

149 
	#OS_FLAG_WAIT_SET_ALL
 2u

	)

150 
	#OS_FLAG_WAIT_SET_AND
 2u

	)

152 
	#OS_FLAG_WAIT_SET_ANY
 3u

	)

153 
	#OS_FLAG_WAIT_SET_OR
 3u

	)

156 
	#OS_FLAG_CONSUME
 0x80u

	)

159 
	#OS_FLAG_CLR
 0u

	)

160 
	#OS_FLAG_SET
 1u

	)

170 #i‡
OS_TICK_STEP_EN
 > 0u

171 
	#OS_TICK_STEP_DIS
 0u

	)

172 
	#OS_TICK_STEP_WAIT
 1u

	)

173 
	#OS_TICK_STEP_ONCE
 2u

	)

181 
	#OS_DEL_NO_PEND
 0u

	)

182 
	#OS_DEL_ALWAYS
 1u

	)

191 
	#OS_PEND_OPT_NONE
 0u

	)

192 
	#OS_PEND_OPT_BROADCAST
 1u

	)

201 
	#OS_POST_OPT_NONE
 0x00u

	)

202 
	#OS_POST_OPT_BROADCAST
 0x01u

	)

203 
	#OS_POST_OPT_FRONT
 0x02u

	)

204 
	#OS_POST_OPT_NO_SCHED
 0x04u

	)

211 
	#OS_TASK_OPT_NONE
 0x0000u

	)

212 
	#OS_TASK_OPT_STK_CHK
 0x0001u

	)

213 
	#OS_TASK_OPT_STK_CLR
 0x0002u

	)

214 
	#OS_TASK_OPT_SAVE_FP
 0x0004u

	)

221 
	#OS_TMR_OPT_NONE
 0u

	)

223 
	#OS_TMR_OPT_ONE_SHOT
 1u

	)

224 
	#OS_TMR_OPT_PERIODIC
 2u

	)

226 
	#OS_TMR_OPT_CALLBACK
 3u

	)

227 
	#OS_TMR_OPT_CALLBACK_ARG
 4u

	)

234 
	#OS_TMR_STATE_UNUSED
 0u

	)

235 
	#OS_TMR_STATE_STOPPED
 1u

	)

236 
	#OS_TMR_STATE_COMPLETED
 2u

	)

237 
	#OS_TMR_STATE_RUNNING
 3u

	)

244 
	#OS_ERR_NONE
 0u

	)

246 
	#OS_ERR_EVENT_TYPE
 1u

	)

247 
	#OS_ERR_PEND_ISR
 2u

	)

248 
	#OS_ERR_POST_NULL_PTR
 3u

	)

249 
	#OS_ERR_PEVENT_NULL
 4u

	)

250 
	#OS_ERR_POST_ISR
 5u

	)

251 
	#OS_ERR_QUERY_ISR
 6u

	)

252 
	#OS_ERR_INVALID_OPT
 7u

	)

253 
	#OS_ERR_ID_INVALID
 8u

	)

254 
	#OS_ERR_PDATA_NULL
 9u

	)

256 
	#OS_ERR_TIMEOUT
 10u

	)

257 
	#OS_ERR_EVENT_NAME_TOO_LONG
 11u

	)

258 
	#OS_ERR_PNAME_NULL
 12u

	)

259 
	#OS_ERR_PEND_LOCKED
 13u

	)

260 
	#OS_ERR_PEND_ABORT
 14u

	)

261 
	#OS_ERR_DEL_ISR
 15u

	)

262 
	#OS_ERR_CREATE_ISR
 16u

	)

263 
	#OS_ERR_NAME_GET_ISR
 17u

	)

264 
	#OS_ERR_NAME_SET_ISR
 18u

	)

265 
	#OS_ERR_ILLEGAL_CREATE_RUN_TIME
 19u

	)

267 
	#OS_ERR_MBOX_FULL
 20u

	)

269 
	#OS_ERR_Q_FULL
 30u

	)

270 
	#OS_ERR_Q_EMPTY
 31u

	)

272 
	#OS_ERR_PRIO_EXIST
 40u

	)

273 
	#OS_ERR_PRIO
 41u

	)

274 
	#OS_ERR_PRIO_INVALID
 42u

	)

276 
	#OS_ERR_SCHED_LOCKED
 50u

	)

277 
	#OS_ERR_SEM_OVF
 51u

	)

279 
	#OS_ERR_TASK_CREATE_ISR
 60u

	)

280 
	#OS_ERR_TASK_DEL
 61u

	)

281 
	#OS_ERR_TASK_DEL_IDLE
 62u

	)

282 
	#OS_ERR_TASK_DEL_REQ
 63u

	)

283 
	#OS_ERR_TASK_DEL_ISR
 64u

	)

284 
	#OS_ERR_TASK_NAME_TOO_LONG
 65u

	)

285 
	#OS_ERR_TASK_NO_MORE_TCB
 66u

	)

286 
	#OS_ERR_TASK_NOT_EXIST
 67u

	)

287 
	#OS_ERR_TASK_NOT_SUSPENDED
 68u

	)

288 
	#OS_ERR_TASK_OPT
 69u

	)

289 
	#OS_ERR_TASK_RESUME_PRIO
 70u

	)

290 
	#OS_ERR_TASK_SUSPEND_IDLE
 71u

	)

291 
	#OS_ERR_TASK_SUSPEND_PRIO
 72u

	)

292 
	#OS_ERR_TASK_WAITING
 73u

	)

294 
	#OS_ERR_TIME_NOT_DLY
 80u

	)

295 
	#OS_ERR_TIME_INVALID_MINUTES
 81u

	)

296 
	#OS_ERR_TIME_INVALID_SECONDS
 82u

	)

297 
	#OS_ERR_TIME_INVALID_MS
 83u

	)

298 
	#OS_ERR_TIME_ZERO_DLY
 84u

	)

299 
	#OS_ERR_TIME_DLY_ISR
 85u

	)

301 
	#OS_ERR_MEM_INVALID_PART
 90u

	)

302 
	#OS_ERR_MEM_INVALID_BLKS
 91u

	)

303 
	#OS_ERR_MEM_INVALID_SIZE
 92u

	)

304 
	#OS_ERR_MEM_NO_FREE_BLKS
 93u

	)

305 
	#OS_ERR_MEM_FULL
 94u

	)

306 
	#OS_ERR_MEM_INVALID_PBLK
 95u

	)

307 
	#OS_ERR_MEM_INVALID_PMEM
 96u

	)

308 
	#OS_ERR_MEM_INVALID_PDATA
 97u

	)

309 
	#OS_ERR_MEM_INVALID_ADDR
 98u

	)

310 
	#OS_ERR_MEM_NAME_TOO_LONG
 99u

	)

312 
	#OS_ERR_NOT_MUTEX_OWNER
 100u

	)

314 
	#OS_ERR_FLAG_INVALID_PGRP
 110u

	)

315 
	#OS_ERR_FLAG_WAIT_TYPE
 111u

	)

316 
	#OS_ERR_FLAG_NOT_RDY
 112u

	)

317 
	#OS_ERR_FLAG_INVALID_OPT
 113u

	)

318 
	#OS_ERR_FLAG_GRP_DEPLETED
 114u

	)

319 
	#OS_ERR_FLAG_NAME_TOO_LONG
 115u

	)

321 
	#OS_ERR_PIP_LOWER
 120u

	)

323 
	#OS_ERR_TMR_INVALID_DLY
 130u

	)

324 
	#OS_ERR_TMR_INVALID_PERIOD
 131u

	)

325 
	#OS_ERR_TMR_INVALID_OPT
 132u

	)

326 
	#OS_ERR_TMR_INVALID_NAME
 133u

	)

327 
	#OS_ERR_TMR_NON_AVAIL
 134u

	)

328 
	#OS_ERR_TMR_INACTIVE
 135u

	)

329 
	#OS_ERR_TMR_INVALID_DEST
 136u

	)

330 
	#OS_ERR_TMR_INVALID_TYPE
 137u

	)

331 
	#OS_ERR_TMR_INVALID
 138u

	)

332 
	#OS_ERR_TMR_ISR
 139u

	)

333 
	#OS_ERR_TMR_NAME_TOO_LONG
 140u

	)

334 
	#OS_ERR_TMR_INVALID_STATE
 141u

	)

335 
	#OS_ERR_TMR_STOPPED
 142u

	)

336 
	#OS_ERR_TMR_NO_CALLBACK
 143u

	)

345 #i‡
OS_LOWEST_PRIO
 <= 63u

346 
INT8U
 
	tOS_PRIO
;

348 
INT16U
 
	tOS_PRIO
;

351 #i‡(
OS_EVENT_EN
Ë&& (
OS_MAX_EVENTS
 > 0u)

352 
	sos_evít
 {

353 
INT8U
 
	gOSEvítTy≥
;

354 *
	gOSEvítPå
;

355 
INT16U
 
	gOSEvítC¡
;

356 
OS_PRIO
 
	gOSEvítGΩ
;

357 
OS_PRIO
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

359 #i‡
OS_EVENT_NAME_EN
 > 0u

360 
INT8U
 *
	gOSEvítName
;

362 } 
	tOS_EVENT
;

372 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

374 #i‡
OS_FLAGS_NBITS
 == 8u

375 
INT8U
 
	tOS_FLAGS
;

378 #i‡
OS_FLAGS_NBITS
 == 16u

379 
INT16U
 
	tOS_FLAGS
;

382 #i‡
OS_FLAGS_NBITS
 == 32u

383 
INT32U
 
	tOS_FLAGS
;

387 
	sos_Êag_gΩ
 {

388 
INT8U
 
	gOSFœgTy≥
;

389 *
	gOSFœgWaôLi°
;

390 
OS_FLAGS
 
	gOSFœgFœgs
;

391 #i‡
OS_FLAG_NAME_EN
 > 0u

392 
INT8U
 *
	gOSFœgName
;

394 } 
	tOS_FLAG_GRP
;

398 
	sos_Êag_node
 {

399 *
	gOSFœgNodeNext
;

400 *
	gOSFœgNodePªv
;

401 *
	gOSFœgNodeTCB
;

402 *
	gOSFœgNodeFœgGΩ
;

403 
OS_FLAGS
 
	gOSFœgNodeFœgs
;

404 
INT8U
 
	gOSFœgNodeWaôTy≥
;

409 } 
	tOS_FLAG_NODE
;

419 #i‡
OS_MBOX_EN
 > 0u

420 
	sos_mbox_d©a
 {

421 *
	gOSMsg
;

422 
OS_PRIO
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

423 
OS_PRIO
 
	gOSEvítGΩ
;

424 } 
	tOS_MBOX_DATA
;

433 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

434 
	sos_mem
 {

435 *
	gOSMemAddr
;

436 *
	gOSMemFªeLi°
;

437 
INT32U
 
	gOSMemBlkSize
;

438 
INT32U
 
	gOSMemNBlks
;

439 
INT32U
 
	gOSMemNFªe
;

440 #i‡
OS_MEM_NAME_EN
 > 0u

441 
INT8U
 *
	gOSMemName
;

443 } 
	tOS_MEM
;

446 
	sos_mem_d©a
 {

447 *
	gOSAddr
;

448 *
	gOSFªeLi°
;

449 
INT32U
 
	gOSBlkSize
;

450 
INT32U
 
	gOSNBlks
;

451 
INT32U
 
	gOSNFªe
;

452 
INT32U
 
	gOSNU£d
;

453 } 
	tOS_MEM_DATA
;

463 #i‡
OS_MUTEX_EN
 > 0u

464 
	sos_muãx_d©a
 {

465 
OS_PRIO
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

466 
OS_PRIO
 
	gOSEvítGΩ
;

467 
BOOLEAN
 
	gOSVÆue
;

468 
INT8U
 
	gOSOw√rPrio
;

469 
INT8U
 
	gOSMuãxPIP
;

470 } 
	tOS_MUTEX_DATA
;

479 #i‡
OS_Q_EN
 > 0u

480 
	sos_q
 {

481 
os_q
 *
	gOSQPå
;

482 **
	gOSQSèπ
;

483 **
	gOSQEnd
;

484 **
	gOSQIn
;

485 **
	gOSQOut
;

486 
INT16U
 
	gOSQSize
;

487 
INT16U
 
	gOSQE¡rõs
;

488 } 
	tOS_Q
;

491 
	sos_q_d©a
 {

492 *
	gOSMsg
;

493 
INT16U
 
	gOSNMsgs
;

494 
INT16U
 
	gOSQSize
;

495 
OS_PRIO
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

496 
OS_PRIO
 
	gOSEvítGΩ
;

497 } 
	tOS_Q_DATA
;

506 #i‡
OS_SEM_EN
 > 0u

507 
	sos_£m_d©a
 {

508 
INT16U
 
	gOSC¡
;

509 
OS_PRIO
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

510 
OS_PRIO
 
	gOSEvítGΩ
;

511 } 
	tOS_SEM_DATA
;

520 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

521 
	sos_°k_d©a
 {

522 
INT32U
 
	gOSFªe
;

523 
INT32U
 
	gOSU£d
;

524 } 
	tOS_STK_DATA
;

534 
	sos_tcb
 {

535 
OS_STK
 *
	gOSTCBStkPå
;

537 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

538 *
	gOSTCBExtPå
;

539 
OS_STK
 *
	gOSTCBStkBŸtom
;

540 
INT32U
 
	gOSTCBStkSize
;

541 
INT16U
 
	gOSTCBO±
;

542 
INT16U
 
	gOSTCBId
;

545 
os_tcb
 *
	gOSTCBNext
;

546 
os_tcb
 *
	gOSTCBPªv
;

548 #i‡(
OS_EVENT_EN
)

549 
OS_EVENT
 *
	gOSTCBEvítPå
;

552 #i‡(
OS_EVENT_EN
Ë&& (
OS_EVENT_MULTI_EN
 > 0u)

553 
OS_EVENT
 **
	gOSTCBEvítMu…iPå
;

556 #i‡((
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)Ë|| (
OS_MBOX_EN
 > 0u)

557 *
	gOSTCBMsg
;

560 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

561 #i‡
OS_TASK_DEL_EN
 > 0u

562 
OS_FLAG_NODE
 *
	gOSTCBFœgNode
;

564 
OS_FLAGS
 
	gOSTCBFœgsRdy
;

567 
INT32U
 
	gOSTCBDly
;

568 
INT8U
 
	gOSTCBSèt
;

569 
INT8U
 
	gOSTCBSètPíd
;

570 
INT8U
 
	gOSTCBPrio
;

572 
INT8U
 
	gOSTCBX
;

573 
INT8U
 
	gOSTCBY
;

574 
OS_PRIO
 
	gOSTCBBôX
;

575 
OS_PRIO
 
	gOSTCBBôY
;

577 #i‡
OS_TASK_DEL_EN
 > 0u

578 
INT8U
 
	gOSTCBDñReq
;

581 #i‡
OS_TASK_PROFILE_EN
 > 0u

582 
INT32U
 
	gOSTCBCtxSwCå
;

583 
INT32U
 
	gOSTCBCy˛esTŸ
;

584 
INT32U
 
	gOSTCBCy˛esSèπ
;

585 
OS_STK
 *
	gOSTCBStkBa£
;

586 
INT32U
 
	gOSTCBStkU£d
;

589 #i‡
OS_TASK_NAME_EN
 > 0u

590 
INT8U
 *
	gOSTCBTaskName
;

593 #i‡
OS_TASK_REG_TBL_SIZE
 > 0u

594 
INT32U
 
	gOSTCBRegTbl
[
OS_TASK_REG_TBL_SIZE
];

596 } 
	tOS_TCB
;

605 #i‡
OS_TMR_EN
 > 0u

606 (*
	gOS_TMR_CALLBACK
)(*
	t±mr
, *
	t∑rg
);

610 
	sos_tmr
 {

611 
INT8U
 
	gOSTmrTy≥
;

612 
OS_TMR_CALLBACK
 
	gOSTmrCÆlback
;

613 *
	gOSTmrCÆlbackArg
;

614 *
	gOSTmrNext
;

615 *
	gOSTmrPªv
;

616 
INT32U
 
	gOSTmrM©ch
;

617 
INT32U
 
	gOSTmrDly
;

618 
INT32U
 
	gOSTmrPîiod
;

619 #i‡
OS_TMR_CFG_NAME_EN
 > 0u

620 
INT8U
 *
	gOSTmrName
;

622 
INT8U
 
	gOSTmrO±
;

623 
INT8U
 
	gOSTmrSèã
;

627 } 
	tOS_TMR
;

631 
	sos_tmr_whìl
 {

632 
OS_TMR
 *
	gOSTmrFú°
;

633 
INT16U
 
	gOSTmrE¡rõs
;

634 } 
	tOS_TMR_WHEEL
;

644 
OS_EXT
 
INT32U
 
	gOSCtxSwCå
;

646 #i‡(
OS_EVENT_EN
Ë&& (
OS_MAX_EVENTS
 > 0u)

647 
OS_EXT
 
OS_EVENT
 *
	gOSEvítFªeLi°
;

648 
OS_EXT
 
OS_EVENT
 
	gOSEvítTbl
[
OS_MAX_EVENTS
];

651 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

652 
OS_EXT
 
OS_FLAG_GRP
 
	gOSFœgTbl
[
OS_MAX_FLAGS
];

653 
OS_EXT
 
OS_FLAG_GRP
 *
	gOSFœgFªeLi°
;

656 #i‡
OS_TASK_STAT_EN
 > 0u

657 
OS_EXT
 
INT8U
 
	gOSCPUUßge
;

658 
OS_EXT
 
INT32U
 
	gOSIdÀCåMax
;

659 
OS_EXT
 
INT32U
 
	gOSIdÀCåRun
;

660 
OS_EXT
 
BOOLEAN
 
	gOSSètRdy
;

661 
OS_EXT
 
OS_STK
 
	gOSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
];

664 
OS_EXT
 
INT8U
 
	gOSI¡Ne°ög
;

666 
OS_EXT
 
INT8U
 
	gOSLockNe°ög
;

668 
OS_EXT
 
INT8U
 
	gOSPrioCur
;

669 
OS_EXT
 
INT8U
 
	gOSPrioHighRdy
;

671 
OS_EXT
 
OS_PRIO
 
	gOSRdyGΩ
;

672 
OS_EXT
 
OS_PRIO
 
	gOSRdyTbl
[
OS_RDY_TBL_SIZE
];

674 
OS_EXT
 
BOOLEAN
 
	gOSRu¬ög
;

676 
OS_EXT
 
INT8U
 
	gOSTaskCå
;

678 
OS_EXT
 vﬁ©ûê
INT32U
 
	gOSIdÀCå
;

680 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


681 
OS_EXT
 
BOOLEAN
 
	gOSSa„tyCrôiˇlSèπFœg
;

684 
OS_EXT
 
OS_STK
 
	gOSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
];

687 
OS_EXT
 
OS_TCB
 *
	gOSTCBCur
;

688 
OS_EXT
 
OS_TCB
 *
	gOSTCBFªeLi°
;

689 
OS_EXT
 
OS_TCB
 *
	gOSTCBHighRdy
;

690 
OS_EXT
 
OS_TCB
 *
	gOSTCBLi°
;

691 
OS_EXT
 
OS_TCB
 *
	gOSTCBPrioTbl
[
OS_LOWEST_PRIO
 + 1u];

692 
OS_EXT
 
OS_TCB
 
	gOSTCBTbl
[
OS_MAX_TASKS
 + 
OS_N_SYS_TASKS
];

694 #i‡
OS_TICK_STEP_EN
 > 0u

695 
OS_EXT
 
INT8U
 
	gOSTickSãpSèã
;

698 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

699 
OS_EXT
 
OS_MEM
 *
	gOSMemFªeLi°
;

700 
OS_EXT
 
OS_MEM
 
	gOSMemTbl
[
OS_MAX_MEM_PART
];

703 #i‡(
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)

704 
OS_EXT
 
OS_Q
 *
	gOSQFªeLi°
;

705 
OS_EXT
 
OS_Q
 
	gOSQTbl
[
OS_MAX_QS
];

708 #i‡
OS_TIME_GET_SET_EN
 > 0u

709 
OS_EXT
 vﬁ©ûê
INT32U
 
	gOSTime
;

712 #i‡
OS_TMR_EN
 > 0u

713 
OS_EXT
 
INT16U
 
	gOSTmrFªe
;

714 
OS_EXT
 
INT16U
 
	gOSTmrU£d
;

715 
OS_EXT
 
INT32U
 
	gOSTmrTime
;

717 
OS_EXT
 
OS_EVENT
 *
	gOSTmrSem
;

718 
OS_EXT
 
OS_EVENT
 *
	gOSTmrSemSig«l
;

720 
OS_EXT
 
OS_TMR
 
	gOSTmrTbl
[
OS_TMR_CFG_MAX
];

721 
OS_EXT
 
OS_TMR
 *
	gOSTmrFªeLi°
;

722 
OS_EXT
 
OS_STK
 
	gOSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
];

724 
OS_EXT
 
OS_TMR_WHEEL
 
	gOSTmrWhìlTbl
[
OS_TMR_CFG_WHEEL_SIZE
];

727 
INT8U
 c⁄° 
OSUnM≠Tbl
[256];

743 #i‡(
OS_EVENT_EN
)

745 #i‡(
OS_EVENT_NAME_EN
 > 0u)

746 
INT8U
 
OSEvítNameGë
 (
OS_EVENT
 *
≥vít
,

747 
INT8U
 **
≤ame
,

748 
INT8U
 *
≥º
);

750 
OSEvítNameSë
 (
OS_EVENT
 *
≥vít
,

751 
INT8U
 *
≤ame
,

752 
INT8U
 *
≥º
);

755 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

756 
INT16U
 
OSEvítPídMu…i
 (
OS_EVENT
 **
≥víts_≥nd
,

757 
OS_EVENT
 **
≥víts_rdy
,

758 **
pmsgs_rdy
,

759 
INT32U
 
timeout
,

760 
INT8U
 *
≥º
);

771 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

773 #i‡
OS_FLAG_ACCEPT_EN
 > 0u

774 
OS_FLAGS
 
OSFœgAc˚±
 (
OS_FLAG_GRP
 *
pgΩ
,

775 
OS_FLAGS
 
Êags
,

776 
INT8U
 
waô_ty≥
,

777 
INT8U
 *
≥º
);

780 
OS_FLAG_GRP
 *
OSFœgCª©e
 (
OS_FLAGS
 
Êags
,

781 
INT8U
 *
≥º
);

783 #i‡
OS_FLAG_DEL_EN
 > 0u

784 
OS_FLAG_GRP
 *
OSFœgDñ
 (OS_FLAG_GRP *
pgΩ
,

785 
INT8U
 
›t
,

786 
INT8U
 *
≥º
);

789 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_FLAG_NAME_EN
 > 0u)

790 
INT8U
 
OSFœgNameGë
 (
OS_FLAG_GRP
 *
pgΩ
,

791 
INT8U
 **
≤ame
,

792 
INT8U
 *
≥º
);

794 
OSFœgNameSë
 (
OS_FLAG_GRP
 *
pgΩ
,

795 
INT8U
 *
≤ame
,

796 
INT8U
 *
≥º
);

799 
OS_FLAGS
 
OSFœgPíd
 (
OS_FLAG_GRP
 *
pgΩ
,

800 
OS_FLAGS
 
Êags
,

801 
INT8U
 
waô_ty≥
,

802 
INT32U
 
timeout
,

803 
INT8U
 *
≥º
);

805 
OS_FLAGS
 
OSFœgPídGëFœgsRdy
 ();

806 
OS_FLAGS
 
OSFœgPo°
 (
OS_FLAG_GRP
 *
pgΩ
,

807 
OS_FLAGS
 
Êags
,

808 
INT8U
 
›t
,

809 
INT8U
 *
≥º
);

811 #i‡
OS_FLAG_QUERY_EN
 > 0u

812 
OS_FLAGS
 
OSFœgQuîy
 (
OS_FLAG_GRP
 *
pgΩ
,

813 
INT8U
 *
≥º
);

823 #i‡
OS_MBOX_EN
 > 0u

825 #i‡
OS_MBOX_ACCEPT_EN
 > 0u

826 *
OSMboxAc˚±
 (
OS_EVENT
 *
≥vít
);

829 
OS_EVENT
 *
OSMboxCª©e
 (*
pmsg
);

831 #i‡
OS_MBOX_DEL_EN
 > 0u

832 
OS_EVENT
 *
OSMboxDñ
 (OS_EVENT *
≥vít
,

833 
INT8U
 
›t
,

834 
INT8U
 *
≥º
);

837 *
OSMboxPíd
 (
OS_EVENT
 *
≥vít
,

838 
INT32U
 
timeout
,

839 
INT8U
 *
≥º
);

841 #i‡
OS_MBOX_PEND_ABORT_EN
 > 0u

842 
INT8U
 
OSMboxPídAb‹t
 (
OS_EVENT
 *
≥vít
,

843 
INT8U
 
›t
,

844 
INT8U
 *
≥º
);

847 #i‡
OS_MBOX_POST_EN
 > 0u

848 
INT8U
 
OSMboxPo°
 (
OS_EVENT
 *
≥vít
,

849 *
pmsg
);

852 #i‡
OS_MBOX_POST_OPT_EN
 > 0u

853 
INT8U
 
OSMboxPo°O±
 (
OS_EVENT
 *
≥vít
,

854 *
pmsg
,

855 
INT8U
 
›t
);

858 #i‡
OS_MBOX_QUERY_EN
 > 0u

859 
INT8U
 
OSMboxQuîy
 (
OS_EVENT
 *
≥vít
,

860 
OS_MBOX_DATA
 *
p_mbox_d©a
);

870 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

872 
OS_MEM
 *
OSMemCª©e
 (*
addr
,

873 
INT32U
 
nblks
,

874 
INT32U
 
blksize
,

875 
INT8U
 *
≥º
);

877 *
OSMemGë
 (
OS_MEM
 *
pmem
,

878 
INT8U
 *
≥º
);

879 #i‡
OS_MEM_NAME_EN
 > 0u

880 
INT8U
 
OSMemNameGë
 (
OS_MEM
 *
pmem
,

881 
INT8U
 **
≤ame
,

882 
INT8U
 *
≥º
);

884 
OSMemNameSë
 (
OS_MEM
 *
pmem
,

885 
INT8U
 *
≤ame
,

886 
INT8U
 *
≥º
);

888 
INT8U
 
OSMemPut
 (
OS_MEM
 *
pmem
,

889 *
pblk
);

891 #i‡
OS_MEM_QUERY_EN
 > 0u

892 
INT8U
 
OSMemQuîy
 (
OS_MEM
 *
pmem
,

893 
OS_MEM_DATA
 *
p_mem_d©a
);

904 #i‡
OS_MUTEX_EN
 > 0u

906 #i‡
OS_MUTEX_ACCEPT_EN
 > 0u

907 
BOOLEAN
 
OSMuãxAc˚±
 (
OS_EVENT
 *
≥vít
,

908 
INT8U
 *
≥º
);

911 
OS_EVENT
 *
OSMuãxCª©e
 (
INT8U
 
¥io
,

912 
INT8U
 *
≥º
);

914 #i‡
OS_MUTEX_DEL_EN
 > 0u

915 
OS_EVENT
 *
OSMuãxDñ
 (OS_EVENT *
≥vít
,

916 
INT8U
 
›t
,

917 
INT8U
 *
≥º
);

920 
OSMuãxPíd
 (
OS_EVENT
 *
≥vít
,

921 
INT32U
 
timeout
,

922 
INT8U
 *
≥º
);

924 
INT8U
 
OSMuãxPo°
 (
OS_EVENT
 *
≥vít
);

926 #i‡
OS_MUTEX_QUERY_EN
 > 0u

927 
INT8U
 
OSMuãxQuîy
 (
OS_EVENT
 *
≥vít
,

928 
OS_MUTEX_DATA
 *
p_muãx_d©a
);

940 #i‡(
OS_Q_EN
 > 0uË&& (
OS_MAX_QS
 > 0u)

942 #i‡
OS_Q_ACCEPT_EN
 > 0u

943 *
OSQAc˚±
 (
OS_EVENT
 *
≥vít
,

944 
INT8U
 *
≥º
);

947 
OS_EVENT
 *
OSQCª©e
 (**
°¨t
,

948 
INT16U
 
size
);

950 #i‡
OS_Q_DEL_EN
 > 0u

951 
OS_EVENT
 *
OSQDñ
 (OS_EVENT *
≥vít
,

952 
INT8U
 
›t
,

953 
INT8U
 *
≥º
);

956 #i‡
OS_Q_FLUSH_EN
 > 0u

957 
INT8U
 
OSQFlush
 (
OS_EVENT
 *
≥vít
);

960 *
OSQPíd
 (
OS_EVENT
 *
≥vít
,

961 
INT32U
 
timeout
,

962 
INT8U
 *
≥º
);

964 #i‡
OS_Q_PEND_ABORT_EN
 > 0u

965 
INT8U
 
OSQPídAb‹t
 (
OS_EVENT
 *
≥vít
,

966 
INT8U
 
›t
,

967 
INT8U
 *
≥º
);

970 #i‡
OS_Q_POST_EN
 > 0u

971 
INT8U
 
OSQPo°
 (
OS_EVENT
 *
≥vít
,

972 *
pmsg
);

975 #i‡
OS_Q_POST_FRONT_EN
 > 0u

976 
INT8U
 
OSQPo°Fr⁄t
 (
OS_EVENT
 *
≥vít
,

977 *
pmsg
);

980 #i‡
OS_Q_POST_OPT_EN
 > 0u

981 
INT8U
 
OSQPo°O±
 (
OS_EVENT
 *
≥vít
,

982 *
pmsg
,

983 
INT8U
 
›t
);

986 #i‡
OS_Q_QUERY_EN
 > 0u

987 
INT8U
 
OSQQuîy
 (
OS_EVENT
 *
≥vít
,

988 
OS_Q_DATA
 *
p_q_d©a
);

999 #i‡
OS_SEM_EN
 > 0u

1001 #i‡
OS_SEM_ACCEPT_EN
 > 0u

1002 
INT16U
 
OSSemAc˚±
 (
OS_EVENT
 *
≥vít
);

1005 
OS_EVENT
 *
OSSemCª©e
 (
INT16U
 
˙t
);

1007 #i‡
OS_SEM_DEL_EN
 > 0u

1008 
OS_EVENT
 *
OSSemDñ
 (OS_EVENT *
≥vít
,

1009 
INT8U
 
›t
,

1010 
INT8U
 *
≥º
);

1013 
OSSemPíd
 (
OS_EVENT
 *
≥vít
,

1014 
INT32U
 
timeout
,

1015 
INT8U
 *
≥º
);

1017 #i‡
OS_SEM_PEND_ABORT_EN
 > 0u

1018 
INT8U
 
OSSemPídAb‹t
 (
OS_EVENT
 *
≥vít
,

1019 
INT8U
 
›t
,

1020 
INT8U
 *
≥º
);

1023 
INT8U
 
OSSemPo°
 (
OS_EVENT
 *
≥vít
);

1025 #i‡
OS_SEM_QUERY_EN
 > 0u

1026 
INT8U
 
OSSemQuîy
 (
OS_EVENT
 *
≥vít
,

1027 
OS_SEM_DATA
 *
p_£m_d©a
);

1030 #i‡
OS_SEM_SET_EN
 > 0u

1031 
OSSemSë
 (
OS_EVENT
 *
≥vít
,

1032 
INT16U
 
˙t
,

1033 
INT8U
 *
≥º
);

1044 #i‡
OS_TASK_CHANGE_PRIO_EN
 > 0u

1045 
INT8U
 
OSTaskCh™gePrio
 (INT8U 
ﬁd¥io
,

1046 
INT8U
 
√w¥io
);

1049 #i‡
OS_TASK_CREATE_EN
 > 0u

1050 
INT8U
 
OSTaskCª©e
 ((*
èsk
)(*
p_¨g
),

1051 *
p_¨g
,

1052 
OS_STK
 *
±os
,

1053 
INT8U
 
¥io
);

1056 #i‡
OS_TASK_CREATE_EXT_EN
 > 0u

1057 
INT8U
 
OSTaskCª©eExt
 ((*
èsk
)(*
p_¨g
),

1058 *
p_¨g
,

1059 
OS_STK
 *
±os
,

1060 
INT8U
 
¥io
,

1061 
INT16U
 
id
,

1062 
OS_STK
 *
pbos
,

1063 
INT32U
 
°k_size
,

1064 *
≥xt
,

1065 
INT16U
 
›t
);

1068 #i‡
OS_TASK_DEL_EN
 > 0u

1069 
INT8U
 
OSTaskDñ
 (INT8U 
¥io
);

1070 
INT8U
 
OSTaskDñReq
 (INT8U 
¥io
);

1073 #i‡
OS_TASK_NAME_EN
 > 0u

1074 
INT8U
 
OSTaskNameGë
 (INT8U 
¥io
,

1075 
INT8U
 **
≤ame
,

1076 
INT8U
 *
≥º
);

1078 
OSTaskNameSë
 (
INT8U
 
¥io
,

1079 
INT8U
 *
≤ame
,

1080 
INT8U
 *
≥º
);

1083 #i‡
OS_TASK_SUSPEND_EN
 > 0u

1084 
INT8U
 
OSTaskResume
 (INT8U 
¥io
);

1085 
INT8U
 
OSTaskSu•íd
 (INT8U 
¥io
);

1088 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0uË&& (
OS_TASK_CREATE_EXT_EN
 > 0u)

1089 
INT8U
 
OSTaskStkChk
 (INT8U 
¥io
,

1090 
OS_STK_DATA
 *
p_°k_d©a
);

1093 #i‡
OS_TASK_QUERY_EN
 > 0u

1094 
INT8U
 
OSTaskQuîy
 (INT8U 
¥io
,

1095 
OS_TCB
 *
p_èsk_d©a
);

1100 #i‡
OS_TASK_REG_TBL_SIZE
 > 0u

1101 
INT32U
 
OSTaskRegGë
 (
INT8U
 
¥io
,

1102 
INT8U
 
id
,

1103 
INT8U
 *
≥º
);

1105 
OSTaskRegSë
 (
INT8U
 
¥io
,

1106 
INT8U
 
id
,

1107 
INT32U
 
vÆue
,

1108 
INT8U
 *
≥º
);

1118 
OSTimeDly
 (
INT32U
 
ticks
);

1120 #i‡
OS_TIME_DLY_HMSM_EN
 > 0u

1121 
INT8U
 
OSTimeDlyHMSM
 (INT8U 
hours
,

1122 
INT8U
 
möuãs
,

1123 
INT8U
 
£c⁄ds
,

1124 
INT16U
 
ms
);

1127 #i‡
OS_TIME_DLY_RESUME_EN
 > 0u

1128 
INT8U
 
OSTimeDlyResume
 (INT8U 
¥io
);

1131 #i‡
OS_TIME_GET_SET_EN
 > 0u

1132 
INT32U
 
OSTimeGë
 ();

1133 
OSTimeSë
 (
INT32U
 
ticks
);

1136 
OSTimeTick
 ();

1144 #i‡
OS_TMR_EN
 > 0u

1145 
OS_TMR
 *
OSTmrCª©e
 (
INT32U
 
dly
,

1146 
INT32U
 
≥riod
,

1147 
INT8U
 
›t
,

1148 
OS_TMR_CALLBACK
 
ˇŒback
,

1149 *
ˇŒback_¨g
,

1150 
INT8U
 *
≤ame
,

1151 
INT8U
 *
≥º
);

1153 
BOOLEAN
 
OSTmrDñ
 (
OS_TMR
 *
±mr
,

1154 
INT8U
 *
≥º
);

1156 #i‡
OS_TMR_CFG_NAME_EN
 > 0u

1157 
INT8U
 
OSTmrNameGë
 (
OS_TMR
 *
±mr
,

1158 
INT8U
 **
pde°
,

1159 
INT8U
 *
≥º
);

1161 
INT32U
 
OSTmrRemaöGë
 (
OS_TMR
 *
±mr
,

1162 
INT8U
 *
≥º
);

1164 
INT8U
 
OSTmrSèãGë
 (
OS_TMR
 *
±mr
,

1165 
INT8U
 *
≥º
);

1167 
BOOLEAN
 
OSTmrSèπ
 (
OS_TMR
 *
±mr
,

1168 
INT8U
 *
≥º
);

1170 
BOOLEAN
 
OSTmrSt›
 (
OS_TMR
 *
±mr
,

1171 
INT8U
 
›t
,

1172 *
ˇŒback_¨g
,

1173 
INT8U
 *
≥º
);

1175 
INT8U
 
OSTmrSig«l
 ();

1184 
OSInô
 ();

1186 
OSI¡E¡î
 ();

1187 
OSI¡Exô
 ();

1189 #ifde‡
OS_SAFETY_CRITICAL_IEC61508


1190 
OSSa„tyCrôiˇlSèπ
 ();

1193 #i‡
OS_SCHED_LOCK_EN
 > 0u

1194 
OSSchedLock
 ();

1195 
OSSchedU∆ock
 ();

1198 
OSSèπ
 ();

1200 
OSSètInô
 ();

1202 
INT16U
 
OSVîsi⁄
 ();

1212 #i‡
OS_TASK_DEL_EN
 > 0u

1213 
OS_Dummy
 ();

1216 #i‡(
OS_EVENT_EN
)

1217 
INT8U
 
OS_EvítTaskRdy
 (
OS_EVENT
 *
≥vít
,

1218 *
pmsg
,

1219 
INT8U
 
msk
,

1220 
INT8U
 
≥nd_°©
);

1222 
OS_EvítTaskWaô
 (
OS_EVENT
 *
≥vít
);

1224 
OS_EvítTaskRemove
 (
OS_TCB
 *
±cb
,

1225 
OS_EVENT
 *
≥vít
);

1227 #i‡(
OS_EVENT_MULTI_EN
 > 0u)

1228 
OS_EvítTaskWaôMu…i
 (
OS_EVENT
 **
≥víts_waô
);

1230 
OS_EvítTaskRemoveMu…i
 (
OS_TCB
 *
±cb
,

1231 
OS_EVENT
 **
≥víts_mu…i
);

1234 
OS_EvítWaôLi°Inô
 (
OS_EVENT
 *
≥vít
);

1237 #i‡(
OS_FLAG_EN
 > 0uË&& (
OS_MAX_FLAGS
 > 0u)

1238 
OS_FœgInô
 ();

1239 
OS_FœgU∆ök
 (
OS_FLAG_NODE
 *
≤ode
);

1242 
OS_MemCÃ
 (
INT8U
 *
pde°
,

1243 
INT16U
 
size
);

1245 
OS_MemC›y
 (
INT8U
 *
pde°
,

1246 
INT8U
 *
p§c
,

1247 
INT16U
 
size
);

1249 #i‡(
OS_MEM_EN
 > 0uË&& (
OS_MAX_MEM_PART
 > 0u)

1250 
OS_MemInô
 ();

1253 #i‡
OS_Q_EN
 > 0u

1254 
OS_QInô
 ();

1257 
OS_Sched
 ();

1259 #i‡(
OS_EVENT_NAME_EN
 > 0uË|| (
OS_FLAG_NAME_EN
 > 0uË|| (
OS_MEM_NAME_EN
 > 0uË|| (
OS_TASK_NAME_EN
 > 0u)

1260 
INT8U
 
OS_SåLí
 (INT8U *
p§c
);

1263 
OS_TaskIdÀ
 (*
p_¨g
);

1265 
OS_TaskRëu∫
 ();

1267 #i‡
OS_TASK_STAT_EN
 > 0u

1268 
OS_TaskSèt
 (*
p_¨g
);

1271 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0uË&& (
OS_TASK_CREATE_EXT_EN
 > 0u)

1272 
OS_TaskStkCÃ
 (
OS_STK
 *
pbos
,

1273 
INT32U
 
size
,

1274 
INT16U
 
›t
);

1277 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0uË&& (
OS_TASK_CREATE_EXT_EN
 > 0u)

1278 
OS_TaskSètStkChk
 ();

1281 
INT8U
 
OS_TCBInô
 (INT8U 
¥io
,

1282 
OS_STK
 *
±os
,

1283 
OS_STK
 *
pbos
,

1284 
INT16U
 
id
,

1285 
INT32U
 
°k_size
,

1286 *
≥xt
,

1287 
INT16U
 
›t
);

1289 #i‡
OS_TMR_EN
 > 0u

1290 
OSTmr_Inô
 ();

1301 #i‡
OS_DEBUG_EN
 > 0u

1302 
OSDebugInô
 ();

1305 
OSInôHookBegö
 ();

1306 
OSInôHookEnd
 ();

1308 
OSTaskCª©eHook
 (
OS_TCB
 *
±cb
);

1309 
OSTaskDñHook
 (
OS_TCB
 *
±cb
);

1311 
OSTaskIdÀHook
 ();

1313 
OSTaskRëu∫Hook
 (
OS_TCB
 *
±cb
);

1315 
OSTaskSètHook
 ();

1316 
OS_STK
 *
OSTaskStkInô
 ((*
èsk
)(*
p_¨g
),

1317 *
p_¨g
,

1318 
OS_STK
 *
±os
,

1319 
INT16U
 
›t
);

1321 #i‡
OS_TASK_SW_HOOK_EN
 > 0u

1322 
OSTaskSwHook
 ();

1325 
OSTCBInôHook
 (
OS_TCB
 *
±cb
);

1327 #i‡
OS_TIME_TICK_HOOK_EN
 > 0u

1328 
OSTimeTickHook
 ();

1339 #i‡
OS_APP_HOOKS_EN
 > 0u

1340 
Aµ_TaskCª©eHook
 (
OS_TCB
 *
±cb
);

1341 
Aµ_TaskDñHook
 (
OS_TCB
 *
±cb
);

1342 
Aµ_TaskIdÀHook
 ();

1344 
Aµ_TaskRëu∫Hook
 (
OS_TCB
 *
±cb
);

1346 
Aµ_TaskSètHook
 ();

1348 #i‡
OS_TASK_SW_HOOK_EN
 > 0u

1349 
Aµ_TaskSwHook
 ();

1352 
Aµ_TCBInôHook
 (
OS_TCB
 *
±cb
);

1354 #i‡
OS_TIME_TICK_HOOK_EN
 > 0u

1355 
Aµ_TimeTickHook
 ();

1368 
OSSèπHighRdy
 ();

1369 
OSI¡CtxSw
 ();

1370 
OSCtxSw
 ();

1392 #i‚de‡
OS_FLAG_EN


1395 #i‚de‡
OS_MAX_FLAGS


1398 #i‡ 
OS_MAX_FLAGS
 > 65500u

1403 #i‚de‡
OS_FLAGS_NBITS


1407 #i‚de‡
OS_FLAG_WAIT_CLR_EN


1411 #i‚de‡
OS_FLAG_ACCEPT_EN


1415 #i‚de‡
OS_FLAG_DEL_EN


1419 #i‚de‡
OS_FLAG_NAME_EN


1423 #i‚de‡
OS_FLAG_QUERY_EN


1434 #i‚de‡
OS_MBOX_EN


1437 #i‚de‡
OS_MBOX_ACCEPT_EN


1441 #i‚de‡
OS_MBOX_DEL_EN


1445 #i‚de‡
OS_MBOX_PEND_ABORT_EN


1449 #i‚de‡
OS_MBOX_POST_EN


1453 #i‚de‡
OS_MBOX_POST_OPT_EN


1457 #i‚de‡
OS_MBOX_QUERY_EN


1468 #i‚de‡
OS_MEM_EN


1471 #i‚de‡
OS_MAX_MEM_PART


1474 #i‡ 
OS_MAX_MEM_PART
 > 65500u

1479 #i‚de‡
OS_MEM_NAME_EN


1483 #i‚de‡
OS_MEM_QUERY_EN


1494 #i‚de‡
OS_MUTEX_EN


1497 #i‚de‡
OS_MUTEX_ACCEPT_EN


1501 #i‚de‡
OS_MUTEX_DEL_EN


1505 #i‚de‡
OS_MUTEX_QUERY_EN


1516 #i‚de‡
OS_Q_EN


1519 #i‚de‡
OS_MAX_QS


1522 #i‡ 
OS_MAX_QS
 > 65500u

1527 #i‚de‡
OS_Q_ACCEPT_EN


1531 #i‚de‡
OS_Q_DEL_EN


1535 #i‚de‡
OS_Q_FLUSH_EN


1539 #i‚de‡
OS_Q_PEND_ABORT_EN


1543 #i‚de‡
OS_Q_POST_EN


1547 #i‚de‡
OS_Q_POST_FRONT_EN


1551 #i‚de‡
OS_Q_POST_OPT_EN


1555 #i‚de‡
OS_Q_QUERY_EN


1566 #i‚de‡
OS_SEM_EN


1569 #i‚de‡
OS_SEM_ACCEPT_EN


1573 #i‚de‡
OS_SEM_DEL_EN


1577 #i‚de‡
OS_SEM_PEND_ABORT_EN


1581 #i‚de‡
OS_SEM_QUERY_EN


1585 #i‚de‡
OS_SEM_SET_EN


1596 #i‚de‡
OS_MAX_TASKS


1599 #i‡ 
OS_MAX_TASKS
 < 2u

1603 #i‡ 
OS_MAX_TASKS
 > ((
OS_LOWEST_PRIO
 - 
OS_N_SYS_TASKS
) + 1u)

1609 #i‡ 
OS_LOWEST_PRIO
 > 254u

1613 #i‚de‡
OS_TASK_IDLE_STK_SIZE


1617 #i‚de‡
OS_TASK_STAT_EN


1621 #i‚de‡
OS_TASK_STAT_STK_SIZE


1625 #i‚de‡
OS_TASK_STAT_STK_CHK_EN


1629 #i‚de‡
OS_TASK_CHANGE_PRIO_EN


1633 #i‚de‡
OS_TASK_CREATE_EN


1637 #i‚de‡
OS_TASK_CREATE_EXT_EN


1641 #i‚de‡
OS_TASK_DEL_EN


1645 #i‚de‡
OS_TASK_NAME_EN


1649 #i‚de‡
OS_TASK_SUSPEND_EN


1653 #i‚de‡
OS_TASK_QUERY_EN


1657 #i‚de‡
OS_TASK_REG_TBL_SIZE


1660 #i‡ 
OS_TASK_REG_TBL_SIZE
 > 255u

1671 #i‚de‡
OS_TICKS_PER_SEC


1675 #i‚de‡
OS_TIME_DLY_HMSM_EN


1679 #i‚de‡
OS_TIME_DLY_RESUME_EN


1683 #i‚de‡
OS_TIME_GET_SET_EN


1693 #i‚de‡
OS_TMR_EN


1695 #ñi‡ 
OS_TMR_EN
 > 0u

1696 #i‡ 
OS_SEM_EN
 == 0u

1701 #i‚de‡
OS_TMR_CFG_MAX


1704 #i‡
OS_TMR_CFG_MAX
 < 2u

1708 #i‡
OS_TMR_CFG_MAX
 > 65500u

1713 #i‚de‡
OS_TMR_CFG_WHEEL_SIZE


1716 #i‡
OS_TMR_CFG_WHEEL_SIZE
 < 2u

1720 #i‡
OS_TMR_CFG_WHEEL_SIZE
 > 1024u

1725 #i‚de‡
OS_TMR_CFG_NAME_EN


1729 #i‚de‡
OS_TMR_CFG_TICKS_PER_SEC


1733 #i‚de‡
OS_TASK_TMR_STK_SIZE


1745 #i‚de‡
OS_ARG_CHK_EN


1750 #i‚de‡
OS_CPU_HOOKS_EN


1755 #i‚de‡
OS_APP_HOOKS_EN


1760 #i‚de‡
OS_DEBUG_EN


1765 #i‚de‡
OS_LOWEST_PRIO


1770 #i‚de‡
OS_MAX_EVENTS


1773 #i‡ 
OS_MAX_EVENTS
 > 65500u

1779 #i‚de‡
OS_SCHED_LOCK_EN


1784 #i‚de‡
OS_EVENT_MULTI_EN


1789 #i‚de‡
OS_TASK_PROFILE_EN


1794 #i‚de‡
OS_TASK_SW_HOOK_EN


1799 #i‚de‡
OS_TICK_STEP_EN


1804 #i‚de‡
OS_TIME_TICK_HOOK_EN


1814 #ifde‡
SAFETY_CRITICAL_RELEASE


1816 #i‡ 
OS_ARG_CHK_EN
 < 1u

1820 #i‡ 
OS_APP_HOOKS_EN
 > 0u

1824 #i‡ 
OS_DEBUG_EN
 > 0u

1828 #ifde‡
CANTATA


1832 #ifde‡
OS_SCHED_LOCK_EN


1836 #ifde‡
VSC_VALIDATION_MODE


1840 #i‡ 
OS_TASK_STAT_EN
 > 0u

1844 #i‡ 
OS_TICK_STEP_EN
 > 0u

1848 #i‡ 
OS_FLAG_EN
 > 0u

1849 #i‡ 
OS_FLAG_DEL_EN
 > 0

1854 #i‡ 
OS_MBOX_EN
 > 0u

1855 #i‡ 
OS_MBOX_DEL_EN
 > 0u

1860 #i‡ 
OS_MUTEX_EN
 > 0u

1861 #i‡ 
OS_MUTEX_DEL_EN
 > 0u

1866 #i‡ 
OS_Q_EN
 > 0u

1867 #i‡ 
OS_Q_DEL_EN
 > 0u

1872 #i‡ 
OS_SEM_EN
 > 0u

1873 #i‡ 
OS_SEM_DEL_EN
 > 0u

1878 #i‡ 
OS_TASK_EN
 > 0u

1879 #i‡ 
OS_TASK_DEL_EN
 > 0u

1884 #i‡ 
OS_CRITICAL_METHOD
 != 3u

1890 #ifde‡
__˝lu•lus


	@
1
.
0
44
3450
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\arm_common_tables.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\arm_math.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cm4.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cm4_simd.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cmFunc.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\cmsis\core_cmInstr.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\inc\stm32f4xx.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\inc\system_stm32f4xx.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\src\main.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\src\startup_stm32f4xx.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\src\system_stm32f4xx.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_core.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_flag.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_mbox.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_mem.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_mutex.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_q.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_sem.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_task.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_time.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\CORE\os_tmr.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\PORT\os_cpu_a.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\PORT\os_cpu_c.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\obj\Debug\ucosii\PORT\os_dbg.d
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\src\main.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\src\startup_stm32f4xx.S
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\src\system_stm32f4xx.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\CONFIG\app_cfg.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\CONFIG\os_cfg.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_cpu.h
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_cpu_a.S
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_cpu_c.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Ports\os_dbg.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_core.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_flag.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_mbox.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_mem.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_mutex.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_q.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_sem.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_task.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_time.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\os_tmr.c
G:\Project\stm32f407-embitz\test1-led\ucosii-0114-19\ucosii\Source\ucos_ii.h
